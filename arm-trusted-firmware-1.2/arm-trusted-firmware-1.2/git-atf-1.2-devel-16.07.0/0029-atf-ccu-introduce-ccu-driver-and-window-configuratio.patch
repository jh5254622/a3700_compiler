From a57ff586b22070b3cecb7c5fbc1c581fb372dd2f Mon Sep 17 00:00:00 2001
From: "hayim@marvell.com" <hayim@marvell.com>
Date: Tue, 23 Feb 2016 18:10:53 +0200
Subject: [PATCH 029/239] atf: ccu: introduce ccu driver and window
 configuration for 7040-rz

- add driver for ccu configuration
- set platform specific ccu configuration for 7040-rz
- this configuration can be overridden by the customer

Change-Id: I01084a8fdd366f3d70e8e7a21d881873c7af8726
Signed-off-by: hayim@marvell.com <hayim@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27796
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 drivers/marvell/ccu.c                              | 266 +++++++++++++++++++++
 include/drivers/marvell/ccu.h                      |  63 +++++
 .../plat/marvell/a8k/a7040_rz/board/plat_config.h  |   5 +-
 plat/marvell/a8k/a7040_rz/apn806_setup.c           |   4 +
 .../a8k/a7040_rz/board/marvell_plat_config.c       |  28 +++
 plat/marvell/a8k/a7040_rz/plat_def.h               |   1 +
 plat/marvell/a8k/a7040_rz/platform.mk              |   3 +-
 7 files changed, 368 insertions(+), 2 deletions(-)
 create mode 100644 drivers/marvell/ccu.c
 create mode 100644 include/drivers/marvell/ccu.h

diff --git a/drivers/marvell/ccu.c b/drivers/marvell/ccu.c
new file mode 100644
index 0000000..4edfeb8
--- /dev/null
+++ b/drivers/marvell/ccu.c
@@ -0,0 +1,266 @@
+/*
+* ***************************************************************************
+* Copyright (C) 2016 Marvell International Ltd.
+* ***************************************************************************
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are met:
+*
+* Redistributions of source code must retain the above copyright notice, this
+* list of conditions and the following disclaimer.
+*
+* Redistributions in binary form must reproduce the above copyright notice,
+* this list of conditions and the following disclaimer in the documentation
+* and/or other materials provided with the distribution.
+*
+* Neither the name of Marvell nor the names of its contributors may be used
+* to endorse or promote products derived from this software without specific
+* prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
+* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+* POSSIBILITY OF SUCH DAMAGE.
+*
+***************************************************************************
+*/
+
+#include <plat_def.h>
+#include <debug.h>
+#include <mmio.h>
+#include <mvebu.h>
+#include <ccu.h>
+#include <plat_config.h>
+
+#if LOG_LEVEL >= LOG_LEVEL_INFO
+#define DEBUG_ADDR_MAP
+#endif
+
+/* common defines */
+#define WIN_ENABLE_BIT			(0x1)
+/* Physical address of the base of the window = {AddrLow[19:0],20â€™h0} */
+#define ADDRESS_SHIFT			(20 - 4)
+#define ADDRESS_MASK			(0xFFFFFFF0)
+#define CCU_WIN_ALIGNMENT		(0x100000)
+
+/* AP registers */
+#define CCU_MAX_WIN_NUM			(8)
+#define CCU_WIN_CR_OFFSET(win)		(ccu_info->ccu_base + 0x0 + (0x10 * win))
+#define CCU_TARGET_ID_OFFSET		(8)
+#define CCU_TARGET_ID_MASK		(0x7F)
+
+#define CCU_WIN_SCR_OFFSET(win)		(ccu_info->ccu_base + 0x4 + (0x10 * win))
+#define CCU_WIN_ENA_WRITE_SECURE	(0x1)
+#define CCU_WIN_ENA_READ_SECURE		(0x2)
+
+#define CCU_WIN_ALR_OFFSET(win)		(ccu_info->ccu_base + 0x8 + (0x10 * win))
+#define CCU_WIN_AHR_OFFSET(win)		(ccu_info->ccu_base + 0xC + (0x10 * win))
+
+#define CCU_WIN_GCR_OFFSET		(ccu_info->ccu_base + 0xD0)
+#define CCU_GCR_TARGET_OFFSET		(8)
+#define CCU_GCR_TARGET_MASK		(0xF)
+
+
+struct ccu_configuration {
+	uintptr_t ccu_base;
+	uint32_t max_win;
+};
+
+struct ccu_configuration ccu_config;
+struct ccu_configuration *ccu_info = &ccu_config;
+
+#ifdef DEBUG_ADDR_MAP
+struct ccu_target_name_map {
+	enum ccu_target_ids trgt_id;
+	char name[10];
+};
+
+struct ccu_target_name_map ccu_target_name_table[] = {
+	{IO_0_TID,	"IO-0	"},
+	{DRAM_0_TID,	"DRAM-0 "},
+	{IO_1_TID,	"IO-1	"},
+	{CFG_REG_TID,	"CFG-REG"},
+	{RAR_TID,	"RAR	"},
+	{SRAM_TID,	"SRAM	"},
+	{DRAM_1_TID,	"DRAM-1 "},
+	{INVALID_TID,	"INVALID"},
+};
+
+static char *ccu_target_name_get(enum ccu_target_ids trgt_id)
+{
+	int i;
+
+	for (i = 0; i < CCU_MAX_TID; i++)
+		if (ccu_target_name_table[i].trgt_id == trgt_id)
+			return ccu_target_name_table[i].name;
+	return ccu_target_name_get(INVALID_TID);
+}
+
+static void dump_ccu(void)
+{
+	uint32_t win_id, win_cr, alr, ahr;
+	uint8_t target_id;
+	uint64_t start, end;
+
+	/* Dump all AP windows */
+	printf("bank  id target   start		     end\n");
+	printf("----------------------------------------------------\n");
+	for (win_id = 0; win_id < ccu_info->max_win; win_id++) {
+		win_cr = mmio_read_32(CCU_WIN_CR_OFFSET(win_id));
+		printf("Win %d: 0x%lx: 0x%x\n", win_id, CCU_WIN_CR_OFFSET(win_id), win_cr);
+		if (win_cr & WIN_ENABLE_BIT) {
+			printf("\tWin %d: Enabled\n", win_id);
+			target_id = (win_cr >> CCU_TARGET_ID_OFFSET) & CCU_TARGET_ID_MASK;
+			alr = mmio_read_32(CCU_WIN_ALR_OFFSET(win_id));
+			ahr = mmio_read_32(CCU_WIN_AHR_OFFSET(win_id));
+			start = ((uint64_t)alr << ADDRESS_SHIFT);
+			end = (((uint64_t)ahr + 0x10) << ADDRESS_SHIFT);
+			printf("ccu   %02x %s  0x%016lx 0x%016lx\n"
+				, win_id, ccu_target_name_get(target_id), start, end);
+		}
+	}
+	win_cr = mmio_read_32(CCU_WIN_GCR_OFFSET);
+	target_id = (win_cr >> CCU_GCR_TARGET_OFFSET) & CCU_GCR_TARGET_MASK;
+	printf("ccu   GCR %s - all other transactions\n", ccu_target_name_get(target_id));
+
+	return;
+}
+#endif
+
+static void ccu_win_check(struct ccu_win *win, uint32_t win_num)
+{
+	uint64_t start_addr, win_size;
+
+	/* check if address is aligned to 1M */
+	start_addr = ((uint64_t)win->base_addr_high << 32) + win->base_addr_low;
+	if (IS_NOT_ALIGN(start_addr, CCU_WIN_ALIGNMENT)) {
+		start_addr = ALIGN_UP(start_addr, CCU_WIN_ALIGNMENT);
+		ERROR("Window %d: base address unaligned to 0x%x\n", win_num, CCU_WIN_ALIGNMENT);
+		printf("Align up the base address to 0x%lx\n", start_addr);
+		win->base_addr_high = (uint32_t)(start_addr >> 32);
+		win->base_addr_low = (uint32_t)(start_addr);
+	}
+
+	/* size parameter validity check */
+	win_size = ((uint64_t)win->win_size_high << 32) + win->win_size_low;
+	if (IS_NOT_ALIGN(win_size, CCU_WIN_ALIGNMENT)) {
+		win_size = ALIGN_UP(win_size, CCU_WIN_ALIGNMENT);
+		ERROR("Window %d: window size unaligned to 0x%x\n", win_num, CCU_WIN_ALIGNMENT);
+		printf("Aligning size to 0x%lx\n", win_size);
+		win->win_size_high = (uint32_t)(win_size >> 32);
+		win->win_size_low = (uint32_t)(win_size);
+	}
+}
+
+static void ccu_enable_win(struct ccu_win *win, uint32_t win_id)
+{
+	uint32_t ccu_win_reg;
+	uint32_t alr, ahr;
+	uint64_t start_addr, end_addr;
+
+	start_addr = ((uint64_t)win->base_addr_high << 32) + win->base_addr_low;
+	end_addr = (start_addr + (((uint64_t)win->win_size_high << 32) + win->win_size_low) - 1);
+	alr = (uint32_t)((start_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
+	ahr = (uint32_t)((end_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
+
+	mmio_write_32(CCU_WIN_ALR_OFFSET(win_id), alr);
+	mmio_write_32(CCU_WIN_AHR_OFFSET(win_id), ahr);
+
+	ccu_win_reg = WIN_ENABLE_BIT;
+	ccu_win_reg |= (win->target_id & CCU_TARGET_ID_MASK) << CCU_TARGET_ID_OFFSET;
+	mmio_write_32(CCU_WIN_CR_OFFSET(win_id), ccu_win_reg);
+}
+
+static int skip_ccu_window(uint32_t win_reg)
+{
+	uint8_t target_id;
+
+	/* avoid overriding internal register and SRAM windows
+	   At SPL stage BootROM open the SRAM window and close it
+	   at the end of the SPL stage */
+	if (win_reg & WIN_ENABLE_BIT) {
+		target_id = (win_reg >> CCU_TARGET_ID_OFFSET) & CCU_TARGET_ID_MASK;
+		if (((target_id) == SRAM_TID) || ((target_id) == CFG_REG_TID))
+			return 1;
+	}
+
+	return 0;
+}
+
+int init_ccu(void)
+{
+	struct ccu_win *win;
+	uint32_t win_id, win_reg;
+	uint32_t win_count, array_id;
+
+	INFO("Initializing CCU Address decoding\n");
+
+	/* Get the base address of the address decoding CCU */
+	ccu_info->ccu_base = marvell_get_ccu_reg_offs();
+
+	/* Get the maximum number of CCU windows supported */
+	ccu_info->max_win = marvell_get_ccu_max_win();
+	if ((ccu_info->max_win == 0) || (ccu_info->max_win > CCU_MAX_WIN_NUM)) {
+		ccu_info->max_win = CCU_MAX_WIN_NUM;
+		ERROR("failed reading max windows number, set window max size to %d\n", ccu_info->max_win);
+	}
+
+	/* Get the array of the windows and fill the map data */
+	marvell_get_ccu_memory_map(&win, &win_count);
+	if (win_count <= 0) {
+		INFO("no windows configurations found\n");
+		return 0;
+	}
+
+	/* Set the default target ID to DRAM 0 */
+	win_reg = (DRAM_0_TID & CCU_GCR_TARGET_MASK) << CCU_GCR_TARGET_OFFSET;
+	mmio_write_32(CCU_WIN_GCR_OFFSET, win_reg);
+
+	/* disable AP windows */
+	for (win_id = 0; win_id < ccu_info->max_win; win_id++) {
+		win_reg = mmio_read_32(CCU_WIN_CR_OFFSET(win_id));
+		if (skip_ccu_window(win_reg))
+				continue;
+
+		win_reg &= ~WIN_ENABLE_BIT;
+		mmio_write_32(CCU_WIN_CR_OFFSET(win_id), win_reg);
+
+		/* enable write secure (and clear read secure) */
+		win_reg = CCU_WIN_ENA_WRITE_SECURE;
+		mmio_write_32(CCU_WIN_SCR_OFFSET(win_id), win_reg);
+	}
+
+	for (win_id = 0, array_id = 0;
+		  ((win_id < ccu_info->max_win) && (array_id < win_count)); win_id++) {
+		/* win_id is the index of the current ccu window
+			array_id is the index of the current FDT window entry */
+
+		win_reg = mmio_read_32(CCU_WIN_CR_OFFSET(win_id));
+		if (skip_ccu_window(win_reg))
+				continue;
+
+		ccu_win_check(win, win_id);
+		ccu_enable_win(win, win_id);
+
+		win++;
+		array_id++;
+	}
+
+	if (array_id != win_count)
+		ERROR("Set only %d CCU windows. expected %d", array_id, win_count);
+
+#ifdef DEBUG_ADDR_MAP
+	dump_ccu();
+#endif
+
+	INFO("Done CCU Address decoding Initializing\n");
+
+	return 0;
+}
diff --git a/include/drivers/marvell/ccu.h b/include/drivers/marvell/ccu.h
new file mode 100644
index 0000000..748d72b
--- /dev/null
+++ b/include/drivers/marvell/ccu.h
@@ -0,0 +1,63 @@
+/*
+* ***************************************************************************
+* Copyright (C) 2016 Marvell International Ltd.
+* ***************************************************************************
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are met:
+*
+* Redistributions of source code must retain the above copyright notice, this
+* list of conditions and the following disclaimer.
+*
+* Redistributions in binary form must reproduce the above copyright notice,
+* this list of conditions and the following disclaimer in the documentation
+* and/or other materials provided with the distribution.
+*
+* Neither the name of Marvell nor the names of its contributors may be used
+* to endorse or promote products derived from this software without specific
+* prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
+* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+* POSSIBILITY OF SUCH DAMAGE.
+*
+***************************************************************************
+*/
+
+#ifndef _CCU_H_
+#define _CCU_H_
+
+#include <stdint.h>
+
+struct ccu_win {
+	uint32_t base_addr_high;
+	uint32_t base_addr_low;
+	uint32_t win_size_high;
+	uint32_t win_size_low;
+	uint32_t target_id;
+};
+
+enum ccu_target_ids {
+	IO_0_TID        = 0x00,
+	DRAM_0_TID      = 0x03,
+	IO_1_TID        = 0x0F,
+	CFG_REG_TID     = 0x10,
+	RAR_TID         = 0x20,
+	SRAM_TID        = 0x40,
+	DRAM_1_TID      = 0xC0,
+	CCU_MAX_TID,
+	INVALID_TID     = 0xFF
+};
+
+int init_ccu(void);
+
+#endif /* _CCU_H_ */
+
diff --git a/include/plat/marvell/a8k/a7040_rz/board/plat_config.h b/include/plat/marvell/a8k/a7040_rz/board/plat_config.h
index 5c21716..f64de55 100644
--- a/include/plat/marvell/a8k/a7040_rz/board/plat_config.h
+++ b/include/plat/marvell/a8k/a7040_rz/board/plat_config.h
@@ -36,17 +36,20 @@
 
 #include <rfu.h>
 #include <iob.h>
+#include <ccu.h>
 
 
 uintptr_t marvell_get_rfu_reg_offs(void);
 uintptr_t marvell_get_iob_reg_offs(void);
 int marvell_get_iob_max_win(void);
+uintptr_t marvell_get_ccu_reg_offs(void);
+int marvell_get_ccu_max_win(void);
 
 
 /* The functions below are defined as Weak and may be overridden in specific Marvell
    standard platform */
 int marvell_get_rfu_memory_map(struct rfu_win **win, uint32_t *size);
 int marvell_get_iob_memory_map(struct iob_win **win, uint32_t *size);
-
+int marvell_get_ccu_memory_map(struct ccu_win **win, uint32_t *size);
 
 #endif /* __BOARD_CONFIG_H__ */
diff --git a/plat/marvell/a8k/a7040_rz/apn806_setup.c b/plat/marvell/a8k/a7040_rz/apn806_setup.c
index 992b627..c0b6094 100644
--- a/plat/marvell/a8k/a7040_rz/apn806_setup.c
+++ b/plat/marvell/a8k/a7040_rz/apn806_setup.c
@@ -34,9 +34,13 @@
 
 #include <apn806_setup.h>
 #include <rfu.h>
+#include <ccu.h>
 
 void apn806_init(void)
 {
 	/* configure RFU windows */
 	init_rfu();
+
+	/* configure CCU windows */
+	init_ccu();
 }
diff --git a/plat/marvell/a8k/a7040_rz/board/marvell_plat_config.c b/plat/marvell/a8k/a7040_rz/board/marvell_plat_config.c
index 47473e4..14871c2 100644
--- a/plat/marvell/a8k/a7040_rz/board/marvell_plat_config.c
+++ b/plat/marvell/a8k/a7040_rz/board/marvell_plat_config.c
@@ -39,6 +39,7 @@
 /* Weak definitions may be overridden in specific Marvell standard platform */
 #pragma weak marvell_get_rfu_memory_map
 #pragma weak marvell_get_iob_memory_map
+#pragma weak marvell_get_ccu_memory_map
 
 /*******************************************************************************
  * RFU Configuration
@@ -91,3 +92,30 @@ int marvell_get_iob_memory_map(struct iob_win **win, uint32_t *size)
 
 	return 0;
 }
+
+/*******************************************************************************
+ * CCU Configuration
+ ******************************************************************************/
+#define MARVELL_CCU_MAX_WIN	8
+
+struct ccu_win ccu_memory_map[] = {
+	{0x0,	0xf2000000,	0x0,	0xe000000,	IO_0_TID}, /* IO window */
+};
+
+uintptr_t marvell_get_ccu_reg_offs(void)
+{
+	return MVEBU_CCU_BASE;
+}
+
+int marvell_get_ccu_max_win(void)
+{
+	return MARVELL_CCU_MAX_WIN;
+}
+
+int marvell_get_ccu_memory_map(struct ccu_win **win, uint32_t *size)
+{
+	*win = ccu_memory_map;
+	*size = sizeof(ccu_memory_map)/sizeof(struct ccu_win);
+
+	return 0;
+}
diff --git a/plat/marvell/a8k/a7040_rz/plat_def.h b/plat/marvell/a8k/a7040_rz/plat_def.h
index 9eaac98..ee833c7 100644
--- a/plat/marvell/a8k/a7040_rz/plat_def.h
+++ b/plat/marvell/a8k/a7040_rz/plat_def.h
@@ -41,6 +41,7 @@
 #define MVEBU_REGS_BASE			0xF0000000
 #define MVEBU_CP0_REGS_BASE		0xF2000000
 #define MVEBU_RFU_BASE			(MVEBU_REGS_BASE + 0x6F0000)
+#define MVEBU_CCU_BASE			(MVEBU_REGS_BASE + 0x4000)
 #define MVEBU_IOB_BASE			(MVEBU_CP0_REGS_BASE + 0x190000)
 
 /*******************************************************************************
diff --git a/plat/marvell/a8k/a7040_rz/platform.mk b/plat/marvell/a8k/a7040_rz/platform.mk
index dae1f80..5b0ec88 100644
--- a/plat/marvell/a8k/a7040_rz/platform.mk
+++ b/plat/marvell/a8k/a7040_rz/platform.mk
@@ -66,7 +66,8 @@ BL1_SOURCES		+=	$(PLAT_SRC_BASE)/aarch64/plat_helpers.S	\
 				lib/cpus/aarch64/cortex_a72.S
 
 MARVELL_DRV		:= 	$(MARVELL_DRV_BASE)/rfu.c	\
-				$(MARVELL_DRV_BASE)/iob.c
+				$(MARVELL_DRV_BASE)/iob.c	\
+				$(MARVELL_DRV_BASE)/ccu.c
 
 BL31_SOURCES		+=	lib/cpus/aarch64/cortex_a72.S				\
 				$(PLAT_SRC_BASE)/aarch64/plat_helpers.S			\
-- 
1.9.1

