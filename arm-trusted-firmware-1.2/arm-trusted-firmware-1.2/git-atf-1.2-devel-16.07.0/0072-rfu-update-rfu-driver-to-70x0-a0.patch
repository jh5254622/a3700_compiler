From 3fac2b412e598f09197462a743bbe485813ae2cd Mon Sep 17 00:00:00 2001
From: Nizan Zorea <nzorea@marvell.com>
Date: Mon, 21 Mar 2016 15:20:24 +0200
Subject: [PATCH 072/239] rfu: update rfu driver to 70x0-a0

rfu programming model was changed from apn806-z1.
this patch implements the new model and updated
the platforms according to the relevant rfu driver

Change-Id: I022c950f525e34cf5308d2734f27c0a0944924b0
Signed-off-by: Nizan Zorea <nzorea@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/28419
Reviewed-by: Haim Boot <hayim@marvell.com>
Tested-by: Haim Boot <hayim@marvell.com>
---
 drivers/marvell/rfu.c                              | 100 +++++------
 drivers/marvell/rfu_z.c                            | 199 +++++++++++++++++++++
 include/drivers/marvell/rfu.h                      |  27 ++-
 .../a8k/a7040_rz/board/marvell_plat_config.c       | 116 ++++++++++++
 plat/marvell/a8k/a7040_rz/platform.mk              |   5 +-
 plat/marvell/a8k/a70x0/board/marvell_plat_config.c |  12 +-
 .../marvell/a8k/apn806/board/marvell_plat_config.c | 116 ++++++++++++
 plat/marvell/a8k/apn806/platform.mk                |   5 +-
 8 files changed, 515 insertions(+), 65 deletions(-)
 create mode 100644 drivers/marvell/rfu_z.c
 create mode 100644 plat/marvell/a8k/a7040_rz/board/marvell_plat_config.c
 create mode 100644 plat/marvell/a8k/apn806/board/marvell_plat_config.c

diff --git a/drivers/marvell/rfu.c b/drivers/marvell/rfu.c
index 77011a5..30cdfc5 100644
--- a/drivers/marvell/rfu.c
+++ b/drivers/marvell/rfu.c
@@ -51,6 +51,13 @@
 #define RFU_WIN_ALIGNMENT_1M		(0x100000)
 #define RFU_WIN_ALIGNMENT_64K		(0x10000)
 
+/* AP registers */
+#define RFU_WIN_ALR_OFFSET(win)		(rfu_base + 0x0 + (0x10 * win))
+#define RFU_WIN_AHR_OFFSET(win)		(rfu_base + 0x8 + (0x10 * win))
+#define RFU_WIN_CR_OFFSET(win)		(rfu_base + 0xC + (0x10 * win))
+#define RFU_GCR_OFFSET			(rfu_base + 0x70)
+
+
 uintptr_t rfu_base;
 
 
@@ -70,11 +77,6 @@ static void rfu_win_check(struct rfu_win *win, uint32_t win_num)
 		win->base_addr_low = (uint32_t)(base_addr);
 	}
 
-	/* targets that have AHR must have size aligned to 1M.
-	   targets with no AHR (pcie-reg, bootrom) have a fixed size of 64k */
-	if (win->target_id == BOOTROM_TID || win->target_id == PCIE_REGS_TID)
-		alignment_value = RFU_WIN_ALIGNMENT_64K;
-
 	/* size parameter validity check */
 	win_size = ((uint64_t)win->win_size_high << 32) + win->win_size_low;
 	if (IS_NOT_ALIGN(win_size, alignment_value)) {
@@ -86,68 +88,56 @@ static void rfu_win_check(struct rfu_win *win, uint32_t win_num)
 	}
 }
 
-static uintptr_t rfu_alr_offset_get(uint32_t trgt_id)
-{
-	uint32_t rfu_alr_offset[RFU_MAX_TID] = {0x0, 0x10, 0x20, 0x208, 0x210, 0x218};
-
-	if (trgt_id < 0 || trgt_id > RFU_MAX_TID) {
-		ERROR("target ID is wrong");
-		return rfu_base;
-	}
-	return rfu_base + rfu_alr_offset[trgt_id];
-}
-
-static uintptr_t rfu_ahr_offset_get(uint32_t trgt_id)
-{
-	uint32_t rfu_ahr_offset[RFU_MAX_TID] = {0x0, 0x18, 0x28, 0x0, 0x214, 0x21c};
-
-	if (trgt_id < 0 || trgt_id > RFU_MAX_TID) {
-		ERROR("target ID is wrong");
-		return rfu_base;
-	}
-	return rfu_base + rfu_ahr_offset[trgt_id];
-}
-
-static void rfu_enable_win(struct rfu_win *win, uint32_t trgt_id)
+static void rfu_enable_win(struct rfu_win *win, uint32_t win_num)
 {
 	uint32_t alr, ahr;
 	uint64_t start_addr, end_addr;
 
+	if (win->target_id < 0 || win->target_id >= RFU_MAX_WIN_ID) {
+		ERROR("target ID = %d, is invalid\n", win->target_id);
+		return;
+	}
+
+	/* calculate 64bit start-address and end-address */
 	start_addr = ((uint64_t)win->base_addr_high << 32) + win->base_addr_low;
 	end_addr = (start_addr + (((uint64_t)win->win_size_high << 32) + win->win_size_low) - 1);
 
-	/* there's no ahr for bootrom and pcie-regs windows */
-	if (trgt_id != BOOTROM_TID && trgt_id != PCIE_REGS_TID) {
-		ahr = (uint32_t)((end_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
-		mmio_write_32(rfu_ahr_offset_get(trgt_id), ahr);
-	}
-
 	alr = (uint32_t)((start_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
-	if (trgt_id != PCIE_REGS_TID)
-		alr |= WIN_ENABLE_BIT;
-	mmio_write_32(rfu_alr_offset_get(trgt_id), alr);
+	alr |= WIN_ENABLE_BIT;
+	ahr = (uint32_t)((end_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
+
+	/* write start address and end address for rfu window */
+	mmio_write_32(RFU_WIN_ALR_OFFSET(win_num), alr);
+	mmio_write_32(RFU_WIN_AHR_OFFSET(win_num), ahr);
+
+	/* write window target */
+	mmio_write_32(RFU_WIN_CR_OFFSET(win_num), win->target_id);
 }
 
 #ifdef DEBUG_ADDR_MAP
 static void dump_rfu(void)
 {
-	uint32_t trgt_id;
+	uint32_t trgt_id, win_id;
 	uint32_t alr, ahr;
 	uint64_t start, end;
-	char *rfu_target_name[RFU_MAX_TID] = {"BootRoom ", "STM      ", "SPI      ",
-					"PCIe-reg ", "IHB-Port ", "PCIe-Port"};
+	char *rfu_target_name[RFU_MAX_TID] = {"IHB-0    ", "IHB-1    ", "IHB-2    ", "PIDI     ",
+						"SPI      ", "STM      ", "BootRoom "};
 
 	/* Dump all RFU windows */
 	printf("bank  target     start              end\n");
 	printf("----------------------------------------------------\n");
-	for (trgt_id = 0; trgt_id < RFU_MAX_TID; trgt_id++) {
-		alr = mmio_read_32(rfu_alr_offset_get(trgt_id));
+	for (win_id = 0; win_id < RFU_MAX_WIN_ID; win_id++) {
+		alr = mmio_read_32(RFU_WIN_ALR_OFFSET(win_id));
 		if (alr & WIN_ENABLE_BIT) {
 			alr &= ~WIN_ENABLE_BIT;
-			if (trgt_id == BOOTROM_TID || trgt_id == PCIE_REGS_TID)
+			/* in case this is BOOTROM window */
+			if (win_id == 0) {
 				ahr = alr;
-			else
-				ahr = mmio_read_32(rfu_ahr_offset_get(trgt_id));
+				trgt_id = BOOTROM_TID;
+			} else {
+				ahr = mmio_read_32(RFU_WIN_AHR_OFFSET(win_id));
+				trgt_id = mmio_read_32(RFU_WIN_CR_OFFSET(win_id));
+			}
 			start = ((uint64_t)alr << ADDRESS_SHIFT);
 			end = (((uint64_t)ahr + 0x10) << ADDRESS_SHIFT);
 			printf("rfu   %s  0x%016lx 0x%016lx\n", rfu_target_name[trgt_id], start, end);
@@ -162,7 +152,7 @@ static void dump_rfu(void)
 int init_rfu(void)
 {
 	struct rfu_win *win;
-	uint32_t win_id, win_reg, trgt_id;
+	uint32_t win_id, win_reg;
 	uint32_t win_count;
 
 	INFO("Initializing RFU Address decoding\n");
@@ -174,19 +164,27 @@ int init_rfu(void)
 	marvell_get_rfu_memory_map(&win, &win_count);
 	if (win_count <= 0) {
 		INFO("no windows configurations found\n");
+	}
+	if (win_count > RFU_MAX_WIN_ID) {
+		INFO("number of windows is bigger than %d\n", RFU_MAX_WIN_ID);
 		return 0;
 	}
 
+	/* set the default target id to PIDI */
+	win_reg = PIDI_TID;
+	mmio_write_32(RFU_GCR_OFFSET, win_reg);
+
 	/* disable all RFU windows */
-	for (trgt_id = 0; trgt_id < RFU_MAX_TID; trgt_id++) {
-		win_reg = mmio_read_32(rfu_alr_offset_get(trgt_id));
+	for (win_id = 0; win_id < RFU_MAX_WIN_ID; win_id++) {
+		win_reg = mmio_read_32(RFU_WIN_ALR_OFFSET(win_id));
 		win_reg &= ~WIN_ENABLE_BIT;
-		mmio_write_32(rfu_alr_offset_get(trgt_id), win_reg);
+		mmio_write_32(RFU_WIN_ALR_OFFSET(win_id), win_reg);
 	}
 
-	for (win_id = 0; win_id < win_count; win_id++, win++) {
+	/* enable relevant windows, starting from win_id=1 because index 0 dedicated for BootRom */
+	for (win_id = 1; win_id <= win_count; win_id++, win++) {
 		rfu_win_check(win, win_id);
-		rfu_enable_win(win, win->target_id);
+		rfu_enable_win(win, win_id);
 	}
 
 #ifdef DEBUG_ADDR_MAP
diff --git a/drivers/marvell/rfu_z.c b/drivers/marvell/rfu_z.c
new file mode 100644
index 0000000..77011a5
--- /dev/null
+++ b/drivers/marvell/rfu_z.c
@@ -0,0 +1,199 @@
+/*
+* ***************************************************************************
+* Copyright (C) 2016 Marvell International Ltd.
+* ***************************************************************************
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are met:
+*
+* Redistributions of source code must retain the above copyright notice, this
+* list of conditions and the following disclaimer.
+*
+* Redistributions in binary form must reproduce the above copyright notice,
+* this list of conditions and the following disclaimer in the documentation
+* and/or other materials provided with the distribution.
+*
+* Neither the name of Marvell nor the names of its contributors may be used
+* to endorse or promote products derived from this software without specific
+* prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
+* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+* POSSIBILITY OF SUCH DAMAGE.
+*
+***************************************************************************
+*/
+
+#include <plat_def.h>
+#include <debug.h>
+#include <mmio.h>
+#include <mvebu.h>
+#include <rfu.h>
+#include <plat_config.h>
+
+#if LOG_LEVEL >= LOG_LEVEL_INFO
+#define DEBUG_ADDR_MAP
+#endif
+
+/* common defines */
+#define WIN_ENABLE_BIT			(0x1)
+/* Physical address of the base of the window = {Addr[19:0],20`h0} */
+#define ADDRESS_SHIFT			(20 - 4)
+#define ADDRESS_MASK			(0xFFFFFFF0)
+#define RFU_WIN_ALIGNMENT_1M		(0x100000)
+#define RFU_WIN_ALIGNMENT_64K		(0x10000)
+
+uintptr_t rfu_base;
+
+
+static void rfu_win_check(struct rfu_win *win, uint32_t win_num)
+{
+	uint64_t base_addr, win_size;
+	uint32_t alignment_value = RFU_WIN_ALIGNMENT_1M;
+
+	/* for RFU The base is always 1M aligned */
+	/* check if address is aligned to 1M */
+	base_addr = ((uint64_t)win->base_addr_high << 32) + win->base_addr_low;
+	if (IS_NOT_ALIGN(base_addr, RFU_WIN_ALIGNMENT_1M)) {
+		base_addr = ALIGN_UP(base_addr, RFU_WIN_ALIGNMENT_1M);
+		ERROR("Window %d: base address unaligned to 0x%x\n", win_num, RFU_WIN_ALIGNMENT_1M);
+		printf("Align up the base address to 0x%lx\n", base_addr);
+		win->base_addr_high = (uint32_t)(base_addr >> 32);
+		win->base_addr_low = (uint32_t)(base_addr);
+	}
+
+	/* targets that have AHR must have size aligned to 1M.
+	   targets with no AHR (pcie-reg, bootrom) have a fixed size of 64k */
+	if (win->target_id == BOOTROM_TID || win->target_id == PCIE_REGS_TID)
+		alignment_value = RFU_WIN_ALIGNMENT_64K;
+
+	/* size parameter validity check */
+	win_size = ((uint64_t)win->win_size_high << 32) + win->win_size_low;
+	if (IS_NOT_ALIGN(win_size, alignment_value)) {
+		win_size = ALIGN_UP(win_size, alignment_value);
+		ERROR("Window %d: window size unaligned to 0x%x\n", win_num, alignment_value);
+		printf("Aligning size to 0x%lx\n", win_size);
+		win->win_size_high = (uint32_t)(win_size >> 32);
+		win->win_size_low = (uint32_t)(win_size);
+	}
+}
+
+static uintptr_t rfu_alr_offset_get(uint32_t trgt_id)
+{
+	uint32_t rfu_alr_offset[RFU_MAX_TID] = {0x0, 0x10, 0x20, 0x208, 0x210, 0x218};
+
+	if (trgt_id < 0 || trgt_id > RFU_MAX_TID) {
+		ERROR("target ID is wrong");
+		return rfu_base;
+	}
+	return rfu_base + rfu_alr_offset[trgt_id];
+}
+
+static uintptr_t rfu_ahr_offset_get(uint32_t trgt_id)
+{
+	uint32_t rfu_ahr_offset[RFU_MAX_TID] = {0x0, 0x18, 0x28, 0x0, 0x214, 0x21c};
+
+	if (trgt_id < 0 || trgt_id > RFU_MAX_TID) {
+		ERROR("target ID is wrong");
+		return rfu_base;
+	}
+	return rfu_base + rfu_ahr_offset[trgt_id];
+}
+
+static void rfu_enable_win(struct rfu_win *win, uint32_t trgt_id)
+{
+	uint32_t alr, ahr;
+	uint64_t start_addr, end_addr;
+
+	start_addr = ((uint64_t)win->base_addr_high << 32) + win->base_addr_low;
+	end_addr = (start_addr + (((uint64_t)win->win_size_high << 32) + win->win_size_low) - 1);
+
+	/* there's no ahr for bootrom and pcie-regs windows */
+	if (trgt_id != BOOTROM_TID && trgt_id != PCIE_REGS_TID) {
+		ahr = (uint32_t)((end_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
+		mmio_write_32(rfu_ahr_offset_get(trgt_id), ahr);
+	}
+
+	alr = (uint32_t)((start_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
+	if (trgt_id != PCIE_REGS_TID)
+		alr |= WIN_ENABLE_BIT;
+	mmio_write_32(rfu_alr_offset_get(trgt_id), alr);
+}
+
+#ifdef DEBUG_ADDR_MAP
+static void dump_rfu(void)
+{
+	uint32_t trgt_id;
+	uint32_t alr, ahr;
+	uint64_t start, end;
+	char *rfu_target_name[RFU_MAX_TID] = {"BootRoom ", "STM      ", "SPI      ",
+					"PCIe-reg ", "IHB-Port ", "PCIe-Port"};
+
+	/* Dump all RFU windows */
+	printf("bank  target     start              end\n");
+	printf("----------------------------------------------------\n");
+	for (trgt_id = 0; trgt_id < RFU_MAX_TID; trgt_id++) {
+		alr = mmio_read_32(rfu_alr_offset_get(trgt_id));
+		if (alr & WIN_ENABLE_BIT) {
+			alr &= ~WIN_ENABLE_BIT;
+			if (trgt_id == BOOTROM_TID || trgt_id == PCIE_REGS_TID)
+				ahr = alr;
+			else
+				ahr = mmio_read_32(rfu_ahr_offset_get(trgt_id));
+			start = ((uint64_t)alr << ADDRESS_SHIFT);
+			end = (((uint64_t)ahr + 0x10) << ADDRESS_SHIFT);
+			printf("rfu   %s  0x%016lx 0x%016lx\n", rfu_target_name[trgt_id], start, end);
+		}
+	}
+	printf("rfu   PIDI-port  - all other IO transactions\n");
+
+	return;
+}
+#endif
+
+int init_rfu(void)
+{
+	struct rfu_win *win;
+	uint32_t win_id, win_reg, trgt_id;
+	uint32_t win_count;
+
+	INFO("Initializing RFU Address decoding\n");
+
+	/* Get the base address of the address decoding MBUS */
+	rfu_base = marvell_get_rfu_reg_offs();
+
+	/* Get the array of the windows and its size */
+	marvell_get_rfu_memory_map(&win, &win_count);
+	if (win_count <= 0) {
+		INFO("no windows configurations found\n");
+		return 0;
+	}
+
+	/* disable all RFU windows */
+	for (trgt_id = 0; trgt_id < RFU_MAX_TID; trgt_id++) {
+		win_reg = mmio_read_32(rfu_alr_offset_get(trgt_id));
+		win_reg &= ~WIN_ENABLE_BIT;
+		mmio_write_32(rfu_alr_offset_get(trgt_id), win_reg);
+	}
+
+	for (win_id = 0; win_id < win_count; win_id++, win++) {
+		rfu_win_check(win, win_id);
+		rfu_enable_win(win, win->target_id);
+	}
+
+#ifdef DEBUG_ADDR_MAP
+	dump_rfu();
+#endif
+
+	INFO("Done RFU Address decoding Initializing\n");
+
+	return 0;
+}
diff --git a/include/drivers/marvell/rfu.h b/include/drivers/marvell/rfu.h
index df2c2bc..9b52f8f 100644
--- a/include/drivers/marvell/rfu.h
+++ b/include/drivers/marvell/rfu.h
@@ -45,15 +45,30 @@ struct rfu_win {
 	uint32_t target_id;
 };
 
+#if PLAT_MARVELL_APN_806_Z
 enum rfu_target_ids {
-	BOOTROM_TID     = 0x0,
-	STM_TID         = 0x1,
-	SPI_TID         = 0x2,
-	PCIE_REGS_TID   = 0x3,
-	IHBPHY_TID      = 0x4,
-	PCIE_PORT_TID   = 0x5,
+	BOOTROM_TID      = 0x0,
+	STM_TID          = 0x1,
+	SPI_TID          = 0x2,
+	PCIE_REGS_TID    = 0x3,
+	IHBPHY_TID       = 0x4,
+	PCIE_PORT_TID    = 0x5,
 	RFU_MAX_TID
 };
+#else
+enum rfu_target_ids {
+	IHB_0_TID	 = 0x0,
+	IHB_1_TID	 = 0x1,
+	IHB_2_TID	 = 0x2,
+	PIDI_TID	 = 0x3,
+	SPI_TID		 = 0x4,
+	STM_TID		 = 0x5,
+	BOOTROM_TID	 = 0x6,
+	RFU_MAX_TID
+};
+
+#define RFU_MAX_WIN_ID	7
+#endif  /* PLAT_MARVELL_APN_806_Z  */
 
 int init_rfu(void);
 
diff --git a/plat/marvell/a8k/a7040_rz/board/marvell_plat_config.c b/plat/marvell/a8k/a7040_rz/board/marvell_plat_config.c
new file mode 100644
index 0000000..34bab5c
--- /dev/null
+++ b/plat/marvell/a8k/a7040_rz/board/marvell_plat_config.c
@@ -0,0 +1,116 @@
+/*
+* ***************************************************************************
+* Copyright (C) 2016 Marvell International Ltd.
+* ***************************************************************************
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are met:
+*
+* Redistributions of source code must retain the above copyright notice, this
+* list of conditions and the following disclaimer.
+*
+* Redistributions in binary form must reproduce the above copyright notice,
+* this list of conditions and the following disclaimer in the documentation
+* and/or other materials provided with the distribution.
+*
+* Neither the name of Marvell nor the names of its contributors may be used
+* to endorse or promote products derived from this software without specific
+* prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
+* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+* POSSIBILITY OF SUCH DAMAGE.
+*
+***************************************************************************
+*/
+
+#include <plat_config.h>
+#include <plat_def.h>
+
+
+/*******************************************************************************
+ * RFU Configuration
+ ******************************************************************************/
+struct rfu_win rfu_memory_map[] = {
+	{0x0,	0xfe000000,	0x0,	0x1f00000,	PCIE_PORT_TID}, /* PCIe window 31Mb for PCIe port*/
+	{0x0,	0xffe00000,	0x0,	0x100000,	PCIE_REGS_TID}, /* PCI-REG window 64Kb for PCIe-reg*/
+	{0x0,	0xf9100000,	0x0,	0x100000,	IHBPHY_TID},	/* IHB window  1Mb for PHY-reg*/
+};
+
+uintptr_t marvell_get_rfu_reg_offs(void)
+{
+	return MVEBU_RFU_BASE;
+}
+
+int marvell_get_rfu_memory_map(struct rfu_win **win, uint32_t *size)
+{
+	*win = rfu_memory_map;
+	*size = sizeof(rfu_memory_map)/sizeof(struct rfu_win);
+
+	return 0;
+}
+
+/*******************************************************************************
+ * IOB Configuration
+ ******************************************************************************/
+#define MARVELL_IOB_MAX_WIN	16
+
+struct iob_win iob_memory_map[] = {
+	{0x0,	0xf7000000,	0x0,	0x1000000,	PEX1_TID}, /* PEX1_X1 window */
+	{0x0,	0xf8000000,	0x0,	0x1000000,	PEX2_TID}, /* PEX2_X1 window */
+	{0x0,	0xf6000000,	0x0,	0x1000000,	PEX0_TID}, /* PEX0_X4 window */
+	{0x0,	0xf9000000,	0x0,	0x1000000,	NAND_TID}  /* NAND window */
+};
+
+uintptr_t marvell_get_iob_reg_offs(void)
+{
+	return MVEBU_IOB_BASE;
+}
+
+int marvell_get_iob_max_win(void)
+{
+	return MARVELL_IOB_MAX_WIN;
+}
+
+int marvell_get_iob_memory_map(struct iob_win **win, uint32_t *size)
+{
+	*win = iob_memory_map;
+	*size = sizeof(iob_memory_map)/sizeof(struct iob_win);
+
+	return 0;
+}
+
+/*******************************************************************************
+ * CCU Configuration
+ ******************************************************************************/
+#define MARVELL_CCU_MAX_WIN	8
+
+struct ccu_win ccu_memory_map[] = {
+	{0x0,	0xf2000000,	0x0,	0xe000000,	IO_0_TID}, /* IO window */
+};
+
+uintptr_t marvell_get_ccu_reg_offs(void)
+{
+	return MVEBU_CCU_BASE;
+}
+
+int marvell_get_ccu_max_win(void)
+{
+	return MARVELL_CCU_MAX_WIN;
+}
+
+int marvell_get_ccu_memory_map(struct ccu_win **win, uint32_t *size)
+{
+	*win = ccu_memory_map;
+	*size = sizeof(ccu_memory_map)/sizeof(struct ccu_win);
+
+	return 0;
+}
diff --git a/plat/marvell/a8k/a7040_rz/platform.mk b/plat/marvell/a8k/a7040_rz/platform.mk
index 5151e46..4743637 100644
--- a/plat/marvell/a8k/a7040_rz/platform.mk
+++ b/plat/marvell/a8k/a7040_rz/platform.mk
@@ -43,6 +43,7 @@ CALL_DOIMAGE		:= y
 # This define is used in BL31 linker script to make sure
 # the PSCI code is alligned to 64KB
 $(eval $(call add_define,PLAT_MARVELL_7040_RZ1))
+$(eval $(call add_define,PLAT_MARVELL_APN_806_Z))
 
 # Enable GICV2
 $(eval $(call add_define,CONFIG_GICV2))
@@ -75,7 +76,7 @@ BLE_SOURCES		:=	$(PLAT_SRC_BASE)/board/dram_port.c		\
 BL1_SOURCES		+=	$(PLAT_SRC_BASE)/aarch64/plat_helpers.S	\
 				lib/cpus/aarch64/cortex_a72.S
 
-MARVELL_DRV		:= 	$(MARVELL_DRV_BASE)/rfu.c	\
+MARVELL_DRV		:= 	$(MARVELL_DRV_BASE)/rfu_z.c	\
 				$(MARVELL_DRV_BASE)/iob.c	\
 				$(MARVELL_DRV_BASE)/ccu.c
 
@@ -89,7 +90,7 @@ BL31_SOURCES		+=	lib/cpus/aarch64/cortex_a72.S				\
 				$(PLAT_SRC_BASE)/apn806_setup.c				\
 				$(PLAT_SRC_BASE)/cp110_setup.c				\
 				plat/marvell/common/marvell_gicv2.c			\
-				$(PLAT_SRC_BASE)/board/marvell_plat_config.c		\
+				$(PLAT_7040_RZ_SRC_BASE)/board/marvell_plat_config.c	\
 				${MARVELL_DRV}						\
 				${MARVELL_GIC_SOURCES}
 
diff --git a/plat/marvell/a8k/a70x0/board/marvell_plat_config.c b/plat/marvell/a8k/a70x0/board/marvell_plat_config.c
index 34bab5c..4cae330 100644
--- a/plat/marvell/a8k/a70x0/board/marvell_plat_config.c
+++ b/plat/marvell/a8k/a70x0/board/marvell_plat_config.c
@@ -39,11 +39,12 @@
 /*******************************************************************************
  * RFU Configuration
  ******************************************************************************/
+/*
 struct rfu_win rfu_memory_map[] = {
-	{0x0,	0xfe000000,	0x0,	0x1f00000,	PCIE_PORT_TID}, /* PCIe window 31Mb for PCIe port*/
-	{0x0,	0xffe00000,	0x0,	0x100000,	PCIE_REGS_TID}, /* PCI-REG window 64Kb for PCIe-reg*/
-	{0x0,	0xf9100000,	0x0,	0x100000,	IHBPHY_TID},	/* IHB window  1Mb for PHY-reg*/
+	{0x0,	0xf9100000,	0x0,	0x1f00000,	IHB_0_TID},
 };
+*/
+struct rfu_win *rfu_memory_map = NULL;
 
 uintptr_t marvell_get_rfu_reg_offs(void)
 {
@@ -53,7 +54,10 @@ uintptr_t marvell_get_rfu_reg_offs(void)
 int marvell_get_rfu_memory_map(struct rfu_win **win, uint32_t *size)
 {
 	*win = rfu_memory_map;
-	*size = sizeof(rfu_memory_map)/sizeof(struct rfu_win);
+	if (*win == NULL)
+		*size = 0;
+	else
+		*size = sizeof(rfu_memory_map)/sizeof(struct rfu_win);
 
 	return 0;
 }
diff --git a/plat/marvell/a8k/apn806/board/marvell_plat_config.c b/plat/marvell/a8k/apn806/board/marvell_plat_config.c
new file mode 100644
index 0000000..34bab5c
--- /dev/null
+++ b/plat/marvell/a8k/apn806/board/marvell_plat_config.c
@@ -0,0 +1,116 @@
+/*
+* ***************************************************************************
+* Copyright (C) 2016 Marvell International Ltd.
+* ***************************************************************************
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are met:
+*
+* Redistributions of source code must retain the above copyright notice, this
+* list of conditions and the following disclaimer.
+*
+* Redistributions in binary form must reproduce the above copyright notice,
+* this list of conditions and the following disclaimer in the documentation
+* and/or other materials provided with the distribution.
+*
+* Neither the name of Marvell nor the names of its contributors may be used
+* to endorse or promote products derived from this software without specific
+* prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
+* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+* POSSIBILITY OF SUCH DAMAGE.
+*
+***************************************************************************
+*/
+
+#include <plat_config.h>
+#include <plat_def.h>
+
+
+/*******************************************************************************
+ * RFU Configuration
+ ******************************************************************************/
+struct rfu_win rfu_memory_map[] = {
+	{0x0,	0xfe000000,	0x0,	0x1f00000,	PCIE_PORT_TID}, /* PCIe window 31Mb for PCIe port*/
+	{0x0,	0xffe00000,	0x0,	0x100000,	PCIE_REGS_TID}, /* PCI-REG window 64Kb for PCIe-reg*/
+	{0x0,	0xf9100000,	0x0,	0x100000,	IHBPHY_TID},	/* IHB window  1Mb for PHY-reg*/
+};
+
+uintptr_t marvell_get_rfu_reg_offs(void)
+{
+	return MVEBU_RFU_BASE;
+}
+
+int marvell_get_rfu_memory_map(struct rfu_win **win, uint32_t *size)
+{
+	*win = rfu_memory_map;
+	*size = sizeof(rfu_memory_map)/sizeof(struct rfu_win);
+
+	return 0;
+}
+
+/*******************************************************************************
+ * IOB Configuration
+ ******************************************************************************/
+#define MARVELL_IOB_MAX_WIN	16
+
+struct iob_win iob_memory_map[] = {
+	{0x0,	0xf7000000,	0x0,	0x1000000,	PEX1_TID}, /* PEX1_X1 window */
+	{0x0,	0xf8000000,	0x0,	0x1000000,	PEX2_TID}, /* PEX2_X1 window */
+	{0x0,	0xf6000000,	0x0,	0x1000000,	PEX0_TID}, /* PEX0_X4 window */
+	{0x0,	0xf9000000,	0x0,	0x1000000,	NAND_TID}  /* NAND window */
+};
+
+uintptr_t marvell_get_iob_reg_offs(void)
+{
+	return MVEBU_IOB_BASE;
+}
+
+int marvell_get_iob_max_win(void)
+{
+	return MARVELL_IOB_MAX_WIN;
+}
+
+int marvell_get_iob_memory_map(struct iob_win **win, uint32_t *size)
+{
+	*win = iob_memory_map;
+	*size = sizeof(iob_memory_map)/sizeof(struct iob_win);
+
+	return 0;
+}
+
+/*******************************************************************************
+ * CCU Configuration
+ ******************************************************************************/
+#define MARVELL_CCU_MAX_WIN	8
+
+struct ccu_win ccu_memory_map[] = {
+	{0x0,	0xf2000000,	0x0,	0xe000000,	IO_0_TID}, /* IO window */
+};
+
+uintptr_t marvell_get_ccu_reg_offs(void)
+{
+	return MVEBU_CCU_BASE;
+}
+
+int marvell_get_ccu_max_win(void)
+{
+	return MARVELL_CCU_MAX_WIN;
+}
+
+int marvell_get_ccu_memory_map(struct ccu_win **win, uint32_t *size)
+{
+	*win = ccu_memory_map;
+	*size = sizeof(ccu_memory_map)/sizeof(struct ccu_win);
+
+	return 0;
+}
diff --git a/plat/marvell/a8k/apn806/platform.mk b/plat/marvell/a8k/apn806/platform.mk
index d782496..3b24671 100644
--- a/plat/marvell/a8k/apn806/platform.mk
+++ b/plat/marvell/a8k/apn806/platform.mk
@@ -43,6 +43,7 @@ CALL_DOIMAGE		:= y
 # This define is used in BL31 linker script to make sure
 # the PSCI code is alligned to 64KB
 $(eval $(call add_define,PLAT_MARVELL_7040_RZ1))
+$(eval $(call add_define,PLAT_MARVELL_APN_806_Z))
 
 # Enable GICV2
 $(eval $(call add_define,CONFIG_GICV2))
@@ -75,7 +76,7 @@ BLE_SOURCES		:=	$(PLAT_SRC_BASE)/board/dram_port.c		\
 BL1_SOURCES		+=	$(PLAT_SRC_BASE)/aarch64/plat_helpers.S	\
 				lib/cpus/aarch64/cortex_a72.S
 
-MARVELL_DRV		:= 	$(MARVELL_DRV_BASE)/rfu.c	\
+MARVELL_DRV		:= 	$(MARVELL_DRV_BASE)/rfu_z.c	\
 				$(MARVELL_DRV_BASE)/ccu.c
 
 BL31_SOURCES		+=	lib/cpus/aarch64/cortex_a72.S				\
@@ -87,7 +88,7 @@ BL31_SOURCES		+=	lib/cpus/aarch64/cortex_a72.S				\
 				$(PLAT_APN_SRC_BASE)/plat_bl31_setup.c			\
 				$(PLAT_SRC_BASE)/apn806_setup.c				\
 				plat/marvell/common/marvell_gicv2.c			\
-				$(PLAT_SRC_BASE)/board/marvell_plat_config.c		\
+				$(PLAT_APN_SRC_BASE)/board/marvell_plat_config.c	\
 				${MARVELL_DRV}						\
 				${MARVELL_GIC_SOURCES}
 
-- 
1.9.1

