From 6c0b0b2dc8e477415b8ca4eaaf62432435c25395 Mon Sep 17 00:00:00 2001
From: Haim Boot <hayim@marvell.com>
Date: Tue, 19 Apr 2016 17:18:43 +0300
Subject: [PATCH 132/239] psci: a8k: remove proprietary code for gic
 initialization

- this code was used for secondary cpu initialization
- since ATF code is used there is no need for this code

Change-Id: I410b6ed01df3ec60da4a8f795c36d0751e549998
Signed-off-by: Haim Boot <hayim@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/29211
Reviewed-by: Kostya Porotchkin <kostap@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
---
 include/plat/marvell/common/asm/macro.h  |  17 ---
 plat/marvell/a8k/a7040_rz/platform.mk    |   4 -
 plat/marvell/a8k/a70x0/platform.mk       |   4 -
 plat/marvell/a8k/apn806/platform.mk      |   4 -
 plat/marvell/a8k/common/aarch64/gic_64.S | 177 -------------------------------
 5 files changed, 206 deletions(-)
 delete mode 100644 plat/marvell/a8k/common/aarch64/gic_64.S

diff --git a/include/plat/marvell/common/asm/macro.h b/include/plat/marvell/common/asm/macro.h
index e4aeba5..2f2e087 100644
--- a/include/plat/marvell/common/asm/macro.h
+++ b/include/plat/marvell/common/asm/macro.h
@@ -241,23 +241,6 @@ lr	.req	x30
 	eret
 .endm
 
-#if defined(CONFIG_GICV3)
-.macro gic_wait_for_interrupt_m xreg1
-0 :	wfi
-	mrs     \xreg1, ICC_IAR1_EL1
-	msr     ICC_EOIR1_EL1, \xreg1
-	cbnz    \xreg1, 0b
-.endm
-#elif defined(CONFIG_GICV2)
-.macro gic_wait_for_interrupt_m xreg1, wreg2
-0 :	wfi
-	ldr     \wreg2, [\xreg1, GICC_AIAR]
-	str     \wreg2, [\xreg1, GICC_AEOIR]
-	and	\wreg2, \wreg2, #0x3ff
-	cbnz    \wreg2, 0b
-.endm
-#endif
-
 #endif /* CONFIG_ARM64 */
 
 #endif /* __ASSEMBLY__ */
diff --git a/plat/marvell/a8k/a7040_rz/platform.mk b/plat/marvell/a8k/a7040_rz/platform.mk
index ca43e8a..8010773 100644
--- a/plat/marvell/a8k/a7040_rz/platform.mk
+++ b/plat/marvell/a8k/a7040_rz/platform.mk
@@ -45,9 +45,6 @@ CALL_DOIMAGE		:= y
 $(eval $(call add_define,PLAT_MARVELL_7040_RZ1))
 $(eval $(call add_define,PLAT_MARVELL_APN_806_Z))
 
-# Enable GICV2
-$(eval $(call add_define,CONFIG_GICV2))
-
 MARVELL_GIC_SOURCES	:=	drivers/arm/gic/common/gic_common.c	\
 				drivers/arm/gic/v2/gicv2_main.c				\
 				drivers/arm/gic/v2/gicv2_helpers.c			\
@@ -84,7 +81,6 @@ MARVELL_DRV		:= 	$(MARVELL_DRV_BASE)/rfu_z.c	\
 BL31_SOURCES		+=	lib/cpus/aarch64/cortex_a72.S				\
 				$(PLAT_SRC_BASE)/aarch64/plat_helpers.S			\
 				$(PLAT_SRC_BASE)/aarch64/plat_psci.S			\
-				$(PLAT_FAMILY_BASE)/common/aarch64/gic_64.S		\
 				$(PLAT_SRC_BASE)/plat_pm.c				\
 				$(PLAT_SRC_BASE)/plat_topology.c			\
 				$(PLAT_SRC_BASE)/plat_bl31_setup.c			\
diff --git a/plat/marvell/a8k/a70x0/platform.mk b/plat/marvell/a8k/a70x0/platform.mk
index 3150262..8a5ad17 100644
--- a/plat/marvell/a8k/a70x0/platform.mk
+++ b/plat/marvell/a8k/a70x0/platform.mk
@@ -42,9 +42,6 @@ CALL_DOIMAGE		:= y
 # the PSCI code is alligned to 64KB
 $(eval $(call add_define,PLAT_MARVELL_7040_RZ1))
 
-# Enable GICV2
-$(eval $(call add_define,CONFIG_GICV2))
-
 MARVELL_GIC_SOURCES	:=	drivers/arm/gic/common/gic_common.c	\
 				drivers/arm/gic/v2/gicv2_main.c				\
 				drivers/arm/gic/v2/gicv2_helpers.c			\
@@ -89,7 +86,6 @@ BL31_PORTING_SOURCES	:=	$(PLAT_FAMILY_BASE)/$(PLAT)/board/marvell_plat_config.c
 BL31_SOURCES		+=	lib/cpus/aarch64/cortex_a72.S				\
 				$(PLAT_SRC_BASE)/aarch64/plat_helpers.S			\
 				$(PLAT_SRC_BASE)/aarch64/plat_psci.S			\
-				$(PLAT_FAMILY_BASE)/common/aarch64/gic_64.S		\
 				$(PLAT_SRC_BASE)/plat_pm.c				\
 				$(PLAT_SRC_BASE)/plat_topology.c			\
 				$(PLAT_SRC_BASE)/plat_bl31_setup.c			\
diff --git a/plat/marvell/a8k/apn806/platform.mk b/plat/marvell/a8k/apn806/platform.mk
index 3b24671..6be8bc8 100644
--- a/plat/marvell/a8k/apn806/platform.mk
+++ b/plat/marvell/a8k/apn806/platform.mk
@@ -45,9 +45,6 @@ CALL_DOIMAGE		:= y
 $(eval $(call add_define,PLAT_MARVELL_7040_RZ1))
 $(eval $(call add_define,PLAT_MARVELL_APN_806_Z))
 
-# Enable GICV2
-$(eval $(call add_define,CONFIG_GICV2))
-
 MARVELL_GIC_SOURCES	:=	drivers/arm/gic/common/gic_common.c	\
 				drivers/arm/gic/v2/gicv2_main.c				\
 				drivers/arm/gic/v2/gicv2_helpers.c			\
@@ -82,7 +79,6 @@ MARVELL_DRV		:= 	$(MARVELL_DRV_BASE)/rfu_z.c	\
 BL31_SOURCES		+=	lib/cpus/aarch64/cortex_a72.S				\
 				$(PLAT_SRC_BASE)/aarch64/plat_helpers.S			\
 				$(PLAT_SRC_BASE)/aarch64/plat_psci.S			\
-				$(PLAT_FAMILY_BASE)/common/aarch64/gic_64.S		\
 				$(PLAT_SRC_BASE)/plat_pm.c				\
 				$(PLAT_SRC_BASE)/plat_topology.c			\
 				$(PLAT_APN_SRC_BASE)/plat_bl31_setup.c			\
diff --git a/plat/marvell/a8k/common/aarch64/gic_64.S b/plat/marvell/a8k/common/aarch64/gic_64.S
deleted file mode 100644
index cafe783..0000000
--- a/plat/marvell/a8k/common/aarch64/gic_64.S
+++ /dev/null
@@ -1,177 +0,0 @@
-/*
- * GIC Initialization Routines.
- *
- * (C) Copyright 2013
- * David Feng <fenghua@phytium.com.cn>
- *
- * SPDX-License-Identifier:	GPL-2.0+
- */
-
-#include <asm/linkage.h>
-#include <gicv2.h>
-#include <gic_common.h>
-
-#define GICD_IGROUPRn		0x0080
-#define GICD_IGROUPMODRn	0x0d00
-#define GICD_ISENABLERn		0x0100
-
-
-/*************************************************************************
- *
- * void gic_init_secure(DistributorBase);
- *
- * Initialize secure copy of GIC at EL3.
- *
- *************************************************************************/
-ENTRY(gic_init_secure)
-	/*
-	 * Initialize Distributor
-	 * x0: Distributor Base
-	 */
-#if defined(CONFIG_GICV3)
-	mov	w9, #0x37		/* EnableGrp0 | EnableGrp1NS */
-					/* EnableGrp1S | ARE_S | ARE_NS */
-	str	w9, [x0, GICD_CTLR]	/* Secure GICD_CTLR */
-	ldr	w9, [x0, GICD_TYPER]
-	and	w10, w9, #0x1f		/* ITLinesNumber */
-	cbz	w10, 1f			/* No SPIs */
-	add	x11, x0, (GICD_IGROUPRn + 4)
-	add	x12, x0, (GICD_IGROUPMODRn + 4)
-	mov	w9, #~0
-0:	str	w9, [x11], #0x4
-	str	wzr, [x12], #0x4	/* Config SPIs as Group1NS */
-	sub	w10, w10, #0x1
-	cbnz	w10, 0b
-#elif defined(CONFIG_GICV2)
-	mov	w9, #0x3		/* EnableGrp0 | EnableGrp1 */
-	str	w9, [x0, GICD_CTLR]	/* Secure GICD_CTLR */
-	ldr	w9, [x0, GICD_TYPER]
-	and	w10, w9, #0x1f		/* ITLinesNumber */
-	cbz	w10, 1f			/* No SPIs */
-	add	x11, x0, (GICD_IGROUPRn + 4)
-	mov	w9, #~0			/* Config SPIs as Grp1 */
-0:	str	w9, [x11], #0x4
-	sub	w10, w10, #0x1
-	cbnz	w10, 0b
-#endif
-1:
-	ret
-ENDPROC(gic_init_secure)
-
-/* insert gic_init_secure_percpu function to secure section - part of the PSCI FW */
-.pushsection ._secure_gic.text, "ax"
-
-/*************************************************************************
- * For Gicv2:
- * void gic_init_secure_percpu(DistributorBase, CpuInterfaceBase);
- * For Gicv3:
- * void gic_init_secure_percpu(ReDistributorBase);
- *
- * Initialize secure copy of GIC at EL3.
- *
- *************************************************************************/
-ENTRY(gic_init_secure_percpu)
-#if defined(CONFIG_GICV3)
-	/*
-	 * Initialize ReDistributor
-	 * x0: ReDistributor Base
-	 */
-	mrs	x10, mpidr_el1
-	lsr	x9, x10, #32
-	bfi	x10, x9, #24, #8	/* w10 is aff3:aff2:aff1:aff0 */
-	mov	x9, x0
-1:	ldr	x11, [x9, GICR_TYPER]
-	lsr	x11, x11, #32		/* w11 is aff3:aff2:aff1:aff0 */
-	cmp	w10, w11
-	b.eq	2f
-	add	x9, x9, #(2 << 16)
-	b	1b
-
-	/* x9: ReDistributor Base Address of Current CPU */
-2:	mov	w10, #~0x2
-	ldr	w11, [x9, GICR_WAKER]
-	and	w11, w11, w10		/* Clear ProcessorSleep */
-	str	w11, [x9, GICR_WAKER]
-	dsb	st
-	isb
-3:	ldr	w10, [x9, GICR_WAKER]
-	tbnz	w10, #2, 3b		/* Wait Children be Alive */
-
-	add	x10, x9, #(1 << 16)	/* SGI_Base */
-	mov	w11, #~0
-	str	w11, [x10, GICR_IGROUPRn]
-	str	wzr, [x10, GICR_IGROUPMODRn]	/* SGIs|PPIs Group1NS */
-	mov	w11, #0x1		/* Enable SGI 0 */
-	str	w11, [x10, GICR_ISENABLERn]
-
-	/* Initialize Cpu Interface */
-	mrs	x10, ICC_SRE_EL3
-	orr	x10, x10, #0xf		/* SRE & Disable IRQ/FIQ Bypass & */
-					/* Allow EL2 access to ICC_SRE_EL2 */
-	msr	ICC_SRE_EL3, x10
-	isb
-
-	mrs	x10, ICC_SRE_EL2
-	orr	x10, x10, #0xf		/* SRE & Disable IRQ/FIQ Bypass & */
-					/* Allow EL1 access to ICC_SRE_EL1 */
-	msr	ICC_SRE_EL2, x10
-	isb
-
-	mov	x10, #0x3		/* EnableGrp1NS | EnableGrp1S */
-	msr	ICC_IGRPEN1_EL3, x10
-	isb
-
-	msr	ICC_CTLR_EL3, xzr
-	isb
-
-	msr	ICC_CTLR_EL1, xzr	/* NonSecure ICC_CTLR_EL1 */
-	isb
-
-	mov	x10, #0x1 << 7		/* Non-Secure access to ICC_PMR_EL1 */
-	msr	ICC_PMR_EL1, x10
-	isb
-#elif defined(CONFIG_GICV2)
-	/*
-	 * Initialize SGIs and PPIs
-	 * x0: Distributor Base
-	 * x1: Cpu Interface Base
-	 */
-	mov	w9, #~0			/* Config SGIs and PPIs as Grp1 */
-	str	w9, [x0, GICD_IGROUPRn]	/* GICD_IGROUPR0 */
-	mov	w9, #0x1		/* Enable SGI 0 */
-	str	w9, [x0, GICD_ISENABLERn]
-
-	/* Initialize Cpu Interface */
-	mov	w9, #0x1e7		/* Disable IRQ/FIQ Bypass & */
-					/* Enable Ack Group1 Interrupt & */
-					/* EnableGrp0 & EnableGrp1 */
-	str	w9, [x1, GICC_CTLR]	/* Secure GICC_CTLR */
-
-	mov	w9, #0x1 << 7		/* Non-Secure access to GICC_PMR */
-	str	w9, [x1, GICC_PMR]
-#endif
-	ret
-ENDPROC(gic_init_secure_percpu)
-
-
-/*************************************************************************
- * For Gicv2:
- * void gic_kick_secondary_cpus(DistributorBase);
- * For Gicv3:
- * void gic_kick_secondary_cpus(void);
- *
- *************************************************************************/
-ENTRY(gic_kick_secondary_cpus)
-#if defined(CONFIG_GICV3)
-	mov	x9, #(1 << 40)
-	msr	ICC_ASGI1R_EL1, x9
-	isb
-#elif defined(CONFIG_GICV2)
-	mov	w9, #0x8000
-	movk	w9, #0x100, lsl #16
-	str	w9, [x0, GICD_SGIR]
-#endif
-	ret
-ENDPROC(gic_kick_secondary_cpus)
-
-
-- 
1.9.1

