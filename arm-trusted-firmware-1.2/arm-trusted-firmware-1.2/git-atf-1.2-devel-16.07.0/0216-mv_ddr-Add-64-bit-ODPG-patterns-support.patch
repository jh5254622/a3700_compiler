From 7746ae11eb73a1b336d2fdb0b1b887cfb8c9dffe Mon Sep 17 00:00:00 2001
From: Victor Axelrod <victora@marvell.com>
Date: Thu, 16 Jun 2016 23:42:00 +0300
Subject: [PATCH 216/239] mv_ddr: Add 64-bit ODPG & patterns support

Change-Id: Iabc2d0c43ced58f1efb73056db70437b0b995d7f
Signed-off-by: Victor Axelrod <victora@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/30588
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Nadav Haklai <nadavh@marvell.com>
---
 .../marvell/mv_ddr/ddr3_training_centralization.c  |  11 +-
 drivers/marvell/mv_ddr/ddr3_training_db.c          |  68 +++++++++-
 drivers/marvell/mv_ddr/ddr3_training_ip_db.h       |  99 +++++++++++++-
 drivers/marvell/mv_ddr/ddr3_training_ip_engine.c   | 143 +++++++++++++++++++--
 4 files changed, 296 insertions(+), 25 deletions(-)

diff --git a/drivers/marvell/mv_ddr/ddr3_training_centralization.c b/drivers/marvell/mv_ddr/ddr3_training_centralization.c
index 0a4bc16..72e57fb 100644
--- a/drivers/marvell/mv_ddr/ddr3_training_centralization.c
+++ b/drivers/marvell/mv_ddr/ddr3_training_centralization.c
@@ -107,11 +107,14 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define CENTRAL_RX		1
 #define NUM_OF_CENTRAL_TYPES	2
 
-#if defined(CONFIG_DDR4)
-u32 start_pattern = PATTERN_KILLER_DQ0, end_pattern = PATTERN_VREF_INV;
-#else /* CONFIG_DDR4 */
+#if defined(CONFIG_64BIT) /* DDR3/4 64-bit */
+u32 start_pattern = PATTERN_KILLER_DQ0, end_pattern = PATTERN_KILLER_DQ7_INV_64;
+#elif defined(CONFIG_DDR4) /* DDR4 16/32-bit */
+u32 start_pattern = PATTERN_KILLER_DQ0, end_pattern = PATTERN_KILLER_DQ7_INV;
+#else /* DDR3 16/32-bit */
 u32 start_pattern = PATTERN_KILLER_DQ0, end_pattern = PATTERN_KILLER_DQ7;
-#endif /* CONFIG_DDR4 */
+#endif /* CONFIG_64BIT */
+
 u32 start_if = 0, end_if = (MAX_INTERFACE_NUM - 1);
 u8 bus_end_window[NUM_OF_CENTRAL_TYPES][MAX_INTERFACE_NUM][MAX_BUS_NUM];
 u8 bus_start_window[NUM_OF_CENTRAL_TYPES][MAX_INTERFACE_NUM][MAX_BUS_NUM];
diff --git a/drivers/marvell/mv_ddr/ddr3_training_db.c b/drivers/marvell/mv_ddr/ddr3_training_db.c
index 57d4351..56902bd 100644
--- a/drivers/marvell/mv_ddr/ddr3_training_db.c
+++ b/drivers/marvell/mv_ddr/ddr3_training_db.c
@@ -797,7 +797,7 @@ u32 pattern_table_get_word(u32 dev_num, enum hws_pattern type, u8 index)
 	struct hws_topology_map *tm = ddr3_get_topology_map();
 
 	if (DDR3_IS_16BIT_DRAM_MODE(tm->bus_act_mask) == 0) {
-		/* 32bit patterns */
+		/* 32/64-bit patterns */
 		switch (type) {
 		case PATTERN_PBS1:
 		case PATTERN_PBS2:
@@ -847,6 +847,23 @@ u32 pattern_table_get_word(u32 dev_num, enum hws_pattern type, u8 index)
 #endif /* !CONFIG_DDR4 */
 				(u8)(type - PATTERN_KILLER_DQ0), index);
 			break;
+#if defined(CONFIG_64BIT)
+		case PATTERN_KILLER_DQ0_64:
+		case PATTERN_KILLER_DQ1_64:
+		case PATTERN_KILLER_DQ2_64:
+		case PATTERN_KILLER_DQ3_64:
+		case PATTERN_KILLER_DQ4_64:
+		case PATTERN_KILLER_DQ5_64:
+		case PATTERN_KILLER_DQ6_64:
+		case PATTERN_KILLER_DQ7_64:
+#if !defined(CONFIG_DDR4)
+			pattern = pattern_table_get_killer_word(
+#else /* CONFIG_DDR4 */
+			pattern = pattern_table_get_killer_word_4(
+#endif /* !CONFIG_DDR4 */
+				(u8)(type - PATTERN_KILLER_DQ0_64), index + 32);
+			break;
+#endif /* CONFIG_64BIT */
 		case PATTERN_RL2:
 #if !defined(CONFIG_DDR4)
 			if (index < 6)
@@ -871,6 +888,11 @@ u32 pattern_table_get_word(u32 dev_num, enum hws_pattern type, u8 index)
 		case PATTERN_VREF:
 			pattern = pattern_table_get_vref_word(index);
 			break;
+#if defined(CONFIG_64BIT)
+		case PATTERN_VREF_64:
+			pattern = pattern_table_get_vref_word(index + 32);
+			break;
+#endif /* CONFIG_64BIT */
 		case PATTERN_SSO_FULL_XTALK_DQ0:
 		case PATTERN_SSO_FULL_XTALK_DQ1:
 		case PATTERN_SSO_FULL_XTALK_DQ2:
@@ -882,6 +904,19 @@ u32 pattern_table_get_word(u32 dev_num, enum hws_pattern type, u8 index)
 			pattern = pattern_table_get_sso_full_xtalk_word(
 				(u8)(type - PATTERN_SSO_FULL_XTALK_DQ0), index);
 			break;
+#if defined(CONFIG_64BIT)
+		case PATTERN_SSO_FULL_XTALK_DQ0_64:
+		case PATTERN_SSO_FULL_XTALK_DQ1_64:
+		case PATTERN_SSO_FULL_XTALK_DQ2_64:
+		case PATTERN_SSO_FULL_XTALK_DQ3_64:
+		case PATTERN_SSO_FULL_XTALK_DQ4_64:
+		case PATTERN_SSO_FULL_XTALK_DQ5_64:
+		case PATTERN_SSO_FULL_XTALK_DQ6_64:
+		case PATTERN_SSO_FULL_XTALK_DQ7_64:
+			pattern = pattern_table_get_sso_full_xtalk_word(
+				(u8)(type - PATTERN_SSO_FULL_XTALK_DQ0_64), index + 32);
+			break;
+#endif /* CONFIG_64BIT */
 		case PATTERN_SSO_XTALK_FREE_DQ0:
 		case PATTERN_SSO_XTALK_FREE_DQ1:
 		case PATTERN_SSO_XTALK_FREE_DQ2:
@@ -893,9 +928,27 @@ u32 pattern_table_get_word(u32 dev_num, enum hws_pattern type, u8 index)
 			pattern = pattern_table_get_sso_xtalk_free_word(
 				(u8)(type - PATTERN_SSO_XTALK_FREE_DQ0), index);
 			break;
+#if defined(CONFIG_64BIT)
+		case PATTERN_SSO_XTALK_FREE_DQ0_64:
+		case PATTERN_SSO_XTALK_FREE_DQ1_64:
+		case PATTERN_SSO_XTALK_FREE_DQ2_64:
+		case PATTERN_SSO_XTALK_FREE_DQ3_64:
+		case PATTERN_SSO_XTALK_FREE_DQ4_64:
+		case PATTERN_SSO_XTALK_FREE_DQ5_64:
+		case PATTERN_SSO_XTALK_FREE_DQ6_64:
+		case PATTERN_SSO_XTALK_FREE_DQ7_64:
+			pattern = pattern_table_get_sso_xtalk_free_word(
+				(u8)(type - PATTERN_SSO_XTALK_FREE_DQ0_64), index + 32);
+			break;
+#endif /* CONFIG_64BIT */
 		case PATTERN_ISI_XTALK_FREE:
 			pattern = pattern_table_get_isi_word(index);
 			break;
+#if defined(CONFIG_64BIT)
+		case PATTERN_ISI_XTALK_FREE_64:
+			pattern = pattern_table_get_isi_word(index + 32);
+			break;
+#endif /* CONFIG_64BIT */
 #if defined(CONFIG_DDR4)
 		case PATTERN_KILLER_DQ0_INV:
 		case PATTERN_KILLER_DQ1_INV:
@@ -908,6 +961,19 @@ u32 pattern_table_get_word(u32 dev_num, enum hws_pattern type, u8 index)
 			pattern = ~pattern_table_get_killer_word_4(
 				(u8)(type - PATTERN_KILLER_DQ0_INV), index);
 			break;
+#if defined(CONFIG_64BIT)
+		case PATTERN_KILLER_DQ0_INV_64:
+		case PATTERN_KILLER_DQ1_INV_64:
+		case PATTERN_KILLER_DQ2_INV_64:
+		case PATTERN_KILLER_DQ3_INV_64:
+		case PATTERN_KILLER_DQ4_INV_64:
+		case PATTERN_KILLER_DQ5_INV_64:
+		case PATTERN_KILLER_DQ6_INV_64:
+		case PATTERN_KILLER_DQ7_INV_64:
+			pattern = ~pattern_table_get_killer_word_4(
+				(u8)(type - PATTERN_KILLER_DQ0_INV_64), index + 32);
+			break;
+#endif /* CONFIG_64BIT */
 		case PATTERN_RESONANCE_1T:
 		case PATTERN_RESONANCE_2T:
 		case PATTERN_RESONANCE_3T:
diff --git a/drivers/marvell/mv_ddr/ddr3_training_ip_db.h b/drivers/marvell/mv_ddr/ddr3_training_ip_db.h
index 8b7fc0b..0527ba1 100644
--- a/drivers/marvell/mv_ddr/ddr3_training_ip_db.h
+++ b/drivers/marvell/mv_ddr/ddr3_training_ip_db.h
@@ -98,8 +98,98 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #ifndef _DDR3_TRAINING_IP_DB_H_
 #define _DDR3_TRAINING_IP_DB_H_
 
-#if defined(CONFIG_DDR4)
 enum hws_pattern {
+#if defined(CONFIG_64BIT) /* DDR3/4 64-bit */
+	PATTERN_PBS1,
+	PATTERN_PBS2,
+	PATTERN_PBS3,
+	PATTERN_TEST,
+	PATTERN_RL,
+	PATTERN_RL2,
+	PATTERN_STATIC_PBS,
+	PATTERN_KILLER_DQ0,
+	PATTERN_KILLER_DQ1,
+	PATTERN_KILLER_DQ2,
+	PATTERN_KILLER_DQ3,
+	PATTERN_KILLER_DQ4,
+	PATTERN_KILLER_DQ5,
+	PATTERN_KILLER_DQ6,
+	PATTERN_KILLER_DQ7,
+	PATTERN_KILLER_DQ0_64,
+	PATTERN_KILLER_DQ1_64,
+	PATTERN_KILLER_DQ2_64,
+	PATTERN_KILLER_DQ3_64,
+	PATTERN_KILLER_DQ4_64,
+	PATTERN_KILLER_DQ5_64,
+	PATTERN_KILLER_DQ6_64,
+	PATTERN_KILLER_DQ7_64,
+	PATTERN_KILLER_DQ0_INV,
+	PATTERN_KILLER_DQ1_INV,
+	PATTERN_KILLER_DQ2_INV,
+	PATTERN_KILLER_DQ3_INV,
+	PATTERN_KILLER_DQ4_INV,
+	PATTERN_KILLER_DQ5_INV,
+	PATTERN_KILLER_DQ6_INV,
+	PATTERN_KILLER_DQ7_INV,
+	PATTERN_KILLER_DQ0_INV_64,
+	PATTERN_KILLER_DQ1_INV_64,
+	PATTERN_KILLER_DQ2_INV_64,
+	PATTERN_KILLER_DQ3_INV_64,
+	PATTERN_KILLER_DQ4_INV_64,
+	PATTERN_KILLER_DQ5_INV_64,
+	PATTERN_KILLER_DQ6_INV_64,
+	PATTERN_KILLER_DQ7_INV_64,
+	PATTERN_SSO_FULL_XTALK_DQ0,
+	PATTERN_SSO_FULL_XTALK_DQ1,
+	PATTERN_SSO_FULL_XTALK_DQ2,
+	PATTERN_SSO_FULL_XTALK_DQ3,
+	PATTERN_SSO_FULL_XTALK_DQ4,
+	PATTERN_SSO_FULL_XTALK_DQ5,
+	PATTERN_SSO_FULL_XTALK_DQ6,
+	PATTERN_SSO_FULL_XTALK_DQ7,
+	PATTERN_SSO_FULL_XTALK_DQ0_64,
+	PATTERN_SSO_FULL_XTALK_DQ1_64,
+	PATTERN_SSO_FULL_XTALK_DQ2_64,
+	PATTERN_SSO_FULL_XTALK_DQ3_64,
+	PATTERN_SSO_FULL_XTALK_DQ4_64,
+	PATTERN_SSO_FULL_XTALK_DQ5_64,
+	PATTERN_SSO_FULL_XTALK_DQ6_64,
+	PATTERN_SSO_FULL_XTALK_DQ7_64,
+	PATTERN_SSO_XTALK_FREE_DQ0,
+	PATTERN_SSO_XTALK_FREE_DQ1,
+	PATTERN_SSO_XTALK_FREE_DQ2,
+	PATTERN_SSO_XTALK_FREE_DQ3,
+	PATTERN_SSO_XTALK_FREE_DQ4,
+	PATTERN_SSO_XTALK_FREE_DQ5,
+	PATTERN_SSO_XTALK_FREE_DQ6,
+	PATTERN_SSO_XTALK_FREE_DQ7,
+	PATTERN_SSO_XTALK_FREE_DQ0_64,
+	PATTERN_SSO_XTALK_FREE_DQ1_64,
+	PATTERN_SSO_XTALK_FREE_DQ2_64,
+	PATTERN_SSO_XTALK_FREE_DQ3_64,
+	PATTERN_SSO_XTALK_FREE_DQ4_64,
+	PATTERN_SSO_XTALK_FREE_DQ5_64,
+	PATTERN_SSO_XTALK_FREE_DQ6_64,
+	PATTERN_SSO_XTALK_FREE_DQ7_64,
+	PATTERN_ISI_XTALK_FREE,
+	PATTERN_ISI_XTALK_FREE_64,
+	PATTERN_VREF,
+	PATTERN_VREF_64,
+	PATTERN_VREF_INV,
+	PATTERN_FULL_SSO0,
+	PATTERN_FULL_SSO1,
+	PATTERN_FULL_SSO2,
+	PATTERN_FULL_SSO3,
+	PATTERN_RESONANCE_1T,
+	PATTERN_RESONANCE_2T,
+	PATTERN_RESONANCE_3T,
+	PATTERN_RESONANCE_4T,
+	PATTERN_RESONANCE_5T,
+	PATTERN_RESONANCE_6T,
+	PATTERN_RESONANCE_7T,
+	PATTERN_RESONANCE_8T,
+	PATTERN_RESONANCE_9T,
+#elif defined(CONFIG_DDR4) /* DDR4 16/32-bit */
 	PATTERN_PBS1,/*0*/
 	PATTERN_PBS2,
 	PATTERN_PBS3,
@@ -155,10 +245,7 @@ enum hws_pattern {
 	PATTERN_RESONANCE_7T,
 	PATTERN_RESONANCE_8T,
 	PATTERN_RESONANCE_9T,
-	PATTERN_LAST
-};
-#else /* CONFIG_DDR4 */
-enum hws_pattern {
+#else /* DDR3 16/32-bit */
 	PATTERN_PBS1,
 	PATTERN_PBS2,
 	PATTERN_PBS3,
@@ -196,9 +283,9 @@ enum hws_pattern {
 	PATTERN_SSO_XTALK_FREE_DQ6,
 	PATTERN_SSO_XTALK_FREE_DQ7,
 	PATTERN_ISI_XTALK_FREE,
+#endif /* CONFIG_64BIT */
 	PATTERN_LAST
 };
-#endif /* CONFIG_DDR4 */
 
 enum mv_wl_supp_mode {
 	WRITE_LEVELING_SUPP_REG_MODE,
diff --git a/drivers/marvell/mv_ddr/ddr3_training_ip_engine.c b/drivers/marvell/mv_ddr/ddr3_training_ip_engine.c
index d7d8fa2..1f8d4fe 100644
--- a/drivers/marvell/mv_ddr/ddr3_training_ip_engine.c
+++ b/drivers/marvell/mv_ddr/ddr3_training_ip_engine.c
@@ -194,6 +194,104 @@ u16 mask_results_pup_reg_map_pup3_ecc[] = {
 };
 #endif
 
+struct pattern_info pattern_table_64[] = {
+	/*
+	 * num_of_phases_tx, tx_burst_size;
+	 * delay_between_bursts, num_of_phases_rx,
+	 * start_addr, pattern_len
+	 */
+	{0x7, 0x7, 2, 0x7, 0x00000, 8},		/* PATTERN_PBS1 */
+	{0x7, 0x7, 2, 0x7, 0x00080, 8},		/* PATTERN_PBS2 */
+	{0x7, 0x7, 2, 0x7, 0x00100, 8},		/* PATTERN_PBS3 */
+	{0x7, 0x7, 2, 0x7, 0x00180, 8},		/* PATTERN_TEST */
+	{0x7, 0x7, 2, 0x7, 0x00200, 8},		/* PATTERN_RL */
+	{0x7, 0x7, 2, 0x7, 0x00280, 8},		/* PATTERN_RL2 */
+	{0x1f, 0xf, 2, 0xf, 0x00680, 32},	/* PATTERN_STATIC_PBS */
+	{0x1f, 0xf, 2, 0xf, 0x00a80, 32},	/* PATTERN_KILLER_DQ0 */
+	{0x1f, 0xf, 2, 0xf, 0x01280, 32},	/* PATTERN_KILLER_DQ1 */
+	{0x1f, 0xf, 2, 0xf, 0x01a80, 32},	/* PATTERN_KILLER_DQ2 */
+	{0x1f, 0xf, 2, 0xf, 0x02280, 32},	/* PATTERN_KILLER_DQ3 */
+	{0x1f, 0xf, 2, 0xf, 0x02a80, 32},	/* PATTERN_KILLER_DQ4 */
+	{0x1f, 0xf, 2, 0xf, 0x03280, 32},	/* PATTERN_KILLER_DQ5 */
+	{0x1f, 0xf, 2, 0xf, 0x03a80, 32},	/* PATTERN_KILLER_DQ6 */
+	{0x1f, 0xf, 2, 0xf, 0x04280, 32},	/* PATTERN_KILLER_DQ7 */
+	{0x1f, 0xf, 2, 0xf, 0x00e80, 32},	/* PATTERN_KILLER_DQ0_64 */
+	{0x1f, 0xf, 2, 0xf, 0x01680, 32},	/* PATTERN_KILLER_DQ1_64 */
+	{0x1f, 0xf, 2, 0xf, 0x01e80, 32},	/* PATTERN_KILLER_DQ2_64 */
+	{0x1f, 0xf, 2, 0xf, 0x02680, 32},	/* PATTERN_KILLER_DQ3_64 */
+	{0x1f, 0xf, 2, 0xf, 0x02e80, 32},	/* PATTERN_KILLER_DQ4_64 */
+	{0x1f, 0xf, 2, 0xf, 0x03680, 32},	/* PATTERN_KILLER_DQ5_64 */
+	{0x1f, 0xf, 2, 0xf, 0x03e80, 32},	/* PATTERN_KILLER_DQ6_64 */
+	{0x1f, 0xf, 2, 0xf, 0x04680, 32},	/* PATTERN_KILLER_DQ7_64 */
+	{0x1f, 0xf, 2, 0xf, 0x04a80, 32},	/* PATTERN_KILLER_DQ0_INV */
+	{0x1f, 0xf, 2, 0xf, 0x05280, 32},	/* PATTERN_KILLER_DQ1_INV */
+	{0x1f, 0xf, 2, 0xf, 0x05a80, 32},	/* PATTERN_KILLER_DQ2_INV */
+	{0x1f, 0xf, 2, 0xf, 0x06280, 32},	/* PATTERN_KILLER_DQ3_INV */
+	{0x1f, 0xf, 2, 0xf, 0x06a80, 32},	/* PATTERN_KILLER_DQ4_INV */
+	{0x1f, 0xf, 2, 0xf, 0x07280, 32},	/* PATTERN_KILLER_DQ5_INV */
+	{0x1f, 0xf, 2, 0xf, 0x07a80, 32},	/* PATTERN_KILLER_DQ6_INV */
+	{0x1f, 0xf, 2, 0xf, 0x08280, 32},	/* PATTERN_KILLER_DQ7_INV */
+	{0x1f, 0xf, 2, 0xf, 0x04e80, 32},	/* PATTERN_KILLER_DQ0_INV_64 */
+	{0x1f, 0xf, 2, 0xf, 0x05680, 32},	/* PATTERN_KILLER_DQ1_INV_64 */
+	{0x1f, 0xf, 2, 0xf, 0x05e80, 32},	/* PATTERN_KILLER_DQ2_INV_64 */
+	{0x1f, 0xf, 2, 0xf, 0x06680, 32},	/* PATTERN_KILLER_DQ3_INV_64 */
+	{0x1f, 0xf, 2, 0xf, 0x06e80, 32},	/* PATTERN_KILLER_DQ4_INV_64 */
+	{0x1f, 0xf, 2, 0xf, 0x07680, 32},	/* PATTERN_KILLER_DQ5_INV_64 */
+	{0x1f, 0xf, 2, 0xf, 0x07e80, 32},	/* PATTERN_KILLER_DQ6_INV_64 */
+	{0x1f, 0xf, 2, 0xf, 0x08680, 32},	/* PATTERN_KILLER_DQ7_INV_64 */
+	{0x1f, 0xf, 2, 0xf, 0x08a80, 32},	/* PATTERN_SSO_FULL_XTALK_DQ0 */
+	{0x1f, 0xf, 2, 0xf, 0x09280, 32},	/* PATTERN_SSO_FULL_XTALK_DQ1 */
+	{0x1f, 0xf, 2, 0xf, 0x09a80, 32},	/* PATTERN_SSO_FULL_XTALK_DQ2 */
+	{0x1f, 0xf, 2, 0xf, 0x0a280, 32},	/* PATTERN_SSO_FULL_XTALK_DQ3 */
+	{0x1f, 0xf, 2, 0xf, 0x0aa80, 32},	/* PATTERN_SSO_FULL_XTALK_DQ4 */
+	{0x1f, 0xf, 2, 0xf, 0x0b280, 32},	/* PATTERN_SSO_FULL_XTALK_DQ5 */
+	{0x1f, 0xf, 2, 0xf, 0x0ba80, 32},	/* PATTERN_SSO_FULL_XTALK_DQ6 */
+	{0x1f, 0xf, 2, 0xf, 0x0c280, 32},	/* PATTERN_SSO_FULL_XTALK_DQ7 */
+	{0x1f, 0xf, 2, 0xf, 0x08e80, 32},	/* PATTERN_SSO_FULL_XTALK_DQ0_64 */
+	{0x1f, 0xf, 2, 0xf, 0x09680, 32},	/* PATTERN_SSO_FULL_XTALK_DQ1_64 */
+	{0x1f, 0xf, 2, 0xf, 0x09e80, 32},	/* PATTERN_SSO_FULL_XTALK_DQ2_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0a680, 32},	/* PATTERN_SSO_FULL_XTALK_DQ3_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0ae80, 32},	/* PATTERN_SSO_FULL_XTALK_DQ4_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0b680, 32},	/* PATTERN_SSO_FULL_XTALK_DQ5_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0be80, 32},	/* PATTERN_SSO_FULL_XTALK_DQ6_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0c680, 32},	/* PATTERN_SSO_FULL_XTALK_DQ7_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0ca80, 32},	/* PATTERN_SSO_XTALK_FREE_DQ0 */
+	{0x1f, 0xf, 2, 0xf, 0x0d280, 32},	/* PATTERN_SSO_XTALK_FREE_DQ1 */
+	{0x1f, 0xf, 2, 0xf, 0x0da80, 32},	/* PATTERN_SSO_XTALK_FREE_DQ2 */
+	{0x1f, 0xf, 2, 0xf, 0x0e280, 32},	/* PATTERN_SSO_XTALK_FREE_DQ3 */
+	{0x1f, 0xf, 2, 0xf, 0x0ea80, 32},	/* PATTERN_SSO_XTALK_FREE_DQ4 */
+	{0x1f, 0xf, 2, 0xf, 0x0f280, 32},	/* PATTERN_SSO_XTALK_FREE_DQ5 */
+	{0x1f, 0xf, 2, 0xf, 0x0fa80, 32},	/* PATTERN_SSO_XTALK_FREE_DQ6 */
+	{0x1f, 0xf, 2, 0xf, 0x10280, 32},	/* PATTERN_SSO_XTALK_FREE_DQ7 */
+	{0x1f, 0xf, 2, 0xf, 0x0ce80, 32},	/* PATTERN_SSO_XTALK_FREE_DQ0_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0d680, 32},	/* PATTERN_SSO_XTALK_FREE_DQ1_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0de80, 32},	/* PATTERN_SSO_XTALK_FREE_DQ2_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0e680, 32},	/* PATTERN_SSO_XTALK_FREE_DQ3_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0ee80, 32},	/* PATTERN_SSO_XTALK_FREE_DQ4_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0f680, 32},	/* PATTERN_SSO_XTALK_FREE_DQ5_64 */
+	{0x1f, 0xf, 2, 0xf, 0x0fe80, 32},	/* PATTERN_SSO_XTALK_FREE_DQ6_64 */
+	{0x1f, 0xf, 2, 0xf, 0x10680, 32},	/* PATTERN_SSO_XTALK_FREE_DQ7_64 */
+	{0x1f, 0xf, 2, 0xf, 0x10a80, 32},	/* PATTERN_ISI_XTALK_FREE */
+	{0x1f, 0xf, 2, 0xf, 0x10e80, 32},	/* PATTERN_ISI_XTALK_FREE_64 */
+	{0x1f, 0xf, 2, 0xf, 0x11280, 32},	/* PATTERN_VREF */
+	{0x1f, 0xf, 2, 0xf, 0x11680, 32},	/* PATTERN_VREF_64 */
+	{0x1f, 0xf, 2, 0xf, 0x11a80, 32},	/* PATTERN_VREF_INV */
+	{0x1f, 0xf, 2, 0xf, 0x11e80, 32},	/* PATTERN_FULL_SSO_0T */
+	{0x1f, 0xf, 2, 0xf, 0x12280, 32},	/* PATTERN_FULL_SSO_1T */
+	{0x1f, 0xf, 2, 0xf, 0x12680, 32},	/* PATTERN_FULL_SSO_2T */
+	{0x1f, 0xf, 2, 0xf, 0x12a80, 32},	/* PATTERN_FULL_SSO_3T */
+	{0x1f, 0xf, 2, 0xf, 0x12e80, 32},	/* PATTERN_RESONANCE_1T */
+	{0x1f, 0xf, 2, 0xf, 0x13280, 32},	/* PATTERN_RESONANCE_2T */
+	{0x1f, 0xf, 2, 0xf, 0x13680, 32},	/* PATTERN_RESONANCE_3T */
+	{0x1f, 0xf, 2, 0xf, 0x13a80, 32},	/* PATTERN_RESONANCE_4T */
+	{0x1f, 0xf, 2, 0xf, 0x13e80, 32},	/* PATTERN_RESONANCE_5T */
+	{0x1f, 0xf, 2, 0xf, 0x14280, 32},	/* PATTERN_RESONANCE_6T */
+	{0x1f, 0xf, 2, 0xf, 0x14680, 32},	/* PATTERN_RESONANCE_7T */
+	{0x1f, 0xf, 2, 0xf, 0x14a80, 32},	/* PATTERN_RESONANCE_8T */
+	{0x1f, 0xf, 2, 0xf, 0x14e80, 32}	/* PATTERN_RESONANCE_9T */
+	/* Note: actual start_address is "<< 3" of defined address */
+};
+
 #if defined(CONFIG_DDR4)
 struct pattern_info pattern_table_16[] = {
 	/*
@@ -767,23 +865,38 @@ int ddr3_tip_load_pattern_to_odpg(u32 dev_num, enum hws_access_type access_type,
 {
 	u32 pattern_length_cnt = 0;
 	struct pattern_info *pattern_table = ddr3_tip_get_pattern_table();
+	struct hws_topology_map *tm = ddr3_get_topology_map();
 
 	for (pattern_length_cnt = 0;
 	     pattern_length_cnt < pattern_table[pattern].pattern_len;
 	     pattern_length_cnt++) {
-		CHECK_STATUS(ddr3_tip_if_write
-			     (dev_num, access_type, if_id,
-			      ODPG_PATTERN_DATA_LOW_REG,
-			      pattern_table_get_word(dev_num, pattern,
-						     (u8) (pattern_length_cnt *
-							   2)), MASK_ALL_BITS));
-		CHECK_STATUS(ddr3_tip_if_write
-			     (dev_num, access_type, if_id,
-			      ODPG_PATTERN_DATA_HI_REG,
-			      pattern_table_get_word(dev_num, pattern,
-						     (u8) (pattern_length_cnt *
-							   2 + 1)),
-			      MASK_ALL_BITS));
+		if (MV_DDR_IS_64BIT_DRAM_MODE(tm->bus_act_mask)) {
+			CHECK_STATUS(ddr3_tip_if_write
+				     (dev_num, access_type, if_id,
+				      ODPG_PATTERN_DATA_LOW_REG,
+				      pattern_table_get_word(dev_num, pattern,
+							     (u8) (pattern_length_cnt)),
+				      MASK_ALL_BITS));
+			CHECK_STATUS(ddr3_tip_if_write
+				     (dev_num, access_type, if_id,
+				      ODPG_PATTERN_DATA_HI_REG,
+				      pattern_table_get_word(dev_num, pattern,
+							     (u8) (pattern_length_cnt)),
+				      MASK_ALL_BITS));
+		} else {
+			CHECK_STATUS(ddr3_tip_if_write
+				     (dev_num, access_type, if_id,
+					      ODPG_PATTERN_DATA_LOW_REG,
+				      pattern_table_get_word(dev_num, pattern,
+							     (u8) (pattern_length_cnt * 2)),
+				      MASK_ALL_BITS));
+			CHECK_STATUS(ddr3_tip_if_write
+				     (dev_num, access_type, if_id,
+				      ODPG_PATTERN_DATA_HI_REG,
+				      pattern_table_get_word(dev_num, pattern,
+							     (u8) (pattern_length_cnt * 2 + 1)),
+				      MASK_ALL_BITS));
+		}
 		CHECK_STATUS(ddr3_tip_if_write
 			     (dev_num, access_type, if_id,
 			      ODPG_PATTERN_ADDR_REG, pattern_length_cnt,
@@ -1621,7 +1734,9 @@ struct pattern_info *ddr3_tip_get_pattern_table()
 {
 	struct hws_topology_map *tm = ddr3_get_topology_map();
 
-	if (DDR3_IS_16BIT_DRAM_MODE(tm->bus_act_mask) == 0)
+	if (MV_DDR_IS_64BIT_DRAM_MODE(tm->bus_act_mask))
+		return pattern_table_64;
+	else if (DDR3_IS_16BIT_DRAM_MODE(tm->bus_act_mask) == 0)
 		return pattern_table_32;
 	else
 		return pattern_table_16;
-- 
1.9.1

