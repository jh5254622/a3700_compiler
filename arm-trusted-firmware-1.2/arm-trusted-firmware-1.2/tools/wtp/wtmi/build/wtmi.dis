
build/wtmi.elf:     file format elf32-littlearm


Disassembly of section .ro:

1fff0000 <_start>:
1fff0000:	1fff007c 	svcne	0x00ff007c
1fff0004:	1fff008c 	svcne	0x00ff008c
1fff0008:	1fff0092 	svcne	0x00ff0092
1fff000c:	1fff0098 	svcne	0x00ff0098
1fff0010:	1fff009e 	svcne	0x00ff009e
1fff0014:	1fff00a4 	svcne	0x00ff00a4
1fff0018:	1fff00aa 	svcne	0x00ff00aa
1fff001c:	1fff00aa 	svcne	0x00ff00aa
1fff0020:	1fff00aa 	svcne	0x00ff00aa
1fff0024:	1fff00aa 	svcne	0x00ff00aa
1fff0028:	1fff00b0 	svcne	0x00ff00b0
1fff002c:	1fff00b6 	svcne	0x00ff00b6
1fff0030:	1fff00aa 	svcne	0x00ff00aa
1fff0034:	1fff00bc 	svcne	0x00ff00bc
1fff0038:	1fff00c2 	svcne	0x00ff00c2
1fff003c:	1fff00c8 	svcne	0x00ff00c8
1fff0040:	1fff00c8 	svcne	0x00ff00c8
1fff0044:	1fff00c8 	svcne	0x00ff00c8
1fff0048:	1fff00c8 	svcne	0x00ff00c8
1fff004c:	1fff00c8 	svcne	0x00ff00c8
1fff0050:	1fff00c8 	svcne	0x00ff00c8
1fff0054:	1fff00c8 	svcne	0x00ff00c8
1fff0058:	1fff00c8 	svcne	0x00ff00c8
1fff005c:	1fff00c8 	svcne	0x00ff00c8
1fff0060:	1fff00c8 	svcne	0x00ff00c8
1fff0064:	1fff00c8 	svcne	0x00ff00c8
1fff0068:	1fff00c8 	svcne	0x00ff00c8
1fff006c:	1fff00c8 	svcne	0x00ff00c8
1fff0070:	1fff00c8 	svcne	0x00ff00c8
1fff0074:	1fff00c8 	svcne	0x00ff00c8
1fff0078:	1fff00c8 	svcne	0x00ff00c8

1fff007c <reset>:
	.word	external_interrupt		/* 31 */

/***********************************************************/
.global reset
reset:
	ldr	r2, =stack_top
1fff007c:	4a14      	ldr	r2, [pc, #80]	; (1fff00d0 <external_interrupt+0x8>)
	msr	psp, r2				/* Init Process stack pointer */
1fff007e:	f382 8809 	msr	PSP, r2
	msr	msp, r2				/* Init main stack pointer */
1fff0082:	f382 8808 	msr	MSP, r2
	ldr	r0, =0x0
1fff0086:	2000      	movs	r0, #0
	ldr	r1, =main
1fff0088:	4912      	ldr	r1, [pc, #72]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff008a:	4708      	bx	r1

1fff008c <nmi_exception>:


/***********************************************************/
.global nmi_exception
nmi_exception:
	ldr	r0, =0x2
1fff008c:	2002      	movs	r0, #2
	ldr	r1, =main
1fff008e:	4911      	ldr	r1, [pc, #68]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff0090:	4708      	bx	r1

1fff0092 <hard_fault_exception>:

.global hard_fault_exception
hard_fault_exception:
	ldr	r0, =0x3
1fff0092:	2003      	movs	r0, #3
	ldr	r1, =main
1fff0094:	490f      	ldr	r1, [pc, #60]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff0096:	4708      	bx	r1

1fff0098 <mem_manage_exception>:

.global mem_manage_exception
mem_manage_exception:
	ldr	r0, =0x4
1fff0098:	2004      	movs	r0, #4
	ldr	r1, =main
1fff009a:	490e      	ldr	r1, [pc, #56]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff009c:	4708      	bx	r1

1fff009e <bus_fault_exception>:

.global bus_fault_exception
bus_fault_exception:
	ldr	r0, =0x5
1fff009e:	2005      	movs	r0, #5
	ldr	r1, =main
1fff00a0:	490c      	ldr	r1, [pc, #48]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00a2:	4708      	bx	r1

1fff00a4 <usage_fault_exception>:

.global usage_fault_exception
usage_fault_exception:
	ldr	r0, =0x6
1fff00a4:	2006      	movs	r0, #6
	ldr	r1, =main
1fff00a6:	490b      	ldr	r1, [pc, #44]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00a8:	4708      	bx	r1

1fff00aa <reserved>:

.global reserved
reserved:
	ldr	r0, =0x7
1fff00aa:	2007      	movs	r0, #7
	ldr	r1, =main
1fff00ac:	4909      	ldr	r1, [pc, #36]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00ae:	4708      	bx	r1

1fff00b0 <svc>:

.global svc
svc:
	ldr	r0, =0xB
1fff00b0:	200b      	movs	r0, #11
	ldr	r1, =main
1fff00b2:	4908      	ldr	r1, [pc, #32]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00b4:	4708      	bx	r1

1fff00b6 <debug_monitor>:

.global debug_monitor
debug_monitor:
	ldr	r0, =0xC
1fff00b6:	200c      	movs	r0, #12
	ldr	r1, =main
1fff00b8:	4906      	ldr	r1, [pc, #24]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00ba:	4708      	bx	r1

1fff00bc <pendable_service_request>:

.global pendable_service_request
pendable_service_request:
	ldr	r0, =0xE
1fff00bc:	200e      	movs	r0, #14
	ldr	r1, =main
1fff00be:	4905      	ldr	r1, [pc, #20]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00c0:	4708      	bx	r1

1fff00c2 <sys_tick_handler>:

.global sys_tick_handler
sys_tick_handler:
	ldr	r0, =0xF
1fff00c2:	200f      	movs	r0, #15
	ldr	r1, =main
1fff00c4:	4903      	ldr	r1, [pc, #12]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00c6:	4708      	bx	r1

1fff00c8 <external_interrupt>:

.global external_interrupt
external_interrupt:
	ldr	r0, =0x10
1fff00c8:	2010      	movs	r0, #16
	ldr	r1, =main
1fff00ca:	4902      	ldr	r1, [pc, #8]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00cc:	4708      	bx	r1
1fff00ce:	17100000 	ldrne	r0, [r0, -r0]
	.word	external_interrupt		/* 31 */

/***********************************************************/
.global reset
reset:
	ldr	r2, =stack_top
1fff00d2:	06c91fff 			; <UNDEFINED> instruction: 0x06c91fff
	msr	psp, r2				/* Init Process stack pointer */
	msr	msp, r2				/* Init main stack pointer */
	ldr	r0, =0x0
	ldr	r1, =main
1fff00d6:	4b031fff 	blmi	200b80da <stack_top+0xc69ca>

1fff00d8 <get_ref_clk>:
 ***************************************************************************************************/
u32 get_ref_clk(void)
{
	u32 regval;

	regval = (readl(MVEBU_TEST_PIN_LATCH_N) & MVEBU_XTAL_MODE_MASK) >> MVEBU_XTAL_MODE_OFFS;
1fff00d8:	4b03      	ldr	r3, [pc, #12]	; (1fff00e8 <get_ref_clk+0x10>)
1fff00da:	681b      	ldr	r3, [r3, #0]

	if (regval == MVEBU_XTAL_CLOCK_25MHZ)
1fff00dc:	f413 7f00 	tst.w	r3, #512	; 0x200
		return 25;
	else
		return 40;
}
1fff00e0:	bf14      	ite	ne
1fff00e2:	2028      	movne	r0, #40	; 0x28
1fff00e4:	2019      	moveq	r0, #25
1fff00e6:	4770      	bx	lr
1fff00e8:	c0013808 	andgt	r3, r1, r8, lsl #16

1fff00ec <get_cm3_clk>:
{
	u32 tbg, cm3_pre_scl1, cm3_pre_scl2;
	enum clock_line tbg_typ;

	/* 1. check CM3 clock select */
	if (!((readl(MVEBU_NORTH_CLOCK_SELECT_REG) >> 4) & 0x1))
1fff00ec:	4b2d      	ldr	r3, [pc, #180]	; (1fff01a4 <get_cm3_clk+0xb8>)
  * get_cm3_clk
  *
  * return: CM3 CPU clock in MHz
 ***************************************************************************************************/
u32 get_cm3_clk(void)
{
1fff00ee:	b510      	push	{r4, lr}
	u32 tbg, cm3_pre_scl1, cm3_pre_scl2;
	enum clock_line tbg_typ;

	/* 1. check CM3 clock select */
	if (!((readl(MVEBU_NORTH_CLOCK_SELECT_REG) >> 4) & 0x1))
1fff00f0:	681b      	ldr	r3, [r3, #0]
1fff00f2:	06db      	lsls	r3, r3, #27
1fff00f4:	d403      	bmi.n	1fff00fe <get_cm3_clk+0x12>
	cm3_pre_scl2 = (readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG) >> 12) & 0x7;
	if (cm3_pre_scl2 == 7 || cm3_pre_scl2 == 0)
		return 0; /* divider value error */

	return tbg/(cm3_pre_scl1 * cm3_pre_scl2);
}
1fff00f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	u32 tbg, cm3_pre_scl1, cm3_pre_scl2;
	enum clock_line tbg_typ;

	/* 1. check CM3 clock select */
	if (!((readl(MVEBU_NORTH_CLOCK_SELECT_REG) >> 4) & 0x1))
		return get_ref_clk(); /* CPU clock is using XTAL output*/
1fff00fa:	f7ff bfed 	b.w	1fff00d8 <get_ref_clk>

	/* 2. get TSECM TBG select */
	tbg_typ = (readl(MVEBU_NORTH_CLOCK_TBG_SELECT_REG) >> 8) & 0x3;
1fff00fe:	4b2a      	ldr	r3, [pc, #168]	; (1fff01a8 <get_cm3_clk+0xbc>)
1fff0100:	681c      	ldr	r4, [r3, #0]
	   vco_div - TBG_A_VCODIV_SEL or TBG_B_VCODIV_SEL
	   Fref - reference clock 25MHz or 40 MHz
	*/

	/* get ref clock */
	ref = get_ref_clk();
1fff0102:	f7ff ffe9 	bl	1fff00d8 <get_ref_clk>
	/* 1. check CM3 clock select */
	if (!((readl(MVEBU_NORTH_CLOCK_SELECT_REG) >> 4) & 0x1))
		return get_ref_clk(); /* CPU clock is using XTAL output*/

	/* 2. get TSECM TBG select */
	tbg_typ = (readl(MVEBU_NORTH_CLOCK_TBG_SELECT_REG) >> 8) & 0x3;
1fff0106:	f3c4 2401 	ubfx	r4, r4, #8, #2

	/* get ref clock */
	ref = get_ref_clk();

	/* get M, N */
	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL7);
1fff010a:	4b28      	ldr	r3, [pc, #160]	; (1fff01ac <get_cm3_clk+0xc0>)
	tbg_M = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
1fff010c:	2c02      	cmp	r4, #2

	/* get ref clock */
	ref = get_ref_clk();

	/* get M, N */
	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL7);
1fff010e:	681b      	ldr	r3, [r3, #0]
	tbg_M = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
1fff0110:	d000      	beq.n	1fff0114 <get_cm3_clk+0x28>
1fff0112:	b914      	cbnz	r4, 1fff011a <get_cm3_clk+0x2e>
1fff0114:	f3c3 0308 	ubfx	r3, r3, #0, #9
1fff0118:	e001      	b.n	1fff011e <get_cm3_clk+0x32>
1fff011a:	f3c3 4308 	ubfx	r3, r3, #16, #9
		(reg_val & 0x1FFUL) : ((reg_val >> 16) & 0x1FFUL);
	tbg_M = (tbg_M == 0) ? 1 : tbg_M;

	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL0);
1fff011e:	4a24      	ldr	r2, [pc, #144]	; (1fff01b0 <get_cm3_clk+0xc4>)

	/* get M, N */
	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL7);
	tbg_M = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
		(reg_val & 0x1FFUL) : ((reg_val >> 16) & 0x1FFUL);
	tbg_M = (tbg_M == 0) ? 1 : tbg_M;
1fff0120:	2b00      	cmp	r3, #0
1fff0122:	bf08      	it	eq
1fff0124:	2301      	moveq	r3, #1

	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL0);
	tbg_N = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
1fff0126:	2c02      	cmp	r4, #2
	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL7);
	tbg_M = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
		(reg_val & 0x1FFUL) : ((reg_val >> 16) & 0x1FFUL);
	tbg_M = (tbg_M == 0) ? 1 : tbg_M;

	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL0);
1fff0128:	6811      	ldr	r1, [r2, #0]
	tbg_N = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
1fff012a:	d000      	beq.n	1fff012e <get_cm3_clk+0x42>
1fff012c:	b914      	cbnz	r4, 1fff0134 <get_cm3_clk+0x48>
1fff012e:	f3c1 0188 	ubfx	r1, r1, #2, #9
1fff0132:	e001      	b.n	1fff0138 <get_cm3_clk+0x4c>
1fff0134:	f3c1 4188 	ubfx	r1, r1, #18, #9
		((reg_val >> 2) & 0x1FFUL) : ((reg_val >> 18) & 0x1FFUL);

	if ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_B_S)) {
1fff0138:	1ea2      	subs	r2, r4, #2
1fff013a:	2a01      	cmp	r2, #1
1fff013c:	d808      	bhi.n	1fff0150 <get_cm3_clk+0x64>
		/* get SE VCODIV */
		reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL1);
1fff013e:	4a1d      	ldr	r2, [pc, #116]	; (1fff01b4 <get_cm3_clk+0xc8>)
		reg_val = (tbg_typ == TBG_A_S) ?
1fff0140:	2c02      	cmp	r4, #2
	tbg_N = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
		((reg_val >> 2) & 0x1FFUL) : ((reg_val >> 18) & 0x1FFUL);

	if ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_B_S)) {
		/* get SE VCODIV */
		reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL1);
1fff0142:	6812      	ldr	r2, [r2, #0]
		reg_val = (tbg_typ == TBG_A_S) ?
1fff0144:	bf0c      	ite	eq
1fff0146:	f3c2 0208 	ubfxeq	r2, r2, #0, #9
1fff014a:	f3c2 4208 	ubfxne	r2, r2, #16, #9
1fff014e:	e007      	b.n	1fff0160 <get_cm3_clk+0x74>
			  (reg_val & 0x1FFUL) : ((reg_val >> 16) & 0x1FFUL);
	} else {
		/* get DIFF VCODIV */
		reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL8);
1fff0150:	4a19      	ldr	r2, [pc, #100]	; (1fff01b8 <get_cm3_clk+0xcc>)
1fff0152:	6812      	ldr	r2, [r2, #0]
		reg_val = (tbg_typ == TBG_A_P) ?
1fff0154:	b914      	cbnz	r4, 1fff015c <get_cm3_clk+0x70>
1fff0156:	f3c2 0248 	ubfx	r2, r2, #1, #9
1fff015a:	e001      	b.n	1fff0160 <get_cm3_clk+0x74>
1fff015c:	f3c2 4248 	ubfx	r2, r2, #17, #9
			  ((reg_val >> 1) & 0x1FFUL) : ((reg_val >> 17) & 0x1FFUL);
	}
	if (reg_val > 7)
1fff0160:	2a07      	cmp	r2, #7
1fff0162:	d81b      	bhi.n	1fff019c <get_cm3_clk+0xb0>
		return 0;

	vco_div = 0x1 << reg_val;

	return ((tbg_N * ref) << 2)/(tbg_M * vco_div);
1fff0164:	4348      	muls	r0, r1
			  ((reg_val >> 1) & 0x1FFUL) : ((reg_val >> 17) & 0x1FFUL);
	}
	if (reg_val > 7)
		return 0;

	vco_div = 0x1 << reg_val;
1fff0166:	2101      	movs	r1, #1
1fff0168:	fa01 f202 	lsl.w	r2, r1, r2

	return ((tbg_N * ref) << 2)/(tbg_M * vco_div);
1fff016c:	4353      	muls	r3, r2
1fff016e:	0080      	lsls	r0, r0, #2
1fff0170:	fbb0 f0f3 	udiv	r0, r0, r3
	/* 2. get TSECM TBG select */
	tbg_typ = (readl(MVEBU_NORTH_CLOCK_TBG_SELECT_REG) >> 8) & 0x3;

	/* 3. get TBG clock */
	tbg = get_tbg_clk(tbg_typ);
	if (tbg == 0)
1fff0174:	b1a8      	cbz	r0, 1fff01a2 <get_cm3_clk+0xb6>
		return 0;

	/* 4. get CM3 clk dividers */
	cm3_pre_scl1 = (readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG) >> 15) & 0x7;
1fff0176:	4b11      	ldr	r3, [pc, #68]	; (1fff01bc <get_cm3_clk+0xd0>)
1fff0178:	681c      	ldr	r4, [r3, #0]
1fff017a:	f3c4 34c2 	ubfx	r4, r4, #15, #3
	if (cm3_pre_scl1 == 7 || cm3_pre_scl1 == 0)
1fff017e:	2c07      	cmp	r4, #7
1fff0180:	d00c      	beq.n	1fff019c <get_cm3_clk+0xb0>
1fff0182:	b14c      	cbz	r4, 1fff0198 <get_cm3_clk+0xac>
		return 0; /* divider value error */

	cm3_pre_scl2 = (readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG) >> 12) & 0x7;
1fff0184:	6819      	ldr	r1, [r3, #0]
1fff0186:	f3c1 3102 	ubfx	r1, r1, #12, #3
	if (cm3_pre_scl2 == 7 || cm3_pre_scl2 == 0)
1fff018a:	2907      	cmp	r1, #7
1fff018c:	d006      	beq.n	1fff019c <get_cm3_clk+0xb0>
1fff018e:	b139      	cbz	r1, 1fff01a0 <get_cm3_clk+0xb4>
		return 0; /* divider value error */

	return tbg/(cm3_pre_scl1 * cm3_pre_scl2);
1fff0190:	4361      	muls	r1, r4
1fff0192:	fbb0 f0f1 	udiv	r0, r0, r1
1fff0196:	bd10      	pop	{r4, pc}
	tbg_typ = (readl(MVEBU_NORTH_CLOCK_TBG_SELECT_REG) >> 8) & 0x3;

	/* 3. get TBG clock */
	tbg = get_tbg_clk(tbg_typ);
	if (tbg == 0)
		return 0;
1fff0198:	4620      	mov	r0, r4
1fff019a:	bd10      	pop	{r4, pc}
1fff019c:	2000      	movs	r0, #0
1fff019e:	bd10      	pop	{r4, pc}
1fff01a0:	4608      	mov	r0, r1
	cm3_pre_scl2 = (readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG) >> 12) & 0x7;
	if (cm3_pre_scl2 == 7 || cm3_pre_scl2 == 0)
		return 0; /* divider value error */

	return tbg/(cm3_pre_scl1 * cm3_pre_scl2);
}
1fff01a2:	bd10      	pop	{r4, pc}
1fff01a4:	c0013010 	andgt	r3, r1, r0, lsl r0
1fff01a8:	c0013000 	andgt	r3, r1, r0
1fff01ac:	c0013220 	andgt	r3, r1, r0, lsr #4
1fff01b0:	c0013204 	andgt	r3, r1, r4, lsl #4
1fff01b4:	c0013208 	andgt	r3, r1, r8, lsl #4
1fff01b8:	c0013230 	andgt	r3, r1, r0, lsr r2
1fff01bc:	c0013008 	andgt	r3, r1, r8

1fff01c0 <wait_ns>:
  *
  * return: None
 ***************************************************************************************************/
void wait_ns(u32 wait_ns)
{
	u32 loop = wait_ns / loop_ns;
1fff01c0:	4b03      	ldr	r3, [pc, #12]	; (1fff01d0 <wait_ns+0x10>)
1fff01c2:	681b      	ldr	r3, [r3, #0]
1fff01c4:	fbb0 f0f3 	udiv	r0, r0, r3

	asm volatile("0:" "subs %[count], 1;" "bne 0b;" :[count]"+r"(loop));
1fff01c8:	3801      	subs	r0, #1
1fff01ca:	d1fd      	bne.n	1fff01c8 <wait_ns+0x8>
1fff01cc:	4770      	bx	lr
1fff01ce:	bf00      	nop
1fff01d0:	1fff0708 	svcne	0x00ff0708

1fff01d4 <clock_init>:
  * clock_init
  *
  * return: None
 ***************************************************************************************************/
u32 clock_init(void)
{
1fff01d4:	b508      	push	{r3, lr}
	u32 cm3_clk = get_cm3_clk();
1fff01d6:	f7ff ff89 	bl	1fff00ec <get_cm3_clk>
	u32 status = ERR_BAD_CONFIGURATION;
	u32 regval;

	if (cm3_clk != 0) {
1fff01da:	b158      	cbz	r0, 1fff01f4 <clock_init+0x20>
		clk_ns = 1000 / cm3_clk;
1fff01dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1fff01e0:	fbb3 f0f0 	udiv	r0, r3, r0
1fff01e4:	4b07      	ldr	r3, [pc, #28]	; (1fff0204 <clock_init+0x30>)
		loop_ns = clk_ns / CYCLES_PER_LOOP;
1fff01e6:	2203      	movs	r2, #3
	u32 cm3_clk = get_cm3_clk();
	u32 status = ERR_BAD_CONFIGURATION;
	u32 regval;

	if (cm3_clk != 0) {
		clk_ns = 1000 / cm3_clk;
1fff01e8:	6058      	str	r0, [r3, #4]
		loop_ns = clk_ns / CYCLES_PER_LOOP;
1fff01ea:	fbb0 f0f2 	udiv	r0, r0, r2
1fff01ee:	6018      	str	r0, [r3, #0]
		status = NO_ERROR;
1fff01f0:	2000      	movs	r0, #0
1fff01f2:	e000      	b.n	1fff01f6 <clock_init+0x22>
  * return: None
 ***************************************************************************************************/
u32 clock_init(void)
{
	u32 cm3_clk = get_cm3_clk();
	u32 status = ERR_BAD_CONFIGURATION;
1fff01f4:	2003      	movs	r0, #3
		loop_ns = clk_ns / CYCLES_PER_LOOP;
		status = NO_ERROR;
	}

	/* Open Host CPU access to SRAM - debug only */
	regval = readl(AXPROT_CONTROL);
1fff01f6:	4b04      	ldr	r3, [pc, #16]	; (1fff0208 <clock_init+0x34>)
1fff01f8:	681a      	ldr	r2, [r3, #0]
	regval &= ~(BIT3 | BIT4 | BIT5 | BIT6);
1fff01fa:	f022 0278 	bic.w	r2, r2, #120	; 0x78
	writel(regval, AXPROT_CONTROL);
1fff01fe:	601a      	str	r2, [r3, #0]

	return status;
}
1fff0200:	bd08      	pop	{r3, pc}
1fff0202:	bf00      	nop
1fff0204:	1fff0708 	svcne	0x00ff0708
1fff0208:	400001a0 	andmi	r0, r0, r0, lsr #3

1fff020c <efuse_read_row_no_ecc>:
 * efuse_read_row_no_ecc
 *
 * return: status
 ***************************************************************************************************/
static u32 efuse_read_row_no_ecc(u32 row, u32 *msb, u32 *lsb)
{
1fff020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1fff020e:	4607      	mov	r7, r0
1fff0210:	4616      	mov	r6, r2
	u32	regval;
	u32	timeout;
	u32	status;

	if (msb == NULL || lsb == NULL)
1fff0212:	460d      	mov	r5, r1
1fff0214:	2900      	cmp	r1, #0
1fff0216:	d040      	beq.n	1fff029a <efuse_read_row_no_ecc+0x8e>
1fff0218:	2a00      	cmp	r2, #0
1fff021a:	d03e      	beq.n	1fff029a <efuse_read_row_no_ecc+0x8e>
		return ERR_INVALID_ARGUMENT;

	/* Set PRDT=0 to clear RD_DONE and any other SD OTP read status */
	regval = EFUSE_CTRL_DEF_VAL | EFUSE_CTR_CSB_BIT;
	writel(regval, EFUSE_CONTROL_REG);
1fff021c:	4c20      	ldr	r4, [pc, #128]	; (1fff02a0 <efuse_read_row_no_ecc+0x94>)
1fff021e:	2304      	movs	r3, #4
1fff0220:	6023      	str	r3, [r4, #0]

	wait_ns(EFUSE_POWER_UP_TIME_NS);
1fff0222:	f44f 7096 	mov.w	r0, #300	; 0x12c
1fff0226:	f7ff ffcb 	bl	1fff01c0 <wait_ns>

	/* Set PRDT=1, Enter Access Mode */
	regval = readl(EFUSE_CONTROL_REG);
1fff022a:	6823      	ldr	r3, [r4, #0]
	regval &= ~EFUSE_CTR_CSB_BIT;
	regval |= EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	/* set ROW & COL address */
	regval = EFUSE_RW_ROW(row) | EFUSE_RW_COL(0);
1fff022c:	f007 073f 	and.w	r7, r7, #63	; 0x3f

	wait_ns(EFUSE_POWER_UP_TIME_NS);

	/* Set PRDT=1, Enter Access Mode */
	regval = readl(EFUSE_CONTROL_REG);
	regval |= EFUSE_CTR_PRDT_BIT;
1fff0230:	f043 0308 	orr.w	r3, r3, #8
	writel(regval, EFUSE_CONTROL_REG);
1fff0234:	6023      	str	r3, [r4, #0]

	/* Set CSB = 0, PGM_B = 1, LOAD = 1, Enter Read Mode */
	regval = readl(EFUSE_CONTROL_REG);
1fff0236:	6823      	ldr	r3, [r4, #0]
	regval &= ~EFUSE_CTR_CSB_BIT;
	regval |= EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	/* set ROW & COL address */
	regval = EFUSE_RW_ROW(row) | EFUSE_RW_COL(0);
1fff0238:	01ff      	lsls	r7, r7, #7
	regval |= EFUSE_CTR_PRDT_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	/* Set CSB = 0, PGM_B = 1, LOAD = 1, Enter Read Mode */
	regval = readl(EFUSE_CONTROL_REG);
	regval &= ~EFUSE_CTR_CSB_BIT;
1fff023a:	f023 0304 	bic.w	r3, r3, #4
	regval |= EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT;
1fff023e:	f043 0303 	orr.w	r3, r3, #3
	writel(regval, EFUSE_CONTROL_REG);
1fff0242:	6023      	str	r3, [r4, #0]

	/* set ROW & COL address */
	regval = EFUSE_RW_ROW(row) | EFUSE_RW_COL(0);
	writel(regval, EFUSE_READ_WRITE_REG);
1fff0244:	4b17      	ldr	r3, [pc, #92]	; (1fff02a4 <efuse_read_row_no_ecc+0x98>)

	/* wait minimum 4ns */
	wait_ns(EFUSE_ROW_COL_SET_TIME_NS);
1fff0246:	f44f 7096 	mov.w	r0, #300	; 0x12c
	regval |= EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	/* set ROW & COL address */
	regval = EFUSE_RW_ROW(row) | EFUSE_RW_COL(0);
	writel(regval, EFUSE_READ_WRITE_REG);
1fff024a:	601f      	str	r7, [r3, #0]

	/* wait minimum 4ns */
	wait_ns(EFUSE_ROW_COL_SET_TIME_NS);
1fff024c:	f7ff ffb8 	bl	1fff01c0 <wait_ns>

	/* Toggle SCLK = 1 for minimum 165ns */
	regval = readl(EFUSE_CONTROL_REG);
1fff0250:	6823      	ldr	r3, [r4, #0]
	regval |= EFUSE_CTRL_SCLK_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	wait_ns(EFUSE_READ_SCLK_PULSE_WIDTH_NS);
1fff0252:	20c8      	movs	r0, #200	; 0xc8
	/* wait minimum 4ns */
	wait_ns(EFUSE_ROW_COL_SET_TIME_NS);

	/* Toggle SCLK = 1 for minimum 165ns */
	regval = readl(EFUSE_CONTROL_REG);
	regval |= EFUSE_CTRL_SCLK_BIT;
1fff0254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	writel(regval, EFUSE_CONTROL_REG);
1fff0258:	6023      	str	r3, [r4, #0]

	wait_ns(EFUSE_READ_SCLK_PULSE_WIDTH_NS);
1fff025a:	f7ff ffb1 	bl	1fff01c0 <wait_ns>

	regval = readl(EFUSE_CONTROL_REG);
1fff025e:	6823      	ldr	r3, [r4, #0]
	writel(regval, EFUSE_CONTROL_REG);

	/* If RD_DONE then OK to read row value */
	for (timeout = 0, status = ERR_TIMEOUT;
	     timeout < EFUSE_READ_TIMEOUT_LOOPS; timeout++) {
		regval = readl(EFUSE_AUXILIARY_REG);
1fff0260:	4f11      	ldr	r7, [pc, #68]	; (1fff02a8 <efuse_read_row_no_ecc+0x9c>)
	writel(regval, EFUSE_CONTROL_REG);

	wait_ns(EFUSE_READ_SCLK_PULSE_WIDTH_NS);

	regval = readl(EFUSE_CONTROL_REG);
	regval &= ~EFUSE_CTRL_SCLK_BIT;
1fff0262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
	writel(regval, EFUSE_CONTROL_REG);
1fff0266:	6023      	str	r3, [r4, #0]

	/* Set CSB = 1, LOAD = 0 to finish read cycle */
	regval = readl(EFUSE_CONTROL_REG);
1fff0268:	6823      	ldr	r3, [r4, #0]
	regval |= EFUSE_CTR_CSB_BIT;
	regval &= ~EFUSE_CTR_LOAD_BIT;
1fff026a:	f023 0302 	bic.w	r3, r3, #2
1fff026e:	f043 0304 	orr.w	r3, r3, #4
	writel(regval, EFUSE_CONTROL_REG);
1fff0272:	6023      	str	r3, [r4, #0]
1fff0274:	4c0d      	ldr	r4, [pc, #52]	; (1fff02ac <efuse_read_row_no_ecc+0xa0>)

	/* If RD_DONE then OK to read row value */
	for (timeout = 0, status = ERR_TIMEOUT;
	     timeout < EFUSE_READ_TIMEOUT_LOOPS; timeout++) {
		regval = readl(EFUSE_AUXILIARY_REG);
1fff0276:	683b      	ldr	r3, [r7, #0]
		regval &= EFUSE_AUX_RD_DONE_BIT;
		if (regval) {
1fff0278:	2b00      	cmp	r3, #0
1fff027a:	da07      	bge.n	1fff028c <efuse_read_row_no_ecc+0x80>
			status = NO_ERROR;
			*lsb = readl(EFUSE_DATA0_REG);
1fff027c:	4b0c      	ldr	r3, [pc, #48]	; (1fff02b0 <efuse_read_row_no_ecc+0xa4>)
	for (timeout = 0, status = ERR_TIMEOUT;
	     timeout < EFUSE_READ_TIMEOUT_LOOPS; timeout++) {
		regval = readl(EFUSE_AUXILIARY_REG);
		regval &= EFUSE_AUX_RD_DONE_BIT;
		if (regval) {
			status = NO_ERROR;
1fff027e:	2000      	movs	r0, #0
			*lsb = readl(EFUSE_DATA0_REG);
1fff0280:	681b      	ldr	r3, [r3, #0]
1fff0282:	6033      	str	r3, [r6, #0]
			*msb = readl(EFUSE_DATA1_REG);
1fff0284:	4b0b      	ldr	r3, [pc, #44]	; (1fff02b4 <efuse_read_row_no_ecc+0xa8>)
1fff0286:	681b      	ldr	r3, [r3, #0]
1fff0288:	602b      	str	r3, [r5, #0]
			break;
1fff028a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		wait_ns(EFUSE_READ_LOOP_WAIT_NS);
1fff028c:	2064      	movs	r0, #100	; 0x64
1fff028e:	f7ff ff97 	bl	1fff01c0 <wait_ns>
	regval |= EFUSE_CTR_CSB_BIT;
	regval &= ~EFUSE_CTR_LOAD_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	/* If RD_DONE then OK to read row value */
	for (timeout = 0, status = ERR_TIMEOUT;
1fff0292:	3c01      	subs	r4, #1
1fff0294:	d1ef      	bne.n	1fff0276 <efuse_read_row_no_ecc+0x6a>
1fff0296:	2004      	movs	r0, #4
1fff0298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u32	regval;
	u32	timeout;
	u32	status;

	if (msb == NULL || lsb == NULL)
		return ERR_INVALID_ARGUMENT;
1fff029a:	2001      	movs	r0, #1
		}
		wait_ns(EFUSE_READ_LOOP_WAIT_NS);
	}

	return status;
}
1fff029c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1fff029e:	bf00      	nop
1fff02a0:	40003430 	andmi	r3, r0, r0, lsr r4
1fff02a4:	40003434 	andmi	r3, r0, r4, lsr r4
1fff02a8:	40003440 	andmi	r3, r0, r0, asr #8
1fff02ac:	000186a0 	andeq	r8, r1, r0, lsr #13
1fff02b0:	40003438 	andmi	r3, r0, r8, lsr r4
1fff02b4:	4000343c 	andmi	r3, r0, ip, lsr r4

1fff02b8 <efuse_write_enable.part.0>:
/***************************************************************************************************
 * efuse_write_enable
 *
 * return: status
 ***************************************************************************************************/
static u32 efuse_write_enable(u32 enable)
1fff02b8:	b538      	push	{r3, r4, r5, lr}
		 writel(EFUSE_MASTER_OTP_PRG_DIS, EFUSE_MASTER_OTP_CTRL_REG);

	} else {		/* Enable */

		/* Power up SD OTP */
		writel(0x0, EFUSE_CONTROL_REG);
1fff02ba:	4c1d      	ldr	r4, [pc, #116]	; (1fff0330 <efuse_write_enable.part.0+0x78>)
1fff02bc:	2300      	movs	r3, #0
1fff02be:	6023      	str	r3, [r4, #0]
		wait_ns(EFUSE_POWER_UP_TIME_NS);
1fff02c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
1fff02c4:	f7ff ff7c 	bl	1fff01c0 <wait_ns>

		/* Set Master OTP Program Enable
		   Applies to both Security Control OTP & Security Data OTP.
		 */
		writel(EFUSE_MASTER_OTP_PRG_EN, EFUSE_MASTER_OTP_CTRL_REG);
1fff02c8:	4b1a      	ldr	r3, [pc, #104]	; (1fff0334 <efuse_write_enable.part.0+0x7c>)
1fff02ca:	225a      	movs	r2, #90	; 0x5a

		/* Turn on the clock and run sequence ”1011000110” 6 times */
		writel(EFUSE_CTRL_SCLK_BIT, EFUSE_CONTROL_REG);
1fff02cc:	f44f 7180 	mov.w	r1, #256	; 0x100
		wait_ns(EFUSE_POWER_UP_TIME_NS);

		/* Set Master OTP Program Enable
		   Applies to both Security Control OTP & Security Data OTP.
		 */
		writel(EFUSE_MASTER_OTP_PRG_EN, EFUSE_MASTER_OTP_CTRL_REG);
1fff02d0:	601a      	str	r2, [r3, #0]

		/* Turn on the clock and run sequence ”1011000110” 6 times */
		writel(EFUSE_CTRL_SCLK_BIT, EFUSE_CONTROL_REG);
1fff02d2:	2506      	movs	r5, #6
1fff02d4:	6021      	str	r1, [r4, #0]
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff02d6:	4623      	mov	r3, r4
	writel(0x0700, EFUSE_CONTROL_REG);
1fff02d8:	f44f 60e0 	mov.w	r0, #1792	; 0x700
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff02dc:	f44f 7440 	mov.w	r4, #768	; 0x300
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
	writel(0x0500, EFUSE_CONTROL_REG);
1fff02e0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
		 */
		writel(EFUSE_MASTER_OTP_PRG_EN, EFUSE_MASTER_OTP_CTRL_REG);

		/* Turn on the clock and run sequence ”1011000110” 6 times */
		writel(EFUSE_CTRL_SCLK_BIT, EFUSE_CONTROL_REG);
		for (n = 0; n < 6; n++) {
1fff02e4:	3d01      	subs	r5, #1
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff02e6:	601c      	str	r4, [r3, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
1fff02e8:	6018      	str	r0, [r3, #0]
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
1fff02ea:	6019      	str	r1, [r3, #0]
	writel(0x0500, EFUSE_CONTROL_REG);
1fff02ec:	601a      	str	r2, [r3, #0]
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff02ee:	601c      	str	r4, [r3, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
1fff02f0:	6018      	str	r0, [r3, #0]
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff02f2:	601c      	str	r4, [r3, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
1fff02f4:	6018      	str	r0, [r3, #0]
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
1fff02f6:	6019      	str	r1, [r3, #0]
	writel(0x0500, EFUSE_CONTROL_REG);
1fff02f8:	601a      	str	r2, [r3, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
1fff02fa:	6019      	str	r1, [r3, #0]
	writel(0x0500, EFUSE_CONTROL_REG);
1fff02fc:	601a      	str	r2, [r3, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
1fff02fe:	6019      	str	r1, [r3, #0]
	writel(0x0500, EFUSE_CONTROL_REG);
1fff0300:	601a      	str	r2, [r3, #0]
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff0302:	601c      	str	r4, [r3, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
1fff0304:	6018      	str	r0, [r3, #0]
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff0306:	601c      	str	r4, [r3, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
1fff0308:	6018      	str	r0, [r3, #0]
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
1fff030a:	6019      	str	r1, [r3, #0]
	writel(0x0500, EFUSE_CONTROL_REG);
1fff030c:	601a      	str	r2, [r3, #0]
		 */
		writel(EFUSE_MASTER_OTP_PRG_EN, EFUSE_MASTER_OTP_CTRL_REG);

		/* Turn on the clock and run sequence ”1011000110” 6 times */
		writel(EFUSE_CTRL_SCLK_BIT, EFUSE_CONTROL_REG);
		for (n = 0; n < 6; n++) {
1fff030e:	d1e9      	bne.n	1fff02e4 <efuse_write_enable.part.0+0x2c>
			seq1();
			seq1();
			seq0();
		}
		/* Program Sequence Done */
		writel(0x0, EFUSE_CONTROL_REG);
1fff0310:	4b07      	ldr	r3, [pc, #28]	; (1fff0330 <efuse_write_enable.part.0+0x78>)
1fff0312:	4c09      	ldr	r4, [pc, #36]	; (1fff0338 <efuse_write_enable.part.0+0x80>)
1fff0314:	601d      	str	r5, [r3, #0]
		/* Check for CODE MATCH */
		for (timeout = 0, status = ERR_TIMEOUT;
		     timeout < EFUSE_CODE_MATCH_TIMEOUT_LOOPS; timeout++) {
			regval = readl(EFUSE_AUXILIARY_REG);
1fff0316:	4d09      	ldr	r5, [pc, #36]	; (1fff033c <efuse_write_enable.part.0+0x84>)
1fff0318:	682b      	ldr	r3, [r5, #0]
			regval &= EFUSE_AUX_CODE_MATCH_BIT;
			if (regval) {
1fff031a:	009b      	lsls	r3, r3, #2
1fff031c:	d406      	bmi.n	1fff032c <efuse_write_enable.part.0+0x74>
				status = NO_ERROR;
				break;
			}
			wait_ns(EFUSE_CODE_MATCH_LOOP_WAIT_NS);
1fff031e:	2064      	movs	r0, #100	; 0x64
1fff0320:	f7ff ff4e 	bl	1fff01c0 <wait_ns>
			seq0();
		}
		/* Program Sequence Done */
		writel(0x0, EFUSE_CONTROL_REG);
		/* Check for CODE MATCH */
		for (timeout = 0, status = ERR_TIMEOUT;
1fff0324:	3c01      	subs	r4, #1
1fff0326:	d1f7      	bne.n	1fff0318 <efuse_write_enable.part.0+0x60>
1fff0328:	2004      	movs	r0, #4
1fff032a:	bd38      	pop	{r3, r4, r5, pc}
		     timeout < EFUSE_CODE_MATCH_TIMEOUT_LOOPS; timeout++) {
			regval = readl(EFUSE_AUXILIARY_REG);
			regval &= EFUSE_AUX_CODE_MATCH_BIT;
			if (regval) {
				status = NO_ERROR;
1fff032c:	2000      	movs	r0, #0
			wait_ns(EFUSE_CODE_MATCH_LOOP_WAIT_NS);
		}
	}

	return status;
}
1fff032e:	bd38      	pop	{r3, r4, r5, pc}
1fff0330:	40003430 	andmi	r3, r0, r0, lsr r4
1fff0334:	400037f4 	strdmi	r3, [r0], -r4
1fff0338:	000186a0 	andeq	r8, r1, r0, lsr #13
1fff033c:	40003440 	andmi	r3, r0, r0, asr #8

1fff0340 <efuse_read>:
 ***************************************************************************************************/
u32 efuse_read(u32 size, u32 row, u32 offset, u32 *args)
{
	u32	lsb, msb, count;
	u32	status;
	u32	loops = EFUSE_ACCESS_LOOPS(size);
1fff0340:	2840      	cmp	r0, #64	; 0x40
 * efuse_read
 *
 * return: status
 ***************************************************************************************************/
u32 efuse_read(u32 size, u32 row, u32 offset, u32 *args)
{
1fff0342:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
1fff0346:	4605      	mov	r5, r0
1fff0348:	4689      	mov	r9, r1
1fff034a:	4616      	mov	r6, r2
1fff034c:	461c      	mov	r4, r3
	u32	lsb, msb, count;
	u32	status;
	u32	loops = EFUSE_ACCESS_LOOPS(size);
1fff034e:	bf8c      	ite	hi
1fff0350:	ea4f 1a90 	movhi.w	sl, r0, lsr #6
1fff0354:	f04f 0a01 	movls.w	sl, #1

	if (args == NULL || row >= EFUSE_MAX_ROW || offset > EFUSE_BITS_IN_ROW) {
1fff0358:	2b00      	cmp	r3, #0
1fff035a:	d04c      	beq.n	1fff03f6 <efuse_read+0xb6>
1fff035c:	292a      	cmp	r1, #42	; 0x2a
1fff035e:	d84a      	bhi.n	1fff03f6 <efuse_read+0xb6>
1fff0360:	2a40      	cmp	r2, #64	; 0x40
1fff0362:	d848      	bhi.n	1fff03f6 <efuse_read+0xb6>
1fff0364:	4698      	mov	r8, r3
1fff0366:	2700      	movs	r7, #0
		goto rd_error;
	}

	/* read row by row */
	for (count = 0; count < loops; count++) {
		status = efuse_read_row_no_ecc(row + count, &msb, &lsb);
1fff0368:	eb07 0009 	add.w	r0, r7, r9
1fff036c:	a901      	add	r1, sp, #4
1fff036e:	466a      	mov	r2, sp
1fff0370:	f7ff ff4c 	bl	1fff020c <efuse_read_row_no_ecc>
		if (status != NO_ERROR)
1fff0374:	2800      	cmp	r0, #0
1fff0376:	d13c      	bne.n	1fff03f2 <efuse_read+0xb2>
			goto rd_error;

		args[count * 2]     = lsb;
1fff0378:	9b00      	ldr	r3, [sp, #0]
		status = ERR_INVALID_ARGUMENT;
		goto rd_error;
	}

	/* read row by row */
	for (count = 0; count < loops; count++) {
1fff037a:	3701      	adds	r7, #1
		status = efuse_read_row_no_ecc(row + count, &msb, &lsb);
		if (status != NO_ERROR)
			goto rd_error;

		args[count * 2]     = lsb;
1fff037c:	f8c8 3000 	str.w	r3, [r8]
		args[count * 2 + 1] = msb;
1fff0380:	9b01      	ldr	r3, [sp, #4]
		status = ERR_INVALID_ARGUMENT;
		goto rd_error;
	}

	/* read row by row */
	for (count = 0; count < loops; count++) {
1fff0382:	4557      	cmp	r7, sl
		status = efuse_read_row_no_ecc(row + count, &msb, &lsb);
		if (status != NO_ERROR)
			goto rd_error;

		args[count * 2]     = lsb;
		args[count * 2 + 1] = msb;
1fff0384:	f8c8 3004 	str.w	r3, [r8, #4]
1fff0388:	f108 0808 	add.w	r8, r8, #8
		status = ERR_INVALID_ARGUMENT;
		goto rd_error;
	}

	/* read row by row */
	for (count = 0; count < loops; count++) {
1fff038c:	d3ec      	bcc.n	1fff0368 <efuse_read+0x28>
		args[count * 2]     = lsb;
		args[count * 2 + 1] = msb;
	}

	/* remove noise from filds shorter than full row */
	if (size < EFUSE_BITS_IN_ROW) {
1fff038e:	2d3f      	cmp	r5, #63	; 0x3f
1fff0390:	d83b      	bhi.n	1fff040a <efuse_read+0xca>
		/* 64-bit right shift */
		if (offset < 32) {
1fff0392:	2e1f      	cmp	r6, #31
1fff0394:	6863      	ldr	r3, [r4, #4]
1fff0396:	d80b      	bhi.n	1fff03b0 <efuse_read+0x70>
			args[0] >>= offset;
1fff0398:	6822      	ldr	r2, [r4, #0]
			args[0] |= args[1] << (32 - offset);
1fff039a:	f1c6 0120 	rsb	r1, r6, #32

	/* remove noise from filds shorter than full row */
	if (size < EFUSE_BITS_IN_ROW) {
		/* 64-bit right shift */
		if (offset < 32) {
			args[0] >>= offset;
1fff039e:	40f2      	lsrs	r2, r6
			args[0] |= args[1] << (32 - offset);
1fff03a0:	fa03 f101 	lsl.w	r1, r3, r1
			args[1] >>= offset;
1fff03a4:	fa23 f606 	lsr.w	r6, r3, r6
	/* remove noise from filds shorter than full row */
	if (size < EFUSE_BITS_IN_ROW) {
		/* 64-bit right shift */
		if (offset < 32) {
			args[0] >>= offset;
			args[0] |= args[1] << (32 - offset);
1fff03a8:	430a      	orrs	r2, r1
1fff03aa:	6022      	str	r2, [r4, #0]
			args[1] >>= offset;
1fff03ac:	6066      	str	r6, [r4, #4]
1fff03ae:	e003      	b.n	1fff03b8 <efuse_read+0x78>
		} else {
			args[0] = args[1] >> (offset - 32);
1fff03b0:	3e20      	subs	r6, #32
1fff03b2:	40f3      	lsrs	r3, r6
			args[1] = 0;
1fff03b4:	6060      	str	r0, [r4, #4]
		if (offset < 32) {
			args[0] >>= offset;
			args[0] |= args[1] << (32 - offset);
			args[1] >>= offset;
		} else {
			args[0] = args[1] >> (offset - 32);
1fff03b6:	6023      	str	r3, [r4, #0]
			args[1] = 0;
		}

		if (size == 1) {
1fff03b8:	2d01      	cmp	r5, #1
1fff03ba:	d10c      	bne.n	1fff03d6 <efuse_read+0x96>
			/* single bit field values are calculated as
			   majority vote between 3 physical bits */
			args[0] &= 0x7;
1fff03bc:	6823      	ldr	r3, [r4, #0]
			args[1] = 0;
1fff03be:	2200      	movs	r2, #0
		}

		if (size == 1) {
			/* single bit field values are calculated as
			   majority vote between 3 physical bits */
			args[0] &= 0x7;
1fff03c0:	f003 0307 	and.w	r3, r3, #7
			args[1] = 0;
			if (args[0] == 3 || args[0] > 4)
1fff03c4:	2b03      	cmp	r3, #3
		}

		if (size == 1) {
			/* single bit field values are calculated as
			   majority vote between 3 physical bits */
			args[0] &= 0x7;
1fff03c6:	6023      	str	r3, [r4, #0]
			args[1] = 0;
1fff03c8:	6062      	str	r2, [r4, #4]
			if (args[0] == 3 || args[0] > 4)
1fff03ca:	d01c      	beq.n	1fff0406 <efuse_read+0xc6>
1fff03cc:	2b04      	cmp	r3, #4
1fff03ce:	d900      	bls.n	1fff03d2 <efuse_read+0x92>
1fff03d0:	e019      	b.n	1fff0406 <efuse_read+0xc6>
				args[0] = 1;
			else
				args[0] = 0;
1fff03d2:	6022      	str	r2, [r4, #0]
1fff03d4:	e019      	b.n	1fff040a <efuse_read+0xca>

		} else if (size <= 32) {
1fff03d6:	2d20      	cmp	r5, #32
1fff03d8:	d817      	bhi.n	1fff040a <efuse_read+0xca>
			args[0] &=  0xFFFFFFFF >> (32 - size);
1fff03da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1fff03de:	f1c5 0520 	rsb	r5, r5, #32
1fff03e2:	fa23 f505 	lsr.w	r5, r3, r5
1fff03e6:	6823      	ldr	r3, [r4, #0]
1fff03e8:	402b      	ands	r3, r5
1fff03ea:	6023      	str	r3, [r4, #0]
			args[1] = 0;
1fff03ec:	2300      	movs	r3, #0
1fff03ee:	6063      	str	r3, [r4, #4]
1fff03f0:	e00b      	b.n	1fff040a <efuse_read+0xca>
		}
	}

rd_error:
	if (status == ERR_INVALID_ARGUMENT)
1fff03f2:	2801      	cmp	r0, #1
1fff03f4:	d103      	bne.n	1fff03fe <efuse_read+0xbe>
		args[0] = MB_STAT_BAD_ARGUMENT;
1fff03f6:	2303      	movs	r3, #3
1fff03f8:	6023      	str	r3, [r4, #0]
1fff03fa:	2001      	movs	r0, #1
1fff03fc:	e005      	b.n	1fff040a <efuse_read+0xca>
	else if (status == ERR_TIMEOUT)
1fff03fe:	2804      	cmp	r0, #4
1fff0400:	d101      	bne.n	1fff0406 <efuse_read+0xc6>
		args[0] = MB_STAT_TIMEOUT;
1fff0402:	2302      	movs	r3, #2
1fff0404:	e000      	b.n	1fff0408 <efuse_read+0xc8>
	else if (status != NO_ERROR)
		args[0] = MB_STAT_HW_ERROR;
1fff0406:	2301      	movs	r3, #1
1fff0408:	6023      	str	r3, [r4, #0]

	return status;
}
1fff040a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

1fff040e <efuse_write>:
 * efuse_write
 *
 * return: status
 ***************************************************************************************************/
u32 efuse_write(u32 size, u32 row, u32 offset, u32 *args)
{
1fff040e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32	lsb, msb, count, col;
	u32	status;
	u32	loops = EFUSE_ACCESS_LOOPS(size);
1fff0412:	2840      	cmp	r0, #64	; 0x40
 * efuse_write
 *
 * return: status
 ***************************************************************************************************/
u32 efuse_write(u32 size, u32 row, u32 offset, u32 *args)
{
1fff0414:	461c      	mov	r4, r3
1fff0416:	b089      	sub	sp, #36	; 0x24
	u32	lsb, msb, count, col;
	u32	status;
	u32	loops = EFUSE_ACCESS_LOOPS(size);
1fff0418:	bf8c      	ite	hi
1fff041a:	0983      	lsrhi	r3, r0, #6
1fff041c:	2301      	movls	r3, #1
 * efuse_write
 *
 * return: status
 ***************************************************************************************************/
u32 efuse_write(u32 size, u32 row, u32 offset, u32 *args)
{
1fff041e:	4606      	mov	r6, r0
1fff0420:	468a      	mov	sl, r1
1fff0422:	4617      	mov	r7, r2
	u32	lsb, msb, count, col;
	u32	status;
	u32	loops = EFUSE_ACCESS_LOOPS(size);
1fff0424:	9304      	str	r3, [sp, #16]
	u32	regval;

	if (args == NULL || row >= EFUSE_MAX_ROW || offset > EFUSE_BITS_IN_ROW) {
1fff0426:	2c00      	cmp	r4, #0
1fff0428:	f000 80ae 	beq.w	1fff0588 <efuse_write+0x17a>
1fff042c:	292a      	cmp	r1, #42	; 0x2a
1fff042e:	f200 80ab 	bhi.w	1fff0588 <efuse_write+0x17a>
1fff0432:	2a40      	cmp	r2, #64	; 0x40
1fff0434:	f200 80a8 	bhi.w	1fff0588 <efuse_write+0x17a>
		status = ERR_INVALID_ARGUMENT;
		goto wr_error;
	}

	/* Single bit - requres 2-3 bits programming for majority vote */
	if (size == 1) {
1fff0438:	2801      	cmp	r0, #1
1fff043a:	d107      	bne.n	1fff044c <efuse_write+0x3e>
		/* expand single bit values to 3 bits for physical efuse field */
		args[0] &= 1;
1fff043c:	6823      	ldr	r3, [r4, #0]
1fff043e:	f003 0301 	and.w	r3, r3, #1
		args[0] |= (args[0] << 1) | (args[0] << 2);
1fff0442:	009a      	lsls	r2, r3, #2
1fff0444:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
1fff0448:	4313      	orrs	r3, r2
1fff044a:	e008      	b.n	1fff045e <efuse_write+0x50>
		args[1] = 0;

	} else if (size <= 32) {
1fff044c:	2820      	cmp	r0, #32
1fff044e:	d809      	bhi.n	1fff0464 <efuse_write+0x56>
		/* cleanup the short field value */
		args[0] &=  0xFFFFFFFF >> (32 - size);
1fff0450:	f1c0 0320 	rsb	r3, r0, #32
1fff0454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1fff0458:	40da      	lsrs	r2, r3
1fff045a:	6823      	ldr	r3, [r4, #0]
1fff045c:	4013      	ands	r3, r2
1fff045e:	6023      	str	r3, [r4, #0]
		args[1] = 0;
1fff0460:	2300      	movs	r3, #0
1fff0462:	6063      	str	r3, [r4, #4]
1fff0464:	f7ff ff28 	bl	1fff02b8 <efuse_write_enable.part.0>
	}

	/* Enable OTP programming */
	status = efuse_write_enable(1);
	if (status != NO_ERROR)
1fff0468:	4605      	mov	r5, r0
1fff046a:	2800      	cmp	r0, #0
1fff046c:	f040 808a 	bne.w	1fff0584 <efuse_write+0x176>
1fff0470:	46a0      	mov	r8, r4
1fff0472:	4681      	mov	r9, r0
/***************************************************************************************************
 * efuse_write
 *
 * return: status
 ***************************************************************************************************/
u32 efuse_write(u32 size, u32 row, u32 offset, u32 *args)
1fff0474:	eb09 0b0a 	add.w	fp, r9, sl
	if (status != NO_ERROR)
		goto wr_error;

	for (count = 0; count < loops; count++) {
		/* Each eFuse row should be read before programming */
		status = efuse_read_row_no_ecc(row + count, &msb, &lsb);
1fff0478:	4658      	mov	r0, fp
1fff047a:	a907      	add	r1, sp, #28
1fff047c:	aa06      	add	r2, sp, #24
1fff047e:	f7ff fec5 	bl	1fff020c <efuse_read_row_no_ecc>
		if (status != NO_ERROR)
1fff0482:	4605      	mov	r5, r0
1fff0484:	2800      	cmp	r0, #0
1fff0486:	d17d      	bne.n	1fff0584 <efuse_write+0x176>
			goto wr_error;

		/* Set PRDT=1, Enter Access Mode */
		regval = readl(EFUSE_CONTROL_REG);
1fff0488:	4a46      	ldr	r2, [pc, #280]	; (1fff05a4 <efuse_write+0x196>)
		regval = readl(EFUSE_CONTROL_REG);
		regval &= ~(EFUSE_CTR_CSB_BIT | EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT);
		writel(regval, EFUSE_CONTROL_REG);

		/* Wait minimum 300ns */
		wait_ns(EFUSE_WRITE_MODE_UP_TIME_NS);
1fff048a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		status = efuse_read_row_no_ecc(row + count, &msb, &lsb);
		if (status != NO_ERROR)
			goto wr_error;

		/* Set PRDT=1, Enter Access Mode */
		regval = readl(EFUSE_CONTROL_REG);
1fff048e:	6811      	ldr	r1, [r2, #0]
		regval |= EFUSE_CTR_PRDT_BIT;
1fff0490:	f041 0108 	orr.w	r1, r1, #8
		writel(regval, EFUSE_CONTROL_REG);
1fff0494:	6011      	str	r1, [r2, #0]

		/* Set CSB = 0, PGM_B = 0, LOAD = 0, Enter User Data Write Mode */
		regval = readl(EFUSE_CONTROL_REG);
1fff0496:	6811      	ldr	r1, [r2, #0]
		regval &= ~(EFUSE_CTR_CSB_BIT | EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT);
1fff0498:	f021 0107 	bic.w	r1, r1, #7
		writel(regval, EFUSE_CONTROL_REG);
1fff049c:	6011      	str	r1, [r2, #0]

		/* Wait minimum 300ns */
		wait_ns(EFUSE_WRITE_MODE_UP_TIME_NS);
1fff049e:	f7ff fe8f 	bl	1fff01c0 <wait_ns>

		/* Fields smaller than entire row should be correctly positioned */
		if (size < EFUSE_BITS_IN_ROW) {
1fff04a2:	2e3f      	cmp	r6, #63	; 0x3f
1fff04a4:	d812      	bhi.n	1fff04cc <efuse_write+0xbe>
			/* 64-bit left shift */
			if (offset < 32) {
1fff04a6:	2f1f      	cmp	r7, #31
1fff04a8:	6822      	ldr	r2, [r4, #0]
1fff04aa:	d80a      	bhi.n	1fff04c2 <efuse_write+0xb4>
				args[1] <<= offset;
1fff04ac:	6861      	ldr	r1, [r4, #4]
				args[1] |= args[0] >> (32 - offset);
1fff04ae:	f1c7 0020 	rsb	r0, r7, #32
1fff04b2:	fa22 f000 	lsr.w	r0, r2, r0

		/* Fields smaller than entire row should be correctly positioned */
		if (size < EFUSE_BITS_IN_ROW) {
			/* 64-bit left shift */
			if (offset < 32) {
				args[1] <<= offset;
1fff04b6:	40b9      	lsls	r1, r7
				args[1] |= args[0] >> (32 - offset);
				args[0] <<= offset;
1fff04b8:	40ba      	lsls	r2, r7
		/* Fields smaller than entire row should be correctly positioned */
		if (size < EFUSE_BITS_IN_ROW) {
			/* 64-bit left shift */
			if (offset < 32) {
				args[1] <<= offset;
				args[1] |= args[0] >> (32 - offset);
1fff04ba:	4301      	orrs	r1, r0
1fff04bc:	6061      	str	r1, [r4, #4]
				args[0] <<= offset;
1fff04be:	6022      	str	r2, [r4, #0]
1fff04c0:	e004      	b.n	1fff04cc <efuse_write+0xbe>
			} else {
				args[1] = args[0] << (offset - 32);
1fff04c2:	f1a7 0120 	sub.w	r1, r7, #32
1fff04c6:	408a      	lsls	r2, r1
				args[0] = 0;
1fff04c8:	6025      	str	r5, [r4, #0]
			if (offset < 32) {
				args[1] <<= offset;
				args[1] |= args[0] >> (32 - offset);
				args[0] <<= offset;
			} else {
				args[1] = args[0] << (offset - 32);
1fff04ca:	6062      	str	r2, [r4, #4]
				args[0] = 0;
			}
		}

		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
1fff04cc:	f8d8 1000 	ldr.w	r1, [r8]
1fff04d0:	9a06      	ldr	r2, [sp, #24]

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
			if (args[count * 2 + col / 32] & 0x1) {
				/* set ROW & COL address */
				regval = EFUSE_RW_ROW(row + count) | EFUSE_RW_COL(col);
1fff04d2:	f00b 0b3f 	and.w	fp, fp, #63	; 0x3f
				args[0] = 0;
			}
		}

		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
1fff04d6:	430a      	orrs	r2, r1
1fff04d8:	f8c8 2000 	str.w	r2, [r8]
		args[count * 2 + 1] |= msb;
1fff04dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
1fff04e0:	9a07      	ldr	r2, [sp, #28]

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
			if (args[count * 2 + col / 32] & 0x1) {
				/* set ROW & COL address */
				regval = EFUSE_RW_ROW(row + count) | EFUSE_RW_COL(col);
1fff04e2:	ea4f 1bcb 	mov.w	fp, fp, lsl #7
			}
		}

		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
		args[count * 2 + 1] |= msb;
1fff04e6:	430a      	orrs	r2, r1
1fff04e8:	f8c8 2004 	str.w	r2, [r8, #4]
				/* set ROW & COL address */
				regval = EFUSE_RW_ROW(row + count) | EFUSE_RW_COL(col);
				writel(regval, EFUSE_READ_WRITE_REG);

				/* Toggle SCLK = 1 for 11000ns - 13000ns */
				regval = readl(EFUSE_CONTROL_REG);
1fff04ec:	4a2d      	ldr	r2, [pc, #180]	; (1fff05a4 <efuse_write+0x196>)

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
			if (args[count * 2 + col / 32] & 0x1) {
				/* set ROW & COL address */
				regval = EFUSE_RW_ROW(row + count) | EFUSE_RW_COL(col);
1fff04ee:	f8cd b014 	str.w	fp, [sp, #20]
/***************************************************************************************************
 * efuse_write
 *
 * return: status
 ***************************************************************************************************/
u32 efuse_write(u32 size, u32 row, u32 offset, u32 *args)
1fff04f2:	ea4f 0149 	mov.w	r1, r9, lsl #1
		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
		args[count * 2 + 1] |= msb;

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
1fff04f6:	f04f 0b00 	mov.w	fp, #0
			if (args[count * 2 + col / 32] & 0x1) {
1fff04fa:	eb01 1c5b 	add.w	ip, r1, fp, lsr #5
1fff04fe:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
1fff0502:	07c3      	lsls	r3, r0, #31
1fff0504:	d518      	bpl.n	1fff0538 <efuse_write+0x12a>
				/* set ROW & COL address */
				regval = EFUSE_RW_ROW(row + count) | EFUSE_RW_COL(col);
1fff0506:	9b05      	ldr	r3, [sp, #20]
1fff0508:	ea4b 0003 	orr.w	r0, fp, r3
				writel(regval, EFUSE_READ_WRITE_REG);
1fff050c:	4b26      	ldr	r3, [pc, #152]	; (1fff05a8 <efuse_write+0x19a>)
1fff050e:	6018      	str	r0, [r3, #0]

				/* Toggle SCLK = 1 for 11000ns - 13000ns */
				regval = readl(EFUSE_CONTROL_REG);
1fff0510:	6810      	ldr	r0, [r2, #0]
				regval |= EFUSE_CTRL_SCLK_BIT;
1fff0512:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				writel(regval, EFUSE_CONTROL_REG);
1fff0516:	6010      	str	r0, [r2, #0]

				wait_ns(EFUSE_WRITE_SCLK_PULSE_WIDTH_NS);
1fff0518:	f243 20c8 	movw	r0, #13000	; 0x32c8
1fff051c:	9103      	str	r1, [sp, #12]
1fff051e:	9201      	str	r2, [sp, #4]
1fff0520:	f8cd c008 	str.w	ip, [sp, #8]
1fff0524:	f7ff fe4c 	bl	1fff01c0 <wait_ns>

				regval = readl(EFUSE_CONTROL_REG);
1fff0528:	9a01      	ldr	r2, [sp, #4]
				regval &= ~EFUSE_CTRL_SCLK_BIT;
				writel(regval, EFUSE_CONTROL_REG);
1fff052a:	f8dd c008 	ldr.w	ip, [sp, #8]
				regval |= EFUSE_CTRL_SCLK_BIT;
				writel(regval, EFUSE_CONTROL_REG);

				wait_ns(EFUSE_WRITE_SCLK_PULSE_WIDTH_NS);

				regval = readl(EFUSE_CONTROL_REG);
1fff052e:	6810      	ldr	r0, [r2, #0]
				regval &= ~EFUSE_CTRL_SCLK_BIT;
				writel(regval, EFUSE_CONTROL_REG);
1fff0530:	9903      	ldr	r1, [sp, #12]
				writel(regval, EFUSE_CONTROL_REG);

				wait_ns(EFUSE_WRITE_SCLK_PULSE_WIDTH_NS);

				regval = readl(EFUSE_CONTROL_REG);
				regval &= ~EFUSE_CTRL_SCLK_BIT;
1fff0532:	f420 7080 	bic.w	r0, r0, #256	; 0x100
				writel(regval, EFUSE_CONTROL_REG);
1fff0536:	6010      	str	r0, [r2, #0]
			}

			args[count * 2 + col / 32] >>= 1;
1fff0538:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
		args[count * 2 + 1] |= msb;

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
1fff053c:	f10b 0b01 	add.w	fp, fp, #1
				regval = readl(EFUSE_CONTROL_REG);
				regval &= ~EFUSE_CTRL_SCLK_BIT;
				writel(regval, EFUSE_CONTROL_REG);
			}

			args[count * 2 + col / 32] >>= 1;
1fff0540:	0840      	lsrs	r0, r0, #1
		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
		args[count * 2 + 1] |= msb;

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
1fff0542:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
				regval = readl(EFUSE_CONTROL_REG);
				regval &= ~EFUSE_CTRL_SCLK_BIT;
				writel(regval, EFUSE_CONTROL_REG);
			}

			args[count * 2 + col / 32] >>= 1;
1fff0546:	f844 002c 	str.w	r0, [r4, ip, lsl #2]
		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
		args[count * 2 + 1] |= msb;

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
1fff054a:	d1d6      	bne.n	1fff04fa <efuse_write+0xec>
	/* Enable OTP programming */
	status = efuse_write_enable(1);
	if (status != NO_ERROR)
		goto wr_error;

	for (count = 0; count < loops; count++) {
1fff054c:	9b04      	ldr	r3, [sp, #16]
1fff054e:	f109 0901 	add.w	r9, r9, #1
1fff0552:	4599      	cmp	r9, r3
1fff0554:	f108 0808 	add.w	r8, r8, #8
1fff0558:	d38c      	bcc.n	1fff0474 <efuse_write+0x66>

/*		wait_ns(EFUSE_WAIT_BETWEEN_ROWS_NS); */
	}

	/* Set CSB = 1, Exit */
	regval = readl(EFUSE_CONTROL_REG);
1fff055a:	4b12      	ldr	r3, [pc, #72]	; (1fff05a4 <efuse_write+0x196>)

		/* Deactivate Program Sequence Code & Burning Circuitry
		   by toggling PROG_SEQ_CODE_CLK
		 */
		 writel(0x0005, EFUSE_CONTROL_REG);
		 writel(0x0405, EFUSE_CONTROL_REG);
1fff055c:	f240 4105 	movw	r1, #1029	; 0x405

/*		wait_ns(EFUSE_WAIT_BETWEEN_ROWS_NS); */
	}

	/* Set CSB = 1, Exit */
	regval = readl(EFUSE_CONTROL_REG);
1fff0560:	681a      	ldr	r2, [r3, #0]
	regval |= EFUSE_CTR_CSB_BIT;
1fff0562:	f042 0204 	orr.w	r2, r2, #4
	writel(regval, EFUSE_CONTROL_REG);
1fff0566:	601a      	str	r2, [r3, #0]

	/* Set PGM_B = 1, LOAD = 0, End Programming Mode */
	regval = readl(EFUSE_CONTROL_REG);
1fff0568:	681a      	ldr	r2, [r3, #0]
	regval &= ~EFUSE_CTR_LOAD_BIT;
1fff056a:	f022 0202 	bic.w	r2, r2, #2
	regval |= EFUSE_CTR_PGM_B_BIT;
1fff056e:	f042 0201 	orr.w	r2, r2, #1
	writel(regval, EFUSE_CONTROL_REG);
1fff0572:	601a      	str	r2, [r3, #0]
	if (enable == 0) {	/* Disable */

		/* Deactivate Program Sequence Code & Burning Circuitry
		   by toggling PROG_SEQ_CODE_CLK
		 */
		 writel(0x0005, EFUSE_CONTROL_REG);
1fff0574:	2205      	movs	r2, #5
1fff0576:	601a      	str	r2, [r3, #0]
		 writel(0x0405, EFUSE_CONTROL_REG);
1fff0578:	6019      	str	r1, [r3, #0]
		 writel(0x0005, EFUSE_CONTROL_REG);
1fff057a:	601a      	str	r2, [r3, #0]

		 /* Unset Master OTP Program Enable
		    Applies to both Security Control OTP & Security Data OTP
		  */
		 writel(EFUSE_MASTER_OTP_PRG_DIS, EFUSE_MASTER_OTP_CTRL_REG);
1fff057c:	2200      	movs	r2, #0
1fff057e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
1fff0582:	e00a      	b.n	1fff059a <efuse_write+0x18c>

	/* Disable OTP programming */
	efuse_write_enable(0);

wr_error:
	if (status == ERR_INVALID_ARGUMENT)
1fff0584:	2d01      	cmp	r5, #1
1fff0586:	d103      	bne.n	1fff0590 <efuse_write+0x182>
		args[0] = MB_STAT_BAD_ARGUMENT;
1fff0588:	2303      	movs	r3, #3
1fff058a:	6023      	str	r3, [r4, #0]
1fff058c:	2501      	movs	r5, #1
1fff058e:	e004      	b.n	1fff059a <efuse_write+0x18c>
	else if (status == ERR_TIMEOUT)
1fff0590:	2d04      	cmp	r5, #4
		args[0] = MB_STAT_TIMEOUT;
1fff0592:	bf0c      	ite	eq
1fff0594:	2302      	moveq	r3, #2
	else if (status != NO_ERROR)
		args[0] = MB_STAT_HW_ERROR;
1fff0596:	2301      	movne	r3, #1
1fff0598:	6023      	str	r3, [r4, #0]

	return status;
}
1fff059a:	4628      	mov	r0, r5
1fff059c:	b009      	add	sp, #36	; 0x24
1fff059e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1fff05a2:	bf00      	nop
1fff05a4:	40003430 	andmi	r3, r0, r0, lsr r4
1fff05a8:	40003434 	andmi	r3, r0, r4, lsr r4

1fff05ac <cmd_execute>:
  * cmd_execute
  *
  * return: None
 ***************************************************************************************************/
u32 cmd_execute(u32 cmd, u32 *args, u32 *nargs)
{
1fff05ac:	460b      	mov	r3, r1
	   row number, the second argument is the bit offset
	   within the row.
	   For other efuse fild sizes, the first argument
	   defines the row number */

	row = args[0];
1fff05ae:	6809      	ldr	r1, [r1, #0]
  * cmd_execute
  *
  * return: None
 ***************************************************************************************************/
u32 cmd_execute(u32 cmd, u32 *args, u32 *nargs)
{
1fff05b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	   within the row.
	   For other efuse fild sizes, the first argument
	   defines the row number */

	row = args[0];
	if (row > EFUSE_MAX_ROW) {
1fff05b2:	292b      	cmp	r1, #43	; 0x2b
  * cmd_execute
  *
  * return: None
 ***************************************************************************************************/
u32 cmd_execute(u32 cmd, u32 *args, u32 *nargs)
{
1fff05b4:	4606      	mov	r6, r0
1fff05b6:	4615      	mov	r5, r2
	   within the row.
	   For other efuse fild sizes, the first argument
	   defines the row number */

	row = args[0];
	if (row > EFUSE_MAX_ROW) {
1fff05b8:	d900      	bls.n	1fff05bc <cmd_execute+0x10>
1fff05ba:	e021      	b.n	1fff0600 <cmd_execute+0x54>
	u32			size;
	u32			offset;
	u32			*wr_args;

	op = MBOX_OPERATION(cmd);
	opsz = MBOX_OP_SIZE(cmd);
1fff05bc:	f000 070f 	and.w	r7, r0, #15
	if (row > EFUSE_MAX_ROW) {
		args[0] = MB_STAT_BAD_ARGUMENT;
		return ERR_INVALID_ARGUMENT;
	}

	switch (opsz) {
1fff05c0:	1e7a      	subs	r2, r7, #1
1fff05c2:	2a04      	cmp	r2, #4
1fff05c4:	d81c      	bhi.n	1fff0600 <cmd_execute+0x54>
1fff05c6:	e8df f002 	tbb	[pc, r2]
1fff05ca:	120d0803 	andne	r0, sp, #196608	; 0x30000
1fff05ce:	685a0016 	ldmdavs	sl, {r1, r2, r4}^
	case MB_OPSZ_BIT:
		size = 1;
		offset = args[1];
		wr_args = args + 2;
1fff05d2:	f103 0408 	add.w	r4, r3, #8
		return ERR_INVALID_ARGUMENT;
	}

	switch (opsz) {
	case MB_OPSZ_BIT:
		size = 1;
1fff05d6:	2001      	movs	r0, #1
		offset = args[1];
		wr_args = args + 2;
		break;
1fff05d8:	e016      	b.n	1fff0608 <cmd_execute+0x5c>

	case MB_OPSZ_BYTE:
		size = 8;
		offset = args[1];
1fff05da:	685a      	ldr	r2, [r3, #4]
		wr_args = args + 2;
1fff05dc:	f103 0408 	add.w	r4, r3, #8
		offset = args[1];
		wr_args = args + 2;
		break;

	case MB_OPSZ_BYTE:
		size = 8;
1fff05e0:	2008      	movs	r0, #8
		offset = args[1];
		wr_args = args + 2;
		break;
1fff05e2:	e011      	b.n	1fff0608 <cmd_execute+0x5c>

	case MB_OPSZ_WORD:
		size = 32;
		offset = args[1];
1fff05e4:	685a      	ldr	r2, [r3, #4]
		wr_args = args + 2;
1fff05e6:	f103 0408 	add.w	r4, r3, #8
		offset = args[1];
		wr_args = args + 2;
		break;

	case MB_OPSZ_WORD:
		size = 32;
1fff05ea:	2020      	movs	r0, #32
		offset = args[1];
		wr_args = args + 2;
		break;
1fff05ec:	e00c      	b.n	1fff0608 <cmd_execute+0x5c>

	case MB_OPSZ_DWORD:
		size = 64;
		offset = 0;
		wr_args = args + 1;
1fff05ee:	1d1c      	adds	r4, r3, #4
		wr_args = args + 2;
		break;

	case MB_OPSZ_DWORD:
		size = 64;
		offset = 0;
1fff05f0:	2200      	movs	r2, #0
		offset = args[1];
		wr_args = args + 2;
		break;

	case MB_OPSZ_DWORD:
		size = 64;
1fff05f2:	2040      	movs	r0, #64	; 0x40
		offset = 0;
		wr_args = args + 1;
		break;
1fff05f4:	e008      	b.n	1fff0608 <cmd_execute+0x5c>

	case MB_OPSZ_256B:
		size = 256;
		offset = 0;
		wr_args = args + 1;
1fff05f6:	1d1c      	adds	r4, r3, #4
		wr_args = args + 1;
		break;

	case MB_OPSZ_256B:
		size = 256;
		offset = 0;
1fff05f8:	2200      	movs	r2, #0
		offset = 0;
		wr_args = args + 1;
		break;

	case MB_OPSZ_256B:
		size = 256;
1fff05fa:	f44f 7080 	mov.w	r0, #256	; 0x100
		offset = 0;
		wr_args = args + 1;
		break;
1fff05fe:	e003      	b.n	1fff0608 <cmd_execute+0x5c>

	default:
		args[0] = MB_STAT_BAD_ARGUMENT;
1fff0600:	2203      	movs	r2, #3
1fff0602:	601a      	str	r2, [r3, #0]
		return ERR_INVALID_ARGUMENT;
1fff0604:	2001      	movs	r0, #1
1fff0606:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u32			row;
	u32			size;
	u32			offset;
	u32			*wr_args;

	op = MBOX_OPERATION(cmd);
1fff0608:	f3c6 2603 	ubfx	r6, r6, #8, #4
		args[0] = MB_STAT_BAD_ARGUMENT;
		return ERR_INVALID_ARGUMENT;
	}

	/* Execute command */
	if (op == MB_OP_WRITE) {
1fff060c:	2e02      	cmp	r6, #2
1fff060e:	d106      	bne.n	1fff061e <cmd_execute+0x72>
		/* WRITE */
		*nargs = 0;
1fff0610:	2300      	movs	r3, #0
1fff0612:	602b      	str	r3, [r5, #0]
		status = efuse_write(size, row, offset, wr_args);
1fff0614:	4623      	mov	r3, r4
		status = ERR_INVALID_COMMAND;
		args[0] = MB_STAT_BAD_COMMAND;
	}

	return status;
}
1fff0616:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

	/* Execute command */
	if (op == MB_OP_WRITE) {
		/* WRITE */
		*nargs = 0;
		status = efuse_write(size, row, offset, wr_args);
1fff061a:	f7ff bef8 	b.w	1fff040e <efuse_write>
	} else if (op == MB_OP_READ) {
1fff061e:	2e01      	cmp	r6, #1
1fff0620:	d10d      	bne.n	1fff063e <cmd_execute+0x92>
		/* READ */
		if (opsz == MB_OPSZ_DWORD)
1fff0622:	2f04      	cmp	r7, #4
1fff0624:	d101      	bne.n	1fff062a <cmd_execute+0x7e>
			*nargs = 2;
1fff0626:	2402      	movs	r4, #2
1fff0628:	e002      	b.n	1fff0630 <cmd_execute+0x84>
		else if (opsz == MB_OPSZ_256B)
1fff062a:	2f05      	cmp	r7, #5
1fff062c:	d102      	bne.n	1fff0634 <cmd_execute+0x88>
			*nargs = 8;
1fff062e:	2408      	movs	r4, #8
1fff0630:	602c      	str	r4, [r5, #0]
1fff0632:	e000      	b.n	1fff0636 <cmd_execute+0x8a>
		else
			*nargs = 1;
1fff0634:	602e      	str	r6, [r5, #0]
		status = ERR_INVALID_COMMAND;
		args[0] = MB_STAT_BAD_COMMAND;
	}

	return status;
}
1fff0636:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			*nargs = 2;
		else if (opsz == MB_OPSZ_256B)
			*nargs = 8;
		else
			*nargs = 1;
		status = efuse_read(size, row, offset, args);
1fff063a:	f7ff be81 	b.w	1fff0340 <efuse_read>
	} else {
		/* ERROR */
		status = ERR_INVALID_COMMAND;
		args[0] = MB_STAT_BAD_COMMAND;
1fff063e:	2204      	movs	r2, #4
1fff0640:	601a      	str	r2, [r3, #0]
		else
			*nargs = 1;
		status = efuse_read(size, row, offset, args);
	} else {
		/* ERROR */
		status = ERR_INVALID_COMMAND;
1fff0642:	2002      	movs	r0, #2
		args[0] = MB_STAT_BAD_COMMAND;
	}

	return status;
}
1fff0644:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1fff0648 <mbox_receive>:
  * args - arguments buffer
  *
  * return: 0 on success
 ***************************************************************************************************/
u32 mbox_receive(u32 *cmd, u32 *args)
{
1fff0648:	b510      	push	{r4, lr}
	u32 n, status = NO_ERROR;
	u32 regval;

	if ((cmd == 0) || (args == 0)) {
1fff064a:	b1a0      	cbz	r0, 1fff0676 <mbox_receive+0x2e>
1fff064c:	b199      	cbz	r1, 1fff0676 <mbox_receive+0x2e>
		status = ERR_INVALID_ARGUMENT;
		goto rx_exit;
	}

	while (!(readl(SP_CONTROL) & CMD_REG_OCCUPIED_BIT))
1fff064e:	4a0e      	ldr	r2, [pc, #56]	; (1fff0688 <mbox_receive+0x40>)
1fff0650:	6813      	ldr	r3, [r2, #0]
1fff0652:	07db      	lsls	r3, r3, #31
1fff0654:	d5fc      	bpl.n	1fff0650 <mbox_receive+0x8>
		/* continue polling */;

	*cmd = readl(MAILBOX_IN_CMD) & MAILBOX_CMD_MASK;
1fff0656:	4a0d      	ldr	r2, [pc, #52]	; (1fff068c <mbox_receive+0x44>)
1fff0658:	6813      	ldr	r3, [r2, #0]
1fff065a:	b29b      	uxth	r3, r3
1fff065c:	6003      	str	r3, [r0, #0]
1fff065e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

	for (n = 0; n < MAILBOX_MAX_ARGS; n++)
		args[n] = readl(MAILBOX_IN_ARG(n));
1fff0662:	681c      	ldr	r4, [r3, #0]
  * cmd - command buffer
  * args - arguments buffer
  *
  * return: 0 on success
 ***************************************************************************************************/
u32 mbox_receive(u32 *cmd, u32 *args)
1fff0664:	18c8      	adds	r0, r1, r3
1fff0666:	3304      	adds	r3, #4
1fff0668:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
	while (!(readl(SP_CONTROL) & CMD_REG_OCCUPIED_BIT))
		/* continue polling */;

	*cmd = readl(MAILBOX_IN_CMD) & MAILBOX_CMD_MASK;

	for (n = 0; n < MAILBOX_MAX_ARGS; n++)
1fff066c:	4293      	cmp	r3, r2
		args[n] = readl(MAILBOX_IN_ARG(n));
1fff066e:	6004      	str	r4, [r0, #0]
	while (!(readl(SP_CONTROL) & CMD_REG_OCCUPIED_BIT))
		/* continue polling */;

	*cmd = readl(MAILBOX_IN_CMD) & MAILBOX_CMD_MASK;

	for (n = 0; n < MAILBOX_MAX_ARGS; n++)
1fff0670:	d1f7      	bne.n	1fff0662 <mbox_receive+0x1a>
  *
  * return: 0 on success
 ***************************************************************************************************/
u32 mbox_receive(u32 *cmd, u32 *args)
{
	u32 n, status = NO_ERROR;
1fff0672:	2000      	movs	r0, #0
1fff0674:	e000      	b.n	1fff0678 <mbox_receive+0x30>
	u32 regval;

	if ((cmd == 0) || (args == 0)) {
		status = ERR_INVALID_ARGUMENT;
1fff0676:	2001      	movs	r0, #1
	for (n = 0; n < MAILBOX_MAX_ARGS; n++)
		args[n] = readl(MAILBOX_IN_ARG(n));

rx_exit:
	/* Reset INT */
	writel(CMD_REG_OCCUPIED_RESET_BIT, SP_INT_RESET);
1fff0678:	4b05      	ldr	r3, [pc, #20]	; (1fff0690 <mbox_receive+0x48>)
1fff067a:	2202      	movs	r2, #2
1fff067c:	601a      	str	r2, [r3, #0]
	regval = readl(SP_CONTROL) & ~CMD_REG_OCCUPIED_BIT;
1fff067e:	689a      	ldr	r2, [r3, #8]
1fff0680:	f022 0201 	bic.w	r2, r2, #1
	writel(regval, SP_CONTROL);
1fff0684:	609a      	str	r2, [r3, #8]

	return status;
}
1fff0686:	bd10      	pop	{r4, pc}
1fff0688:	40000220 	andmi	r0, r0, r0, lsr #4
1fff068c:	40000040 	andmi	r0, r0, r0, asr #32
1fff0690:	40000218 	andmi	r0, r0, r8, lsl r2

1fff0694 <mbox_send>:
  * nargs - number or argumens
 *
  * return: 0 on success
 ***************************************************************************************************/
void mbox_send(u32 status, u32 *args, u32 nargs)
{
1fff0694:	b530      	push	{r4, r5, lr}
	u32 n, regval;

	if ((args == 0) || (nargs >= MAILBOX_MAX_ARGS))
1fff0696:	b1a1      	cbz	r1, 1fff06c2 <mbox_send+0x2e>
1fff0698:	2a0f      	cmp	r2, #15
1fff069a:	d812      	bhi.n	1fff06c2 <mbox_send+0x2e>
  * args - arguments to return to host
  * nargs - number or argumens
 *
  * return: 0 on success
 ***************************************************************************************************/
void mbox_send(u32 status, u32 *args, u32 nargs)
1fff069c:	0092      	lsls	r2, r2, #2
1fff069e:	2300      	movs	r3, #0
1fff06a0:	e005      	b.n	1fff06ae <mbox_send+0x1a>

	if ((args == 0) || (nargs >= MAILBOX_MAX_ARGS))
		return;

	for (n = 0; n < nargs; n++)
		writel(args[n], MAILBOX_OUT_ARG(n));
1fff06a2:	58cc      	ldr	r4, [r1, r3]
  * args - arguments to return to host
  * nargs - number or argumens
 *
  * return: 0 on success
 ***************************************************************************************************/
void mbox_send(u32 status, u32 *args, u32 nargs)
1fff06a4:	f103 4580 	add.w	r5, r3, #1073741824	; 0x40000000

	if ((args == 0) || (nargs >= MAILBOX_MAX_ARGS))
		return;

	for (n = 0; n < nargs; n++)
		writel(args[n], MAILBOX_OUT_ARG(n));
1fff06a8:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
1fff06ac:	3304      	adds	r3, #4
	u32 n, regval;

	if ((args == 0) || (nargs >= MAILBOX_MAX_ARGS))
		return;

	for (n = 0; n < nargs; n++)
1fff06ae:	4293      	cmp	r3, r2
1fff06b0:	d1f7      	bne.n	1fff06a2 <mbox_send+0xe>
		writel(args[n], MAILBOX_OUT_ARG(n));

	/* Set status */
	writel(status, MAILBOX_OUT_STATUS);
1fff06b2:	4b04      	ldr	r3, [pc, #16]	; (1fff06c4 <mbox_send+0x30>)
1fff06b4:	6018      	str	r0, [r3, #0]
	/* Pop host INT CMD complete */
	regval = readl(HOST_INT_SET) | HOST_INT_CMD_COMPLETE_BIT;
1fff06b6:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
1fff06ba:	f042 0201 	orr.w	r2, r2, #1
	writel(regval, HOST_INT_SET);
1fff06be:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
1fff06c2:	bd30      	pop	{r4, r5, pc}
1fff06c4:	40000080 	andmi	r0, r0, r0, lsl #1

Disassembly of section .text.startup:

1fff06c8 <main>:
  * main
  *
  * return: None
 ***************************************************************************************************/
int main(int exception, char **dummy)
{
1fff06c8:	b510      	push	{r4, lr}
1fff06ca:	b092      	sub	sp, #72	; 0x48
	u32			cmd, args[MAILBOX_MAX_ARGS];
	u32			status, nargs;
	enum mbox_status	mb_stat = MB_STAT_SUCCESS;

	if (exception != 0) {
1fff06cc:	b9c8      	cbnz	r0, 1fff0702 <main+0x3a>
		exception_handler(exception);
		return NO_ERROR;
	}

	/* Initialization stuff */
	status = clock_init();
1fff06ce:	f7ff fd81 	bl	1fff01d4 <clock_init>
	if (status)
1fff06d2:	b9b8      	cbnz	r0, 1fff0704 <main+0x3c>
1fff06d4:	4604      	mov	r4, r0
		return status;

	/* Mailbox commands handling loop */
	while (1) {
		status = mbox_receive(&cmd, args);
1fff06d6:	4668      	mov	r0, sp
1fff06d8:	a902      	add	r1, sp, #8
1fff06da:	f7ff ffb5 	bl	1fff0648 <mbox_receive>
		if (status == NO_ERROR)
1fff06de:	b118      	cbz	r0, 1fff06e8 <main+0x20>
			status = cmd_execute(cmd, args, &nargs);

		/* In case of error, the status saved in args[0] */
		if (status != NO_ERROR) {
			nargs = 0;
1fff06e0:	2300      	movs	r3, #0
1fff06e2:	9301      	str	r3, [sp, #4]
			mb_stat = args[0];
1fff06e4:	9c02      	ldr	r4, [sp, #8]
1fff06e6:	e006      	b.n	1fff06f6 <main+0x2e>

	/* Mailbox commands handling loop */
	while (1) {
		status = mbox_receive(&cmd, args);
		if (status == NO_ERROR)
			status = cmd_execute(cmd, args, &nargs);
1fff06e8:	9800      	ldr	r0, [sp, #0]
1fff06ea:	a902      	add	r1, sp, #8
1fff06ec:	aa01      	add	r2, sp, #4
1fff06ee:	f7ff ff5d 	bl	1fff05ac <cmd_execute>

		/* In case of error, the status saved in args[0] */
		if (status != NO_ERROR) {
1fff06f2:	2800      	cmp	r0, #0
1fff06f4:	d1f4      	bne.n	1fff06e0 <main+0x18>
			nargs = 0;
			mb_stat = args[0];
		}

		/* Send the results back */
		mbox_send(mb_stat, args, nargs);
1fff06f6:	4620      	mov	r0, r4
1fff06f8:	a902      	add	r1, sp, #8
1fff06fa:	9a01      	ldr	r2, [sp, #4]
1fff06fc:	f7ff ffca 	bl	1fff0694 <mbox_send>

	} /* read and execute mailbox commands */
1fff0700:	e7e9      	b.n	1fff06d6 <main+0xe>
	u32			status, nargs;
	enum mbox_status	mb_stat = MB_STAT_SUCCESS;

	if (exception != 0) {
		exception_handler(exception);
		return NO_ERROR;
1fff0702:	2000      	movs	r0, #0
		mbox_send(mb_stat, args, nargs);

	} /* read and execute mailbox commands */

	return NO_ERROR;
}
1fff0704:	b012      	add	sp, #72	; 0x48
1fff0706:	bd10      	pop	{r4, pc}

Disassembly of section .rw:

1fff0708 <loop_ns>:
1fff0708:	00000000 	andeq	r0, r0, r0

1fff070c <clk_ns>:
1fff070c:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <_start-0x1ffa9fc4>
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_start-0x1ef1f2dc>
   4:	62552820 	subsvs	r2, r5, #32, 16	; 0x200000
   8:	75746e75 	ldrbvc	r6, [r4, #-3701]!	; 0xe75
   c:	6e694c2f 	cdpvs	12, 6, cr4, cr9, cr15, {1}
  10:	206f7261 	rsbcs	r7, pc, r1, ror #4
  14:	2e372e34 	mrccs	14, 1, r2, cr7, cr4, {1}
  18:	32312d33 	eorscc	r2, r1, #3264	; 0xcc0
  1c:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  20:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  24:	372e3420 	strcc	r3, [lr, -r0, lsr #8]!
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000005e 	andeq	r0, r0, lr, asr r0
   4:	001e0002 	andseq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  20:	00532e74 	subseq	r2, r3, r4, ror lr
  24:	00000000 	andeq	r0, r0, r0
  28:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
  2c:	031fff00 	tsteq	pc, #0, 30
  30:	2f21013a 	svccs	0x0021013a
  34:	2621212f 	strtcs	r2, [r1], -pc, lsr #2
  38:	21242121 	teqcs	r4, r1, lsr #2
  3c:	21212421 	teqcs	r1, r1, lsr #8
  40:	24212124 	strtcs	r2, [r1], #-292	; 0x124
  44:	21242121 	teqcs	r4, r1, lsr #2
  48:	21212421 	teqcs	r1, r1, lsr #8
  4c:	24212124 	strtcs	r2, [r1], #-292	; 0x124
  50:	21242121 	teqcs	r4, r1, lsr #2
  54:	21212421 	teqcs	r1, r1, lsr #8
  58:	2e7fb703 	cdpcs	7, 7, cr11, cr15, cr3, {0}
  5c:	00020232 	andeq	r0, r2, r2, lsr r2
  60:	00a70101 	adceq	r0, r7, r1, lsl #2
  64:	00020000 	andeq	r0, r2, r0
  68:	00000034 	andeq	r0, r0, r4, lsr r0
  6c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  70:	0101000d 	tsteq	r1, sp
  74:	00000101 	andeq	r0, r0, r1, lsl #2
  78:	00000100 	andeq	r0, r0, r0, lsl #2
  7c:	6c630001 	stclvs	0, cr0, [r3], #-4
  80:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
  84:	00000063 	andeq	r0, r0, r3, rrx
  88:	70797400 	rsbsvc	r7, r9, r0, lsl #8
  8c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
  90:	00000000 	andeq	r0, r0, r0
  94:	636f6c63 	cmnvs	pc, #25344	; 0x6300
  98:	00682e6b 	rsbeq	r2, r8, fp, ror #28
  9c:	00000000 	andeq	r0, r0, r0
  a0:	d8020500 	stmdale	r2, {r8, sl}
  a4:	031fff00 	tsteq	pc, #0, 30
  a8:	30150121 	andscc	r0, r5, r1, lsr #2
  ac:	663d0332 			; <UNDEFINED> instruction: 0x663d0332
  b0:	03251b17 	teqeq	r5, #23552	; 0x5c00
  b4:	6c033c15 	stcvs	12, cr3, [r3], {21}
  b8:	5203312e 	andpl	r3, r3, #-2147483637	; 0x8000000b
  bc:	2e2e032e 	cdpcs	3, 2, cr0, cr14, cr14, {1}
  c0:	212e5503 	teqcs	lr, r3, lsl #10
  c4:	1e78211f 	mrcne	1, 3, r2, cr8, cr15, {0}
  c8:	77211f3f 			; <UNDEFINED> instruction: 0x77211f3f
  cc:	211f213e 	tstcs	pc, lr, lsr r1	; <UNPREDICTABLE>
  d0:	33692f6a 	cmncc	r9, #424	; 0x1a8
  d4:	16033e1e 			; <UNDEFINED> instruction: 0x16033e1e
  d8:	004b244a 	subeq	r2, fp, sl, asr #8
  dc:	06010402 	streq	r0, [r1], -r2, lsl #8
  e0:	3d23062e 	stccc	6, cr0, [r3, #-184]!	; 0xffffff48
  e4:	01040200 	mrseq	r0, R12_usr
  e8:	23062e06 	movwcs	r2, #28166	; 0x6e06
  ec:	034a7503 	movteq	r7, #42243	; 0xa503
  f0:	13ec580c 	mvnne	r5, #12, 16	; 0xc0000
  f4:	6609034c 	strvs	r0, [r9], -ip, asr #6
  f8:	59213221 	stmdbpl	r1!, {r0, r5, r9, ip, sp}
  fc:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
 100:	0a032e7a 	beq	cbaf0 <_start-0x1ff24510>
 104:	232f2f20 	teqcs	pc, #32, 30	; 0x80
 108:	01000602 	tsteq	r0, r2, lsl #12
 10c:	00019e01 	andeq	r9, r1, r1, lsl #28
 110:	3e000200 	cdpcc	2, 0, cr0, cr0, cr0, {0}
 114:	02000000 	andeq	r0, r0, #0
 118:	0d0efb01 	vstreq	d15, [lr, #-4]
 11c:	01010100 	mrseq	r0, (UNDEF: 17)
 120:	00000001 	andeq	r0, r0, r1
 124:	01000001 	tsteq	r0, r1
 128:	75666500 	strbvc	r6, [r6, #-1280]!	; 0x500
 12c:	632e6573 	teqvs	lr, #482344960	; 0x1cc00000
 130:	00000000 	andeq	r0, r0, r0
 134:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
 138:	00682e73 	rsbeq	r2, r8, r3, ror lr
 13c:	6d000000 	stcvs	0, cr0, [r0, #-0]
 140:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
 144:	00000068 	andeq	r0, r0, r8, rrx
 148:	6f6c6300 	svcvs	0x006c6300
 14c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 150:	00000000 	andeq	r0, r0, r0
 154:	02050000 	andeq	r0, r5, #0
 158:	1fff020c 	svcne	0x00ff020c
 15c:	0100ef03 	tsteq	r0, r3, lsl #30
 160:	02003320 	andeq	r3, r0, #32, 6	; 0x80000000
 164:	3c060104 	stfccs	f0, [r6], {4}
 168:	4d3e3306 	ldcmi	3, cr3, [lr, #-24]!	; 0xffffffe8
 16c:	03200b03 	teqeq	r0, #3072	; 0xc00
 170:	232f2e76 	teqcs	pc, #1888	; 0x760
 174:	2f2f1b26 	svccs	0x002f1b26
 178:	232b2324 	teqcs	fp, #36, 6	; 0x90000000
 17c:	2f1d2431 	svccs	0x001d2431
 180:	0d033022 	stceq	0, cr3, [r3, #-136]	; 0xffffff78
 184:	20740320 	rsbscs	r0, r4, r0, lsr #6
 188:	4b22232f 	blmi	888e4c <_start-0x1f7671b4>
 18c:	1f302233 	svcne	0x00302233
 190:	223d2f21 	eorscs	r2, sp, #33, 30	; 0x84
 194:	033c7603 	teqeq	ip, #3145728	; 0x300000
 198:	3a034a54 	bcc	d2af0 <_start-0x1ff1d510>
 19c:	7efb0320 	cdpvc	3, 15, cr0, cr11, cr0, {1}
 1a0:	201703d6 			; <UNDEFINED> instruction: 0x201703d6
 1a4:	2b314f3d 	blcs	c53ea0 <_start-0x1f39c160>
 1a8:	2e510323 	cdpcs	3, 5, cr0, cr1, cr3, {1}
 1ac:	03352d21 	teqeq	r5, #2112	; 0x840
 1b0:	50032e29 	andpl	r2, r3, r9, lsr #28
 1b4:	21252120 	teqcs	r5, r0, lsr #2
 1b8:	21207903 	teqcs	r0, r3, lsl #18
 1bc:	2125211f 	teqcs	r5, pc, lsl r1
 1c0:	211f211f 	tstcs	pc, pc, lsl r1	; <UNPREDICTABLE>
 1c4:	21207903 	teqcs	r0, r3, lsl #18
 1c8:	2125211f 	teqcs	r5, pc, lsl r1
 1cc:	03202903 	teqeq	r0, #49152	; 0xc000
 1d0:	3040200d 	subcc	r2, r0, sp
 1d4:	3c780332 	ldclcc	3, cr0, [r8], #-200	; 0xffffff38
 1d8:	d003284f 	andle	r2, r3, pc, asr #16
 1dc:	1d159000 	ldcne	0, cr9, [r5, #-0]
 1e0:	005a4d2e 	subseq	r4, sl, lr, lsr #26
 1e4:	06010402 	streq	r0, [r1], -r2, lsl #8
 1e8:	2706582e 	strcs	r5, [r6, -lr, lsr #16]
 1ec:	251b3167 	ldrcs	r3, [fp, #-359]	; 0x167
 1f0:	207a032f 	rsbscs	r0, sl, pc, lsr #6
 1f4:	4a7a0326 	bmi	1e80e94 <_start-0x1e16f16c>
 1f8:	30200a03 	eorcc	r0, r0, r3, lsl #20
 1fc:	212d213d 	teqcs	sp, sp, lsr r1
 200:	302f2d2f 	eorcc	r2, pc, pc, lsr #26
 204:	31241f2f 	teqcc	r4, pc, lsr #30
 208:	1e301f21 	cdpne	15, 3, cr1, cr0, cr1, {1}
 20c:	02002121 	andeq	r2, r0, #1073741832	; 0x40000008
 210:	20060104 	andcs	r0, r6, r4, lsl #2
 214:	2f303f06 	svccs	0x00303f06
 218:	4b2f4191 	blmi	bd0864 <_start-0x1f41f79c>
 21c:	3531302f 	ldrcc	r3, [r1, #-47]!	; 0x2f
 220:	39311d31 	ldmdbcc	r1!, {r0, r4, r5, r8, sl, fp, ip}
 224:	0200233f 	andeq	r2, r0, #-67108864	; 0xfc000000
 228:	3c060104 	stfccs	f0, [r6], {4}
 22c:	3d306c06 	ldccc	12, cr6, [r0, #-24]!	; 0xffffffe8
 230:	4f83305b 	svcmi	0x0083305b
 234:	03666503 	cmneq	r6, #12582912	; 0xc00000
 238:	40592e20 	subsmi	r2, r9, r0, lsr #28
 23c:	03200a03 	teqeq	r0, #12288	; 0x3000
 240:	2f212e76 	svccs	0x00212e76
 244:	232f2123 	teqcs	pc, #-1073741816	; 0xc0000008
 248:	213d3031 	teqcs	sp, r1, lsr r0
 24c:	2f1f2249 	svccs	0x001f2249
 250:	261f3d30 			; <UNDEFINED> instruction: 0x261f3d30
 254:	2e790343 	cdpcs	3, 7, cr0, cr9, cr3, {2}
 258:	7a03423d 	bvc	d0b54 <_start-0x1ff1f4ac>
 25c:	3c0a032e 	stccc	3, cr0, [sl], {46}	; 0x2e
 260:	7fba031c 	svcvc	0x00ba031c
 264:	00c3032e 	sbceq	r0, r3, lr, lsr #6
 268:	3d682f2e 	stclcc	15, cr2, [r8, #-184]!	; 0xffffff48
 26c:	222f2131 	eorcs	r2, pc, #1073741836	; 0x4000000c
 270:	222c2284 	eorcs	r2, ip, #132, 4	; 0x40000008
 274:	03232f1f 	teqeq	r3, #31, 30	; 0x7c
 278:	12032e6e 	andne	r2, r3, #1760	; 0x6e0
 27c:	206e032e 	rsbcs	r0, lr, lr, lsr #6
 280:	032e1203 	teqeq	lr, #805306368	; 0x30000000
 284:	5b032e6e 	blpl	cbc44 <_start-0x1ff243bc>
 288:	743f0320 	ldrtvc	r0, [pc], #-800	; 290 <_start-0x1ffefd70>
 28c:	207de303 	rsbscs	lr, sp, r3, lsl #6
 290:	2e029d03 	cdpcs	13, 0, cr9, cr2, cr3, {0}
 294:	21232f21 	teqcs	r3, r1, lsr #30
 298:	da032f2f 	ble	cbf5c <_start-0x1ff240a4>
 29c:	212f207d 	teqcs	pc, sp, ror r0	; <UNPREDICTABLE>
 2a0:	02a50325 	adceq	r0, r5, #-1811939328	; 0x94000000
 2a4:	214b2f4a 	cmpcs	fp, sl, asr #30
 2a8:	09023130 	stmdbeq	r2, {r4, r5, r8, ip, sp}
 2ac:	c6010100 	strgt	r0, [r1], -r0, lsl #2
 2b0:	02000000 	andeq	r0, r0, #0
 2b4:	00004800 	andeq	r4, r0, r0, lsl #16
 2b8:	fb010200 	blx	40ac2 <_start-0x1ffaf53e>
 2bc:	01000d0e 	tsteq	r0, lr, lsl #26
 2c0:	00010101 	andeq	r0, r1, r1, lsl #2
 2c4:	00010000 	andeq	r0, r1, r0
 2c8:	6d000100 	stfvss	f0, [r0, #-0]
 2cc:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
 2d0:	00000063 	andeq	r0, r0, r3, rrx
 2d4:	6f626d00 	svcvs	0x00626d00
 2d8:	00682e78 	rsbeq	r2, r8, r8, ror lr
 2dc:	65000000 	strvs	r0, [r0, #-0]
 2e0:	65737566 	ldrbvs	r7, [r3, #-1382]!	; 0x566
 2e4:	0000682e 	andeq	r6, r0, lr, lsr #16
 2e8:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
 2ec:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 2f0:	00000068 	andeq	r0, r0, r8, rrx
 2f4:	6f6c6300 	svcvs	0x006c6300
 2f8:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 2fc:	00000000 	andeq	r0, r0, r0
 300:	02050000 	andeq	r0, r5, #0
 304:	1fff05ac 	svcne	0x00ff05ac
 308:	03012703 	movweq	r2, #5891	; 0x1703
 30c:	6e032012 	mcrvs	0, 0, r2, cr3, cr2, {0}
 310:	20130320 	andscs	r0, r3, r0, lsr #6
 314:	03206d03 	teqeq	r0, #3, 26	; 0xc0
 318:	77032e13 	smladvc	r3, r3, lr, r2
 31c:	2e0e032e 	cdpcs	3, 0, cr0, cr14, cr14, {1}
 320:	232c2185 	teqcs	ip, #1073741857	; 0x40000021
 324:	232c2124 	teqcs	ip, #36, 2
 328:	232c2124 	teqcs	ip, #36, 2
 32c:	231f1f25 	tstcs	pc, #37, 30	; 0x94
 330:	311f1f25 	tstcc	pc, r5, lsr #30
 334:	50032f23 	andpl	r2, r3, r3, lsr #30
 338:	2e34032e 	cdpcs	3, 3, cr0, cr4, cr14, {1}
 33c:	11032f30 	tstne	r3, r0, lsr pc
 340:	2e6f0320 	cdpcs	3, 6, cr0, cr15, cr0, {1}
 344:	2f2f302f 	svccs	0x002f302f
 348:	09033e2f 	stmdbeq	r3, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 34c:	2e780320 	cdpcs	3, 7, cr0, cr8, cr0, {1}
 350:	02252d32 	eoreq	r2, r5, #3200	; 0xc80
 354:	01010001 	tsteq	r1, r1
 358:	c8020500 	stmdagt	r2, {r8, sl}
 35c:	031fff06 	tsteq	pc, #6, 30
 360:	33010180 	movwcc	r0, #4480	; 0x1180
 364:	4b332f26 	blmi	ccc004 <_start-0x1f323ffc>
 368:	5b292f25 	blpl	a4c004 <_start-0x1f5a3ffc>
 36c:	69035a34 	stmdbvs	r3, {r2, r4, r5, r9, fp, ip, lr}
 370:	201a0320 	andscs	r0, sl, r0, lsr #6
 374:	01000202 	tsteq	r0, r2, lsl #4
 378:	00009301 	andeq	r9, r0, r1, lsl #6
 37c:	28000200 	stmdacs	r0, {r9}
 380:	02000000 	andeq	r0, r0, #0
 384:	0d0efb01 	vstreq	d15, [lr, #-4]
 388:	01010100 	mrseq	r0, (UNDEF: 17)
 38c:	00000001 	andeq	r0, r0, r1
 390:	01000001 	tsteq	r0, r1
 394:	6f626d00 	svcvs	0x00626d00
 398:	00632e78 	rsbeq	r2, r3, r8, ror lr
 39c:	74000000 	strvc	r0, [r0], #-0
 3a0:	73657079 	cmnvc	r5, #121	; 0x79
 3a4:	0000682e 	andeq	r6, r0, lr, lsr #16
 3a8:	00000000 	andeq	r0, r0, r0
 3ac:	06480205 	strbeq	r0, [r8], -r5, lsl #4
 3b0:	20031fff 	strdcs	r1, [r3], -pc	; <UNPREDICTABLE>
 3b4:	02002401 	andeq	r2, r0, #16777216	; 0x1000000
 3b8:	20060104 	andcs	r0, r6, r4, lsl #2
 3bc:	004d2506 	subeq	r2, sp, r6, lsl #10
 3c0:	69020402 	stmdbvs	r2, {r1, sl}
 3c4:	02040200 	andeq	r0, r4, #0, 4
 3c8:	00207003 	eoreq	r7, r0, r3
 3cc:	03020402 	movweq	r0, #9218	; 0x2402
 3d0:	02004a0f 	andeq	r4, r0, #61440	; 0xf000
 3d4:	00210204 	eoreq	r0, r1, r4, lsl #4
 3d8:	1f020402 	svcne	0x00020402
 3dc:	32207303 	eorcc	r7, r0, #201326592	; 0xc000000
 3e0:	3d200e03 	stccc	14, cr0, [r0, #-12]!
 3e4:	0c03233d 	stceq	3, cr2, [r3], {61}	; 0x3d
 3e8:	02002374 	andeq	r2, r0, #116, 6	; 0xd0000001
 3ec:	20060104 	andcs	r0, r6, r4, lsl #2
 3f0:	02002a06 	andeq	r2, r0, #24576	; 0x6000
 3f4:	00440204 	subeq	r0, r4, r4, lsl #4
 3f8:	03020402 	movweq	r0, #9218	; 0x2402
 3fc:	02002078 	andeq	r2, r0, #120	; 0x78
 400:	00360204 	eorseq	r0, r6, r4, lsl #4
 404:	3b010402 	blcc	41414 <_start-0x1ffaebec>
 408:	024b3032 	subeq	r3, fp, #50	; 0x32
 40c:	01010005 	tsteq	r1, r5

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000008c 	andeq	r0, r0, ip, lsl #1
   4:	00000002 	andeq	r0, r0, r2
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	1fff0000 	svcne	0x00ff0000
  14:	1fff00d8 	svcne	0x00ff00d8
  18:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  1c:	00532e74 	subseq	r2, r3, r4, ror lr
  20:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff6c <stack_top+0xe000e85c>
  24:	686a2f65 	stmdavs	sl!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
  28:	4d52412f 	ldfmie	f4, [r2, #-188]	; 0xffffff44
  2c:	5f414441 	svcpl	0x00414441
  30:	78783733 	ldmdavc	r8!, {r0, r1, r4, r5, r8, r9, sl, ip, sp}^
  34:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; ffffff80 <stack_top+0xe000e870>
  38:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0x970
  3c:	7269645f 	rsbvc	r6, r9, #1593835520	; 0x5f000000
  40:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  44:	7572742d 	ldrbvc	r7, [r2, #-1069]!	; 0x42d
  48:	64657473 	strbtvs	r7, [r5], #-1139	; 0x473
  4c:	7269662d 	rsbvc	r6, r9, #47185920	; 0x2d00000
  50:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
  54:	2e312d65 	cdpcs	13, 3, cr2, cr1, cr5, {3}
  58:	72612f32 	rsbvc	r2, r1, #50, 30	; 0xc8
  5c:	72742d6d 	rsbsvc	r2, r4, #6976	; 0x1b40
  60:	65747375 	ldrbvs	r7, [r4, #-885]!	; 0x375
  64:	69662d64 	stmdbvs	r6!, {r2, r5, r6, r8, sl, fp, sp}^
  68:	61776d72 	cmnvs	r7, r2, ror sp
  6c:	312d6572 	teqcc	sp, r2, ror r5
  70:	742f322e 	strtvc	r3, [pc], #-558	; 78 <_start-0x1ffeff88>
  74:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  78:	7074772f 	rsbsvc	r7, r4, pc, lsr #14
  7c:	6d74772f 	ldclvs	7, cr7, [r4, #-188]!	; 0xffffff44
  80:	4e470069 	cdpmi	0, 4, cr0, cr7, cr9, {3}
  84:	53412055 	movtpl	r2, #4181	; 0x1055
  88:	322e3220 	eorcc	r3, lr, #32, 4
  8c:	80010034 	andhi	r0, r1, r4, lsr r0
  90:	0000027a 	andeq	r0, r0, sl, ror r2
  94:	00140002 	andseq	r0, r4, r2
  98:	01040000 	mrseq	r0, (UNDEF: 4)
  9c:	0000012c 	andeq	r0, r0, ip, lsr #2
  a0:	00002101 	andeq	r2, r0, r1, lsl #2
  a4:	0000a900 	andeq	sl, r0, r0, lsl #18
  a8:	ff00d800 			; <UNDEFINED> instruction: 0xff00d800
  ac:	ff020c1f 			; <UNDEFINED> instruction: 0xff020c1f
  b0:	0000621f 	andeq	r6, r0, pc, lsl r2
  b4:	07040200 	streq	r0, [r4, -r0, lsl #4]
  b8:	00000161 	andeq	r0, r0, r1, ror #2
  bc:	38080102 	stmdacc	r8, {r1, r8}
  c0:	02000000 	andeq	r0, r0, #0
  c4:	002f0801 	eoreq	r0, pc, r1, lsl #16
  c8:	02020000 	andeq	r0, r2, #0
  cc:	00013805 	andeq	r3, r1, r5, lsl #16
  d0:	07020200 	streq	r0, [r2, -r0, lsl #4]
  d4:	00000052 	andeq	r0, r0, r2, asr r0
  d8:	69050403 	stmdbvs	r5, {r0, r1, sl}
  dc:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
  e0:	01170508 	tsteq	r7, r8, lsl #10
  e4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  e8:	00015707 	andeq	r5, r1, r7, lsl #14
  ec:	33750400 	cmncc	r5, #0, 8
  f0:	20020032 	andcs	r0, r2, r2, lsr r0
  f4:	00000025 	andeq	r0, r0, r5, lsr #32
  f8:	00007105 	andeq	r7, r0, r5, lsl #2
  fc:	20030400 	andcs	r0, r3, r0, lsl #8
 100:	0000008d 	andeq	r0, r0, sp, lsl #1
 104:	00017906 	andeq	r7, r1, r6, lsl #18
 108:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
 10c:	01000000 	mrseq	r0, (UNDEF: 0)
 110:	00000006 	andeq	r0, r0, r6
 114:	a1060200 	mrsge	r0, LR_usr
 118:	03000000 	movweq	r0, #0
 11c:	0b010700 	bleq	41d24 <_start-0x1ffae2dc>
 120:	01000001 	tsteq	r0, r1
 124:	005d0121 	subseq	r0, sp, r1, lsr #2
 128:	00d80000 	sbcseq	r0, r8, r0
 12c:	00ec1fff 	strdeq	r1, [ip], #255	; 0xff	; <UNPREDICTABLE>
 130:	7d021fff 	stcvc	15, cr1, [r2, #-1020]	; 0xfffffc04
 134:	00c00100 	sbceq	r0, r0, r0, lsl #2
 138:	84080000 	strhi	r0, [r8], #-0
 13c:	01000000 	mrseq	r0, (UNDEF: 0)
 140:	00005d23 	andeq	r5, r0, r3, lsr #26
 144:	00730900 	rsbseq	r0, r3, r0, lsl #18
 148:	1a02000a 	bne	80178 <_start-0x1ff6fe88>
 14c:	009f2539 	addseq	r2, pc, r9, lsr r5	; <UNPREDICTABLE>
 150:	00000809 	andeq	r0, r0, r9, lsl #16
 154:	01320100 	teqeq	r2, r0, lsl #2
 158:	0000005d 	andeq	r0, r0, sp, asr r0
 15c:	00011401 	andeq	r1, r1, r1, lsl #8
 160:	008b0a00 	addeq	r0, fp, r0, lsl #20
 164:	32010000 	andcc	r0, r1, #0
 168:	00000068 	andeq	r0, r0, r8, rrx
 16c:	0000290b 	andeq	r2, r0, fp, lsl #18
 170:	5d340100 	ldfpls	f0, [r4, #-0]
 174:	0b000000 	bleq	17c <_start-0x1ffefe84>
 178:	00000093 	muleq	r0, r3, r0
 17c:	005d3401 	subseq	r3, sp, r1, lsl #8
 180:	140b0000 	strne	r0, [fp], #-0
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	00005d34 	andeq	r5, r0, r4, lsr sp
 18c:	65720c00 	ldrbvs	r0, [r2, #-3072]!	; 0xc00
 190:	35010066 	strcc	r0, [r1, #-102]	; 0x66
 194:	0000005d 	andeq	r0, r0, sp, asr r0
 198:	00003d0b 	andeq	r3, r0, fp, lsl #26
 19c:	5d350100 	ldfpls	f0, [r5, #-0]
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	0065010d 	rsbeq	r0, r5, sp, lsl #2
 1a8:	67010000 	strvs	r0, [r1, -r0]
 1ac:	00005d01 	andeq	r5, r0, r1, lsl #26
 1b0:	ff00ec00 			; <UNDEFINED> instruction: 0xff00ec00
 1b4:	ff01c01f 			; <UNDEFINED> instruction: 0xff01c01f
 1b8:	0000001f 	andeq	r0, r0, pc, lsl r0
 1bc:	01d00100 	bicseq	r0, r0, r0, lsl #2
 1c0:	740e0000 	strvc	r0, [lr], #-0
 1c4:	01006762 	tsteq	r0, r2, ror #14
 1c8:	00005d69 	andeq	r5, r0, r9, ror #26
 1cc:	0f500100 	svceq	0x00500100
 1d0:	00000045 	andeq	r0, r0, r5, asr #32
 1d4:	005d6901 	subseq	r6, sp, r1, lsl #18
 1d8:	00200000 	eoreq	r0, r0, r0
 1dc:	4a0f0000 	bmi	3c01e4 <_start-0x1fc2fe1c>
 1e0:	01000001 	tsteq	r0, r1
 1e4:	00005d69 	andeq	r5, r0, r9, ror #26
 1e8:	00003e00 	andeq	r3, r0, r0, lsl #28
 1ec:	008b0f00 	addeq	r0, fp, r0, lsl #30
 1f0:	6a010000 	bvs	401f8 <_start-0x1ffafe08>
 1f4:	00000068 	andeq	r0, r0, r8, rrx
 1f8:	0000005c 	andeq	r0, r0, ip, asr r0
 1fc:	0000c010 	andeq	ip, r0, r0, lsl r0
 200:	ff010200 			; <UNDEFINED> instruction: 0xff010200
 204:	0000001f 	andeq	r0, r0, pc, lsl r0
 208:	c5740100 	ldrbgt	r0, [r4, #-256]!	; 0x100
 20c:	11000001 	tstne	r0, r1
 210:	000000d1 	ldrdeq	r0, [r0], -r1
 214:	0000005c 	andeq	r0, r0, ip, asr r0
 218:	00001812 	andeq	r1, r0, r2, lsl r8
 21c:	00dc1300 	sbcseq	r1, ip, r0, lsl #6
 220:	006f0000 	rsbeq	r0, pc, r0
 224:	e7130000 	ldr	r0, [r3, -r0]
 228:	82000000 	andhi	r0, r0, #0
 22c:	13000000 	movwne	r0, #0
 230:	000000f2 	strdeq	r0, [r0], -r2
 234:	00000095 	muleq	r0, r5, r0
 238:	0000fd13 	andeq	pc, r0, r3, lsl sp	; <UNPREDICTABLE>
 23c:	0000c200 	andeq	ip, r0, r0, lsl #4
 240:	01081300 	mrseq	r1, (UNDEF: 56)
 244:	00d50000 	sbcseq	r0, r5, r0
 248:	06140000 	ldreq	r0, [r4], -r0
 24c:	8d1fff01 	ldchi	15, cr15, [pc, #-4]	; 250 <_start-0x1ffefdb0>
 250:	00000000 	andeq	r0, r0, r0
 254:	00fe1500 	rscseq	r1, lr, r0, lsl #10
 258:	8d011fff 	stchi	15, cr1, [r1, #-1020]	; 0xfffffc04
 25c:	00000000 	andeq	r0, r0, r0
 260:	01420116 	cmpeq	r2, r6, lsl r1
 264:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
 268:	ff01c001 			; <UNDEFINED> instruction: 0xff01c001
 26c:	ff01d41f 			; <UNDEFINED> instruction: 0xff01d41f
 270:	007d021f 	rsbseq	r0, sp, pc, lsl r2
 274:	00020801 	andeq	r0, r2, r1, lsl #16
 278:	01421700 	cmpeq	r2, r0, lsl #14
 27c:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
 280:	0000005d 	andeq	r0, r0, sp, asr r0
 284:	0000012a 	andeq	r0, r0, sl, lsr #2
 288:	00001c0f 	andeq	r1, r0, pc, lsl #24
 28c:	5d8b0100 	stfpls	f0, [fp]
 290:	4b000000 	blmi	298 <_start-0x1ffefd68>
 294:	00000001 	andeq	r0, r0, r1
 298:	016e010d 	cmneq	lr, sp, lsl #2
 29c:	95010000 	strls	r0, [r1, #-0]
 2a0:	00005d01 	andeq	r5, r0, r1, lsl #26
 2a4:	ff01d400 			; <UNDEFINED> instruction: 0xff01d400
 2a8:	ff020c1f 			; <UNDEFINED> instruction: 0xff020c1f
 2ac:	0001751f 	andeq	r7, r1, pc, lsl r5
 2b0:	025b0100 	subseq	r0, fp, #0, 2
 2b4:	690f0000 	stmdbvs	pc, {}	; <UNPREDICTABLE>
 2b8:	01000000 	mrseq	r0, (UNDEF: 0)
 2bc:	00005d97 	muleq	r0, r7, sp
 2c0:	00019500 	andeq	r9, r1, r0, lsl #10
 2c4:	02410f00 	subeq	r0, r1, #0, 30
 2c8:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
 2cc:	0000005d 	andeq	r0, r0, sp, asr r0
 2d0:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
 2d4:	00008408 	andeq	r8, r0, r8, lsl #8
 2d8:	5d990100 	ldfpls	f0, [r9]
 2dc:	01000000 	mrseq	r0, (UNDEF: 0)
 2e0:	01da1452 	bicseq	r1, sl, r2, asr r4
 2e4:	01141fff 			; <UNDEFINED> instruction: 0x01141fff
 2e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 2ec:	00000125 	andeq	r0, r0, r5, lsr #2
 2f0:	005d1a01 	subseq	r1, sp, r1, lsl #20
 2f4:	03050000 	movweq	r0, #20480	; 0x5000
 2f8:	1fff070c 	svcne	0x00ff070c
 2fc:	00007c08 	andeq	r7, r0, r8, lsl #24
 300:	5d1a0100 	ldfpls	f0, [sl, #-0]
 304:	05000000 	streq	r0, [r0, #-0]
 308:	ff070803 			; <UNDEFINED> instruction: 0xff070803
 30c:	04ec001f 	strbteq	r0, [ip], #31
 310:	00020000 	andeq	r0, r2, r0
 314:	0000016e 	andeq	r0, r0, lr, ror #2
 318:	012c0104 	teqeq	ip, r4, lsl #2
 31c:	06010000 	streq	r0, [r1], -r0
 320:	a9000002 	stmdbge	r0, {r1}
 324:	0c000000 	stceq	0, cr0, [r0], {-0}
 328:	ac1fff02 	ldcge	15, cr15, [pc], {2}
 32c:	0d1fff05 	ldceq	15, cr15, [pc, #-20]	; 320 <_start-0x1ffefce0>
 330:	02000001 	andeq	r0, r0, #1
 334:	00380801 	eorseq	r0, r8, r1, lsl #16
 338:	01020000 	mrseq	r0, (UNDEF: 2)
 33c:	00002f08 	andeq	r2, r0, r8, lsl #30
 340:	05020200 	streq	r0, [r2, #-512]	; 0x200
 344:	00000138 	andeq	r0, r0, r8, lsr r1
 348:	52070202 	andpl	r0, r7, #536870912	; 0x20000000
 34c:	03000000 	movweq	r0, #0
 350:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 354:	04020074 	streq	r0, [r2], #-116	; 0x74
 358:	00016107 	andeq	r6, r1, r7, lsl #2
 35c:	05080200 	streq	r0, [r8, #-512]	; 0x200
 360:	00000117 	andeq	r0, r0, r7, lsl r1
 364:	57070802 	strpl	r0, [r7, -r2, lsl #16]
 368:	04000001 	streq	r0, [r0], #-1
 36c:	00323375 	eorseq	r3, r2, r5, ror r3
 370:	00482002 	subeq	r2, r8, r2
 374:	3c050000 	stccc	0, cr0, [r5], {-0}
 378:	04000002 	streq	r0, [r0], #-2
 37c:	00993003 	addseq	r3, r9, r3
 380:	ba060000 	blt	180388 <_start-0x1fe6fc78>
 384:	00000001 	andeq	r0, r0, r1
 388:	00025106 	andeq	r5, r2, r6, lsl #2
 38c:	62060100 	andvs	r0, r6, #0, 2
 390:	02000002 	andeq	r0, r0, #2
 394:	0001f106 	andeq	pc, r1, r6, lsl #2
 398:	81060300 	mrshi	r0, LR_und
 39c:	04000001 	streq	r0, [r0], #-1
 3a0:	00020e06 	andeq	r0, r2, r6, lsl #28
 3a4:	07000500 	streq	r0, [r0, -r0, lsl #10]
 3a8:	000001a7 	andeq	r0, r0, r7, lsr #3
 3ac:	5d012b01 	vstrpl	d2, [r1, #-4]
 3b0:	01000000 	mrseq	r0, (UNDEF: 0)
 3b4:	000000e0 	andeq	r0, r0, r0, ror #1
 3b8:	0001b308 	andeq	fp, r1, r8, lsl #6
 3bc:	5d2b0100 	stfpls	f0, [fp, #-0]
 3c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 3c4:	00000241 	andeq	r0, r0, r1, asr #4
 3c8:	005d2d01 	subseq	r2, sp, r1, lsl #26
 3cc:	84090000 	strhi	r0, [r9], #-0
 3d0:	01000000 	mrseq	r0, (UNDEF: 0)
 3d4:	00005d2e 	andeq	r5, r0, lr, lsr #26
 3d8:	006e0a00 	rsbeq	r0, lr, r0, lsl #20
 3dc:	005d2f01 	subseq	r2, sp, r1, lsl #30
 3e0:	23090000 	movwcs	r0, #36864	; 0x9000
 3e4:	01000002 	tsteq	r0, r2
 3e8:	00005d2f 	andeq	r5, r0, pc, lsr #26
 3ec:	ca0b0000 	bgt	2c03f4 <_start-0x1fd2fc0c>
 3f0:	01000001 	tsteq	r0, r1
 3f4:	005d016f 	subseq	r0, sp, pc, ror #2
 3f8:	020c0000 	andeq	r0, ip, #0
 3fc:	02b81fff 	adcseq	r1, r8, #1020	; 0x3fc
 400:	01ea1fff 	strdeq	r1, [sl, #255]!	; 0xff
 404:	a6010000 	strge	r0, [r1], -r0
 408:	0c000001 	stceq	0, cr0, [r0], {1}
 40c:	00776f72 	rsbseq	r6, r7, r2, ror pc
 410:	005d6f01 	subseq	r6, sp, r1, lsl #30
 414:	020a0000 	andeq	r0, sl, #0
 418:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
 41c:	01006273 	tsteq	r0, r3, ror r2
 420:	0001a66f 	andeq	sl, r1, pc, ror #12
 424:	00024c00 	andeq	r4, r2, r0, lsl #24
 428:	736c0c00 	cmnvc	ip, #0, 24
 42c:	6f010062 	svcvs	0x00010062
 430:	000001a6 	andeq	r0, r0, r6, lsr #3
 434:	00000275 	andeq	r0, r0, r5, ror r2
 438:	0000840d 	andeq	r8, r0, sp, lsl #8
 43c:	5d710100 	ldfple	f0, [r1, #-0]
 440:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
 444:	0d000002 	stceq	0, cr0, [r0, #-8]
 448:	00000223 	andeq	r0, r0, r3, lsr #4
 44c:	005d7201 	subseq	r7, sp, r1, lsl #4
 450:	031c0000 	tsteq	ip, #0
 454:	410d0000 	mrsmi	r0, (UNDEF: 13)
 458:	01000002 	tsteq	r0, r2
 45c:	00005d73 	andeq	r5, r0, r3, ror sp
 460:	00033000 	andeq	r3, r3, r0
 464:	022a0e00 	eoreq	r0, sl, #0, 28
 468:	04df1fff 	ldrbeq	r1, [pc], #4095	; 470 <_start-0x1ffefb90>
 46c:	016c0000 	cmneq	ip, r0
 470:	010f0000 	mrseq	r0, CPSR
 474:	2c0a0350 	stccs	3, cr0, [sl], {80}	; 0x50
 478:	500e0001 	andpl	r0, lr, r1
 47c:	df1fff02 	svcle	0x001fff02
 480:	81000004 	tsthi	r0, r4
 484:	0f000001 	svceq	0x00000001
 488:	0a035001 	beq	d4494 <_start-0x1ff1bb6c>
 48c:	0e00012c 	adfeqsp	f0, f0, #4.0
 490:	1fff025e 	svcne	0x00ff025e
 494:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 498:	00000195 	muleq	r0, r5, r1
 49c:	0250010f 	subseq	r0, r0, #-1073741821	; 0xc0000003
 4a0:	1000c808 	andne	ip, r0, r8, lsl #16
 4a4:	1fff0292 	svcne	0x00ff0292
 4a8:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 4ac:	0250010f 	subseq	r0, r0, #-1073741821	; 0xc0000003
 4b0:	00006408 	andeq	r6, r0, r8, lsl #8
 4b4:	005d0411 	subseq	r0, sp, r1, lsl r4
 4b8:	30120000 	andscc	r0, r2, r0
 4bc:	01000002 	tsteq	r0, r2
 4c0:	1203011a 	andne	r0, r3, #-2147483642	; 0x80000006
 4c4:	0000022b 	andeq	r0, r0, fp, lsr #4
 4c8:	03012001 	movweq	r2, #4097	; 0x1001
 4cc:	00009913 	andeq	r9, r0, r3, lsl r9
 4d0:	ff02b800 			; <UNDEFINED> instruction: 0xff02b800
 4d4:	ff03401f 			; <UNDEFINED> instruction: 0xff03401f
 4d8:	00035c1f 	andeq	r5, r3, pc, lsl ip
 4dc:	02b90100 	adcseq	r0, r9, #0, 2
 4e0:	b5140000 	ldrlt	r0, [r4, #-0]
 4e4:	7c000000 	stcvc	0, cr0, [r0], {-0}
 4e8:	14000003 	strne	r0, [r0], #-3
 4ec:	000000c0 	andeq	r0, r0, r0, asr #1
 4f0:	0000039b 	muleq	r0, fp, r3
 4f4:	0000cb14 	andeq	ip, r0, r4, lsl fp
 4f8:	0003b400 	andeq	fp, r3, r0, lsl #8
 4fc:	00d41400 	sbcseq	r1, r4, r0, lsl #8
 500:	03c80000 	biceq	r0, r8, #0
 504:	aa150000 	bge	54050c <_start-0x1faafaf4>
 508:	16000000 	strne	r0, [r0], -r0
 50c:	000001ac 	andeq	r0, r0, ip, lsr #3
 510:	1fff02d6 	svcne	0x00ff02d6
 514:	00000030 	andeq	r0, r0, r0, lsr r0
 518:	b5164d01 	ldrlt	r4, [r6, #-3329]	; 0xd01
 51c:	e0000001 	and	r0, r0, r1
 520:	481fff02 	ldmdami	pc, {r1, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
 524:	01000000 	mrseq	r0, (UNDEF: 0)
 528:	01ac174e 			; <UNDEFINED> instruction: 0x01ac174e
 52c:	02ee0000 	rsceq	r0, lr, #0
 530:	02f21fff 	rscseq	r1, r2, #1020	; 0x3fc
 534:	4f011fff 	svcmi	0x00011fff
 538:	0001ac17 	andeq	sl, r1, r7, lsl ip
 53c:	ff02f200 			; <UNDEFINED> instruction: 0xff02f200
 540:	ff02f61f 			; <UNDEFINED> instruction: 0xff02f61f
 544:	1750011f 	smmlane	r0, pc, r1, r0	; <UNPREDICTABLE>
 548:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
 54c:	1fff02f6 	svcne	0x00ff02f6
 550:	1fff02fa 	svcne	0x00ff02fa
 554:	b5175101 	ldrlt	r5, [r7, #-257]	; 0x101
 558:	fa000001 	blx	564 <_start-0x1ffefa9c>
 55c:	fe1fff02 	cdp2	15, 1, cr15, cr15, cr2, {0}
 560:	011fff02 	tsteq	pc, r2, lsl #30
 564:	01b51752 			; <UNDEFINED> instruction: 0x01b51752
 568:	02fe0000 	rscseq	r0, lr, #0
 56c:	03021fff 	movweq	r1, #12287	; 0x2fff
 570:	53011fff 	movwpl	r1, #8191	; 0x1fff
 574:	0001ac17 	andeq	sl, r1, r7, lsl ip
 578:	ff030200 			; <UNDEFINED> instruction: 0xff030200
 57c:	ff03061f 			; <UNDEFINED> instruction: 0xff03061f
 580:	1754011f 	smmlane	r4, pc, r1, r0	; <UNPREDICTABLE>
 584:	000001ac 	andeq	r0, r0, ip, lsr #3
 588:	1fff0306 	svcne	0x00ff0306
 58c:	1fff030a 	svcne	0x00ff030a
 590:	b5175501 	ldrlt	r5, [r7, #-1281]	; 0x501
 594:	0a000001 	beq	5a0 <_start-0x1ffefa60>
 598:	0e1fff03 	cdpeq	15, 1, cr15, cr15, cr3, {0}
 59c:	011fff03 	tsteq	pc, r3, lsl #30
 5a0:	02c80e56 	sbceq	r0, r8, #1376	; 0x560
 5a4:	04df1fff 	ldrbeq	r1, [pc], #4095	; 5ac <_start-0x1ffefa54>
 5a8:	02a80000 	adceq	r0, r8, #0
 5ac:	010f0000 	mrseq	r0, CPSR
 5b0:	2c0a0350 	stccs	3, cr0, [sl], {80}	; 0x50
 5b4:	24100001 	ldrcs	r0, [r0], #-1
 5b8:	df1fff03 	svcle	0x001fff03
 5bc:	0f000004 	svceq	0x00000004
 5c0:	08025001 	stmdaeq	r2, {r0, ip, lr}
 5c4:	18000064 	stmdane	r0, {r2, r5, r6}
 5c8:	0001e601 	andeq	lr, r1, r1, lsl #12
 5cc:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
 5d0:	0000005d 	andeq	r0, r0, sp, asr r0
 5d4:	1fff0340 	svcne	0x00ff0340
 5d8:	1fff040e 	svcne	0x00ff040e
 5dc:	000003dc 	ldrdeq	r0, [r0], -ip
 5e0:	00038601 	andeq	r8, r3, r1, lsl #12
 5e4:	028a1900 	addeq	r1, sl, #0, 18
 5e8:	b7010000 	strlt	r0, [r1, -r0]
 5ec:	0000005d 	andeq	r0, r0, sp, asr r0
 5f0:	000003fc 	strdeq	r0, [r0], -ip
 5f4:	776f720c 	strbvc	r7, [pc, -ip, lsl #4]!
 5f8:	5db70100 	ldfpls	f0, [r7]
 5fc:	41000000 	mrsmi	r0, (UNDEF: 0)
 600:	19000004 	stmdbne	r0, {r2}
 604:	00000235 	andeq	r0, r0, r5, lsr r2
 608:	005db701 	subseq	fp, sp, r1, lsl #14
 60c:	045f0000 	ldrbeq	r0, [pc], #-0	; 614 <_start-0x1ffef9ec>
 610:	ab190000 	blge	640618 <_start-0x1f9af9e8>
 614:	01000002 	tsteq	r0, r2
 618:	0001a6b7 			; <UNDEFINED> instruction: 0x0001a6b7
 61c:	0004ca00 	andeq	ip, r4, r0, lsl #20
 620:	736c1a00 	cmnvc	ip, #0, 20
 624:	b9010062 	stmdblt	r1, {r1, r5, r6}
 628:	0000005d 	andeq	r0, r0, sp, asr r0
 62c:	1b589102 	blne	1624a3c <_start-0x1e9cb5c4>
 630:	0062736d 	rsbeq	r7, r2, sp, ror #6
 634:	005db901 	subseq	fp, sp, r1, lsl #18
 638:	04e80000 	strbteq	r0, [r8], #0
 63c:	a10d0000 	mrsge	r0, (UNDEF: 13)
 640:	01000001 	tsteq	r0, r1
 644:	00005db9 			; <UNDEFINED> instruction: 0x00005db9
 648:	00050700 	andeq	r0, r5, r0, lsl #14
 64c:	02410d00 	subeq	r0, r1, #0, 26
 650:	ba010000 	blt	40658 <_start-0x1ffaf9a8>
 654:	0000005d 	andeq	r0, r0, sp, asr r0
 658:	0000051a 	andeq	r0, r0, sl, lsl r5
 65c:	0001e01c 	andeq	lr, r1, ip, lsl r0
 660:	5dbb0100 	ldfpls	f0, [fp]
 664:	01000000 	mrseq	r0, (UNDEF: 0)
 668:	021a1d5a 	andseq	r1, sl, #5760	; 0x1680
 66c:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
 670:	1fff03f2 	svcne	0x00ff03f2
 674:	ff037410 			; <UNDEFINED> instruction: 0xff037410
 678:	0000e01f 	andeq	lr, r0, pc, lsl r0
 67c:	52010f00 	andpl	r0, r1, #0, 30
 680:	0f589102 	svceq	0x00589102
 684:	91025101 	tstls	r2, r1, lsl #2
 688:	50010f5c 	andpl	r0, r1, ip, asr pc
 68c:	79007705 	stmdbvc	r0, {r0, r2, r8, r9, sl, ip, sp, lr}
 690:	00002200 	andeq	r2, r0, r0, lsl #4
 694:	01950118 	orrseq	r0, r5, r8, lsl r1
 698:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
 69c:	00005d01 	andeq	r5, r0, r1, lsl #26
 6a0:	ff040e00 			; <UNDEFINED> instruction: 0xff040e00
 6a4:	ff05ac1f 			; <UNDEFINED> instruction: 0xff05ac1f
 6a8:	00054f1f 	andeq	r4, r5, pc, lsl pc
 6ac:	04df0100 	ldrbeq	r0, [pc], #256	; 6b4 <_start-0x1ffef94c>
 6b0:	8a190000 	bhi	6406b8 <_start-0x1f9af948>
 6b4:	01000002 	tsteq	r0, r2
 6b8:	00005df7 	strdeq	r5, [r0], -r7
 6bc:	00057c00 	andeq	r7, r5, r0, lsl #24
 6c0:	6f720c00 	svcvs	0x00720c00
 6c4:	f7010077 			; <UNDEFINED> instruction: 0xf7010077
 6c8:	0000005d 	andeq	r0, r0, sp, asr r0
 6cc:	0000059a 	muleq	r0, sl, r5
 6d0:	00023519 	andeq	r3, r2, r9, lsl r5
 6d4:	5df70100 	ldfple	f0, [r7]
 6d8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 6dc:	19000005 	stmdbne	r0, {r0, r2}
 6e0:	000002ab 	andeq	r0, r0, fp, lsr #5
 6e4:	01a6f701 			; <UNDEFINED> instruction: 0x01a6f701
 6e8:	05ec0000 	strbeq	r0, [ip, #0]!
 6ec:	6c1a0000 	ldcvs	0, cr0, [sl], {-0}
 6f0:	01006273 	tsteq	r0, r3, ror r2
 6f4:	00005df9 	strdeq	r5, [r0], -r9
 6f8:	50910200 	addspl	r0, r1, r0, lsl #4
 6fc:	62736d1a 	rsbsvs	r6, r3, #1664	; 0x680
 700:	5df90100 	ldfple	f0, [r9]
 704:	02000000 	andeq	r0, r0, #0
 708:	a10d5491 			; <UNDEFINED> instruction: 0xa10d5491
 70c:	01000001 	tsteq	r0, r1
 710:	00005df9 	strdeq	r5, [r0], -r9
 714:	00060a00 	andeq	r0, r6, r0, lsl #20
 718:	6f631b00 	svcvs	0x00631b00
 71c:	f901006c 			; <UNDEFINED> instruction: 0xf901006c
 720:	0000005d 	andeq	r0, r0, sp, asr r0
 724:	0000061d 	andeq	r0, r0, sp, lsl r6
 728:	0002410d 	andeq	r4, r2, sp, lsl #2
 72c:	5dfa0100 	ldfple	f0, [sl]
 730:	3c000000 	stccc	0, cr0, [r0], {-0}
 734:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
 738:	000001e0 	andeq	r0, r0, r0, ror #3
 73c:	005dfb01 	subseq	pc, sp, r1, lsl #22
 740:	067c0000 	ldrbteq	r0, [ip], -r0
 744:	840d0000 	strhi	r0, [sp], #-0
 748:	01000000 	mrseq	r0, (UNDEF: 0)
 74c:	00005dfc 	strdeq	r5, [r0], -ip
 750:	0006b200 	andeq	fp, r6, r0, lsl #4
 754:	02481e00 	subeq	r1, r8, #0, 28
 758:	61010000 	mrsvs	r0, (UNDEF: 1)
 75c:	ff058401 			; <UNDEFINED> instruction: 0xff058401
 760:	00991f1f 	addseq	r1, r9, pc, lsl pc
 764:	055c0000 	ldrbeq	r0, [ip, #-0]
 768:	00601fff 	strdeq	r1, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>
 76c:	5f010000 	svcpl	0x00010000
 770:	00048f01 	andeq	r8, r4, r1, lsl #30
 774:	00aa2000 	adceq	r2, sl, r0
 778:	06fe0000 	ldrbteq	r0, [lr], r0
 77c:	78210000 	stmdavc	r1!, {}	; <UNPREDICTABLE>
 780:	14000000 	strne	r0, [r0], #-0
 784:	000000b5 	strheq	r0, [r0], -r5
 788:	000006fe 	strdeq	r0, [r0], -lr
 78c:	0000c022 	andeq	ip, r0, r2, lsr #32
 790:	00cb2200 	sbceq	r2, fp, r0, lsl #4
 794:	d4220000 	strtle	r0, [r2], #-0
 798:	00000000 	andeq	r0, r0, r0
 79c:	04682300 	strbteq	r2, [r8], #-768	; 0x300
 7a0:	01be1fff 			; <UNDEFINED> instruction: 0x01be1fff
 7a4:	820e0000 	andhi	r0, lr, #0
 7a8:	e01fff04 	ands	pc, pc, r4, lsl #30
 7ac:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 7b0:	0f000004 	svceq	0x00000004
 7b4:	91025201 	tstls	r2, r1, lsl #4
 7b8:	51010f50 	tstpl	r1, r0, asr pc
 7bc:	0f549102 	svceq	0x00549102
 7c0:	7b025001 	blvc	947cc <_start-0x1ff5b834>
 7c4:	a20e0000 	andge	r0, lr, #0
 7c8:	df1fff04 	svcle	0x001fff04
 7cc:	cd000004 	stcgt	0, cr0, [r0, #-16]
 7d0:	0f000004 	svceq	0x00000004
 7d4:	0a035001 	beq	d47e0 <_start-0x1ff1b820>
 7d8:	100001f4 	strdne	r0, [r0], -r4
 7dc:	1fff0528 	svcne	0x00ff0528
 7e0:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 7e4:	0350010f 	cmpeq	r0, #-1073741821	; 0xc0000003
 7e8:	0032c80a 	eorseq	ip, r2, sl, lsl #16
 7ec:	42012400 	andmi	r2, r1, #0, 8
 7f0:	04000001 	streq	r0, [r0], #-1
 7f4:	2501012b 	strcs	r0, [r1, #-299]	; 0x12b
 7f8:	0000005d 	andeq	r0, r0, sp, asr r0
 7fc:	036e0000 	cmneq	lr, #0
 800:	00020000 	andeq	r0, r2, r0
 804:	00000368 	andeq	r0, r0, r8, ror #6
 808:	012c0104 	teqeq	ip, r4, lsl #2
 80c:	2b010000 	blcs	40814 <_start-0x1ffaf7ec>
 810:	a9000003 	stmdbge	r0, {r0, r1}
 814:	90000000 	andls	r0, r0, r0
	...
 820:	af000000 	svcge	0x00000000
 824:	02000002 	andeq	r0, r0, #2
 828:	00380801 	eorseq	r0, r8, r1, lsl #16
 82c:	01020000 	mrseq	r0, (UNDEF: 2)
 830:	00002f08 	andeq	r2, r0, r8, lsl #30
 834:	05020200 	streq	r0, [r2, #-512]	; 0x200
 838:	00000138 	andeq	r0, r0, r8, lsr r1
 83c:	52070202 	andpl	r0, r7, #536870912	; 0x20000000
 840:	03000000 	movweq	r0, #0
 844:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 848:	04020074 	streq	r0, [r2], #-116	; 0x74
 84c:	00016107 	andeq	r6, r1, r7, lsl #2
 850:	05080200 	streq	r0, [r8, #-512]	; 0x200
 854:	00000117 	andeq	r0, r0, r7, lsl r1
 858:	57070802 	strpl	r0, [r7, -r2, lsl #16]
 85c:	04000001 	streq	r0, [r0], #-1
 860:	00323375 	eorseq	r3, r2, r5, ror r3
 864:	004c2004 	subeq	r2, ip, r4
 868:	83050000 	movwhi	r0, #20480	; 0x5000
 86c:	04000002 	streq	r0, [r0], #-2
 870:	009d2102 	addseq	r2, sp, r2, lsl #2
 874:	1f060000 	svcne	0x00060000
 878:	01000003 	tsteq	r0, r3
 87c:	00034f06 	andeq	r4, r3, r6, lsl #30
 880:	38060200 	stmdacc	r6, {r9}
 884:	03000003 	movweq	r0, #3
 888:	0002b006 	andeq	fp, r2, r6
 88c:	8f060400 	svchi	0x00060400
 890:	05000002 	streq	r0, [r0, #-2]
 894:	0002be06 	andeq	fp, r2, r6, lsl #28
 898:	05000600 	streq	r0, [r0, #-1536]	; 0x600
 89c:	0000030e 	andeq	r0, r0, lr, lsl #6
 8a0:	bc2a0204 	sfmlt	f0, 4, [sl], #-16
 8a4:	06000000 	streq	r0, [r0], -r0
 8a8:	00000272 	andeq	r0, r0, r2, ror r2
 8ac:	029c0601 	addseq	r0, ip, #1048576	; 0x100000
 8b0:	06020000 	streq	r0, [r2], -r0
 8b4:	00000345 	andeq	r0, r0, r5, asr #6
 8b8:	3c050003 	stccc	0, cr0, [r5], {3}
 8bc:	04000002 	streq	r0, [r0], #-2
 8c0:	00ed3002 	rsceq	r3, sp, r2
 8c4:	ba060000 	blt	1808cc <_start-0x1fe6f734>
 8c8:	00000001 	andeq	r0, r0, r1
 8cc:	00025106 	andeq	r5, r2, r6, lsl #2
 8d0:	62060100 	andvs	r0, r6, #0, 2
 8d4:	02000002 	andeq	r0, r0, #2
 8d8:	0001f106 	andeq	pc, r1, r6, lsl #2
 8dc:	81060300 	mrshi	r0, LR_und
 8e0:	04000001 	streq	r0, [r0], #-1
 8e4:	00020e06 	andeq	r0, r2, r6, lsl #28
 8e8:	07000500 	streq	r0, [r0, -r0, lsl #10]
 8ec:	000002e0 	andeq	r0, r0, r0, ror #5
 8f0:	01011d01 	tsteq	r1, r1, lsl #26
 8f4:	00000106 	andeq	r0, r0, r6, lsl #2
 8f8:	00030408 	andeq	r0, r3, r8, lsl #8
 8fc:	451d0100 	ldrmi	r0, [sp, #-256]	; 0x100
 900:	00000000 	andeq	r0, r0, r0
 904:	02ca0109 	sbceq	r0, sl, #1073741826	; 0x40000002
 908:	27010000 	strcs	r0, [r1, -r0]
 90c:	00006101 	andeq	r6, r0, r1, lsl #2
 910:	ff05ac00 			; <UNDEFINED> instruction: 0xff05ac00
 914:	ff06461f 			; <UNDEFINED> instruction: 0xff06461f
 918:	0007121f 	andeq	r1, r7, pc, lsl r2
 91c:	01d60100 	bicseq	r0, r6, r0, lsl #2
 920:	630a0000 	movwvs	r0, #40960	; 0xa000
 924:	0100646d 	tsteq	r0, sp, ror #8
 928:	00006127 	andeq	r6, r0, r7, lsr #2
 92c:	00073200 	andeq	r3, r7, r0, lsl #4
 930:	02ab0b00 	adceq	r0, fp, #0, 22
 934:	27010000 	strcs	r0, [r1, -r0]
 938:	000001d6 	ldrdeq	r0, [r0], -r6
 93c:	0000075e 	andeq	r0, r0, lr, asr r7
 940:	00027d0b 	andeq	r7, r2, fp, lsl #26
 944:	d6270100 	strtle	r0, [r7], -r0, lsl #2
 948:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
 94c:	0c000007 	stceq	0, cr0, [r0], {7}
 950:	00000241 	andeq	r0, r0, r1, asr #4
 954:	00612901 	rsbeq	r2, r1, r1, lsl #18
 958:	0d020000 	stceq	0, cr0, [r2, #-0]
 95c:	000002d6 	ldrdeq	r0, [r0], -r6
 960:	006c2a01 	rsbeq	r2, ip, r1, lsl #20
 964:	07cc0000 	strbeq	r0, [ip, r0]
 968:	6f0e0000 	svcvs	0x000e0000
 96c:	2b010070 	blcs	40b34 <_start-0x1ffaf4cc>
 970:	0000009d 	muleq	r0, sp, r0
 974:	00000802 	andeq	r0, r0, r2, lsl #16
 978:	776f720e 	strbvc	r7, [pc, -lr, lsl #4]!
 97c:	612c0100 	teqvs	ip, r0, lsl #2
 980:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 984:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
 988:	0000028a 	andeq	r0, r0, sl, lsl #5
 98c:	00612d01 	rsbeq	r2, r1, r1, lsl #26
 990:	08670000 	stmdaeq	r7!, {}^	; <UNPREDICTABLE>
 994:	350d0000 	strcc	r0, [sp, #-0]
 998:	01000002 	tsteq	r0, r2
 99c:	0000612e 	andeq	r6, r0, lr, lsr #2
 9a0:	0008d000 	andeq	sp, r8, r0
 9a4:	02a80d00 	adceq	r0, r8, #0, 26
 9a8:	2f010000 	svccs	0x00010000
 9ac:	000001d6 	ldrdeq	r0, [r0], -r6
 9b0:	00000926 	andeq	r0, r0, r6, lsr #18
 9b4:	ff061e0f 			; <UNDEFINED> instruction: 0xff061e0f
 9b8:	02de011f 	sbcseq	r0, lr, #-1073741817	; 0xc0000007
 9bc:	01cb0000 	biceq	r0, fp, r0
 9c0:	01100000 	tsteq	r0, r0
 9c4:	00740253 	rsbseq	r0, r4, r3, asr r2
 9c8:	063e1100 	ldrteq	r1, [lr], -r0, lsl #2
 9cc:	05011fff 	streq	r1, [r1, #-4095]	; 0xfff
 9d0:	00000003 	andeq	r0, r0, r3
 9d4:	00610412 	rsbeq	r0, r1, r2, lsl r4
 9d8:	01090000 	mrseq	r0, (UNDEF: 9)
 9dc:	000002db 	ldrdeq	r0, [r0], -fp
 9e0:	45018001 	strmi	r8, [r1, #-1]
 9e4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
 9e8:	081fff06 	ldmdaeq	pc, {r1, r2, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
 9ec:	911fff07 	tstls	pc, r7, lsl #30
 9f0:	01000009 	tsteq	r0, r9
 9f4:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
 9f8:	0003040b 	andeq	r0, r3, fp, lsl #8
 9fc:	45800100 	strmi	r0, [r0, #256]	; 0x100
 a00:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
 a04:	0b000009 	bleq	a30 <_start-0x1ffef5d0>
 a08:	00000332 	andeq	r0, r0, r2, lsr r3
 a0c:	02bb8001 	adcseq	r8, fp, #1
 a10:	09f80000 	ldmibeq	r8!, {}^	; <UNPREDICTABLE>
 a14:	630e0000 	movwvs	r0, #57344	; 0xe000
 a18:	0100646d 	tsteq	r0, sp, ror #8
 a1c:	00006182 	andeq	r6, r0, r2, lsl #3
 a20:	000a3200 	andeq	r3, sl, r0, lsl #4
 a24:	02ab1300 	adceq	r1, fp, #0, 6
 a28:	82010000 	andhi	r0, r1, #0
 a2c:	000002c7 	andeq	r0, r0, r7, asr #5
 a30:	7fb89103 	svcvc	0x00b89103
 a34:	0002410d 	andeq	r4, r2, sp, lsl #2
 a38:	61830100 	orrvs	r0, r3, r0, lsl #2
 a3c:	47000000 	strmi	r0, [r0, -r0]
 a40:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
 a44:	0000027d 	andeq	r0, r0, sp, ror r2
 a48:	00618301 	rsbeq	r8, r1, r1, lsl #6
 a4c:	0a700000 	beq	1c00a54 <_start-0x1e3ef5ac>
 a50:	fc0d0000 	stc2	0, cr0, [sp], {-0}
 a54:	01000002 	tsteq	r0, r2
 a58:	0000bc84 	andeq	fp, r0, r4, lsl #25
 a5c:	000a8500 	andeq	r8, sl, r0, lsl #10
 a60:	06d21400 	ldrbeq	r1, [r2], r0, lsl #8
 a64:	032c1fff 	teqeq	ip, #1020	; 0x3fc
 a68:	de150000 	cdple	0, 1, cr0, cr5, cr0, {0}
 a6c:	3a1fff06 	bcc	80068c <_start-0x1f7ef974>
 a70:	87000003 	strhi	r0, [r0, -r3]
 a74:	10000002 	andne	r0, r0, r2
 a78:	91035101 	tstls	r3, r1, lsl #2
 a7c:	01107fb8 			; <UNDEFINED> instruction: 0x01107fb8
 a80:	007d0250 	rsbseq	r0, sp, r0, asr r2
 a84:	06f21500 	ldrbteq	r1, [r2], r0, lsl #10
 a88:	01061fff 	strdeq	r1, [r6, -pc]
 a8c:	02a30000 	adceq	r0, r3, #0
 a90:	01100000 	tsteq	r0, r0
 a94:	b4910352 	ldrlt	r0, [r1], #850	; 0x352
 a98:	5101107f 	tstpl	r1, pc, ror r0
 a9c:	7fb89103 	svcvc	0x00b89103
 aa0:	07001600 	streq	r1, [r0, -r0, lsl #12]
 aa4:	03571fff 	cmpeq	r7, #1020	; 0x3fc
 aa8:	01100000 	tsteq	r0, r0
 aac:	b8910351 	ldmlt	r1, {r0, r4, r6, r8, r9}
 ab0:	5001107f 	andpl	r1, r1, pc, ror r0
 ab4:	00007402 	andeq	r7, r0, r2, lsl #8
 ab8:	c1041200 	mrsgt	r1, R12_usr
 abc:	12000002 	andne	r0, r0, #2
 ac0:	00002904 	andeq	r2, r0, r4, lsl #18
 ac4:	00611700 	rsbeq	r1, r1, r0, lsl #14
 ac8:	02d70000 	sbcseq	r0, r7, #0
 acc:	d7180000 	ldrle	r0, [r8, -r0]
 ad0:	0f000002 	svceq	0x00000002
 ad4:	07040200 	streq	r0, [r4, -r0, lsl #4]
 ad8:	00000316 	andeq	r0, r0, r6, lsl r3
 adc:	01950119 	orrseq	r0, r5, r9, lsl r1
 ae0:	3b030000 	blcc	c0ae8 <_start-0x1ff2f518>
 ae4:	00006101 	andeq	r6, r0, r1, lsl #2
 ae8:	03050100 	movweq	r0, #20736	; 0x5100
 aec:	611a0000 	tstvs	sl, r0
 af0:	1a000000 	bne	af8 <_start-0x1ffef508>
 af4:	00000061 	andeq	r0, r0, r1, rrx
 af8:	0000611a 	andeq	r6, r0, sl, lsl r1
 afc:	01d61a00 	bicseq	r1, r6, r0, lsl #20
 b00:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
 b04:	0001e601 	andeq	lr, r1, r1, lsl #12
 b08:	013c0300 	teqeq	ip, r0, lsl #6
 b0c:	00000061 	andeq	r0, r0, r1, rrx
 b10:	00032c01 	andeq	r2, r3, r1, lsl #24
 b14:	00611a00 	rsbeq	r1, r1, r0, lsl #20
 b18:	611a0000 	tstvs	sl, r0
 b1c:	1a000000 	bne	b24 <_start-0x1ffef4dc>
 b20:	00000061 	andeq	r0, r0, r1, rrx
 b24:	0001d61a 	andeq	sp, r1, sl, lsl r6
 b28:	011b0000 	tsteq	fp, r0
 b2c:	0000016e 	andeq	r0, r0, lr, ror #2
 b30:	61012805 	tstvs	r1, r5, lsl #16
 b34:	01000000 	mrseq	r0, (UNDEF: 0)
 b38:	035c0119 	cmpeq	ip, #1073741830	; 0x40000006
 b3c:	3a020000 	bcc	80b44 <_start-0x1ff6f4bc>
 b40:	00006101 	andeq	r6, r0, r1, lsl #2
 b44:	03570100 	cmpeq	r7, #0, 2
 b48:	d61a0000 	ldrle	r0, [sl], -r0
 b4c:	1a000001 	bne	b58 <_start-0x1ffef4a8>
 b50:	000001d6 	ldrdeq	r0, [r0], -r6
 b54:	f2011c00 			; <UNDEFINED> instruction: 0xf2011c00
 b58:	02000002 	andeq	r0, r0, #2
 b5c:	1a01013b 	bne	41050 <_start-0x1ffaefb0>
 b60:	00000061 	andeq	r0, r0, r1, rrx
 b64:	0001d61a 	andeq	sp, r1, sl, lsl r6
 b68:	00611a00 	rsbeq	r1, r1, r0, lsl #20
 b6c:	00000000 	andeq	r0, r0, r0
 b70:	00000132 	andeq	r0, r0, r2, lsr r1
 b74:	04f50002 	ldrbteq	r0, [r5], #2
 b78:	01040000 	mrseq	r0, (UNDEF: 4)
 b7c:	0000012c 	andeq	r0, r0, ip, lsr #2
 b80:	00037101 	andeq	r7, r3, r1, lsl #2
 b84:	0000a900 	andeq	sl, r0, r0, lsl #18
 b88:	ff064800 			; <UNDEFINED> instruction: 0xff064800
 b8c:	ff06c81f 			; <UNDEFINED> instruction: 0xff06c81f
 b90:	0003791f 	andeq	r7, r3, pc, lsl r9
 b94:	08010200 	stmdaeq	r1, {r9}
 b98:	00000038 	andeq	r0, r0, r8, lsr r0
 b9c:	2f080102 	svccs	0x00080102
 ba0:	02000000 	andeq	r0, r0, #0
 ba4:	01380502 	teqeq	r8, r2, lsl #10
 ba8:	02020000 	andeq	r0, r2, #0
 bac:	00005207 	andeq	r5, r0, r7, lsl #4
 bb0:	05040300 	streq	r0, [r4, #-768]	; 0x300
 bb4:	00746e69 	rsbseq	r6, r4, r9, ror #28
 bb8:	61070402 	tstvs	r7, r2, lsl #8
 bbc:	02000001 	andeq	r0, r0, #1
 bc0:	01170508 	tsteq	r7, r8, lsl #10
 bc4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 bc8:	00015707 	andeq	r5, r1, r7, lsl #14
 bcc:	33750400 	cmncc	r5, #0, 8
 bd0:	20020032 	andcs	r0, r2, r2, lsr r0
 bd4:	00000048 	andeq	r0, r0, r8, asr #32
 bd8:	035c0105 	cmpeq	ip, #1073741825	; 0x40000001
 bdc:	20010000 	andcs	r0, r1, r0
 be0:	00005d01 	andeq	r5, r0, r1, lsl #26
 be4:	ff064800 			; <UNDEFINED> instruction: 0xff064800
 be8:	ff06941f 			; <UNDEFINED> instruction: 0xff06941f
 bec:	000ab01f 	andeq	fp, sl, pc, lsl r0
 bf0:	00d70100 	sbcseq	r0, r7, r0, lsl #2
 bf4:	63060000 	movwvs	r0, #24576	; 0x6000
 bf8:	0100646d 	tsteq	r0, sp, ror #8
 bfc:	0000d720 	andeq	sp, r0, r0, lsr #14
 c00:	000ad000 	andeq	sp, sl, r0
 c04:	02ab0700 	adceq	r0, fp, #0, 14
 c08:	20010000 	andcs	r0, r1, r0
 c0c:	000000d7 	ldrdeq	r0, [r0], -r7
 c10:	6e085101 	adfvse	f5, f0, f1
 c14:	5d220100 	stfpls	f0, [r2, #-0]
 c18:	0a000000 	beq	c20 <_start-0x1ffef3e0>
 c1c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 c20:	00000241 	andeq	r0, r0, r1, asr #4
 c24:	005d2201 	subseq	r2, sp, r1, lsl #4
 c28:	0b1e0000 	bleq	780c30 <_start-0x1f86f3d0>
 c2c:	840a0000 	strhi	r0, [sl], #-0
 c30:	01000000 	mrseq	r0, (UNDEF: 0)
 c34:	00005d23 	andeq	r5, r0, r3, lsr #26
 c38:	0b520100 	bleq	1481040 <_start-0x1eb6efc0>
 c3c:	00000369 	andeq	r0, r0, r9, ror #6
 c40:	06783201 	ldrbteq	r3, [r8], -r1, lsl #4
 c44:	0c001fff 	stceq	15, cr1, [r0], {255}	; 0xff
 c48:	00005d04 	andeq	r5, r0, r4, lsl #26
 c4c:	f2010d00 	vadd.f32	d0, d1, d0
 c50:	01000002 	tsteq	r0, r2
 c54:	06940144 	ldreq	r0, [r4], r4, asr #2
 c58:	06c81fff 			; <UNDEFINED> instruction: 0x06c81fff
 c5c:	0b3d1fff 	bleq	f48c60 <_start-0x1f0a73a0>
 c60:	07010000 	streq	r0, [r1, -r0]
 c64:	00000241 	andeq	r0, r0, r1, asr #4
 c68:	005d4401 	subseq	r4, sp, r1, lsl #8
 c6c:	50010000 	andpl	r0, r1, r0
 c70:	0002ab07 	andeq	sl, r2, r7, lsl #22
 c74:	d7440100 	strble	r0, [r4, -r0, lsl #2]
 c78:	01000000 	mrseq	r0, (UNDEF: 0)
 c7c:	027d0e51 	rsbseq	r0, sp, #1296	; 0x510
 c80:	44010000 	strmi	r0, [r1], #-0
 c84:	0000005d 	andeq	r0, r0, sp, asr r0
 c88:	00000b5d 	andeq	r0, r0, sp, asr fp
 c8c:	01006e0f 	tsteq	r0, pc, lsl #28
 c90:	00005d46 	andeq	r5, r0, r6, asr #26
 c94:	00840900 	addeq	r0, r4, r0, lsl #18
 c98:	46010000 	strmi	r0, [r1], -r0
 c9c:	0000005d 	andeq	r0, r0, sp, asr r0
 ca0:	00000b7e 	andeq	r0, r0, lr, ror fp
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <_start-0x1fdef3ec>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5
  14:	25011101 	strcs	r1, [r1, #-257]	; 0x101
  18:	030b130e 	movweq	r1, #45838	; 0xb30e
  1c:	110e1b0e 	tstne	lr, lr, lsl #22
  20:	10011201 	andne	r1, r1, r1, lsl #4
  24:	02000006 	andeq	r0, r0, #6
  28:	0b0b0024 	bleq	2c00c0 <_start-0x1fd2ff40>
  2c:	0e030b3e 	vmoveq.16	d3[0], r0
  30:	24030000 	strcs	r0, [r3], #-0
  34:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  38:	0008030b 	andeq	r0, r8, fp, lsl #6
  3c:	00160400 	andseq	r0, r6, r0, lsl #8
  40:	0b3a0803 	bleq	e82054 <_start-0x1f16dfac>
  44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  48:	04050000 	streq	r0, [r5], #-0
  4c:	0b0e0301 	bleq	380c58 <_start-0x1fc6f3a8>
  50:	3b0b3a0b 	blcc	2ce884 <_start-0x1fd2177c>
  54:	0013010b 	andseq	r0, r3, fp, lsl #2
  58:	00280600 	eoreq	r0, r8, r0, lsl #12
  5c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
  60:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  64:	030c3f01 	movweq	r3, #52993	; 0xcf01
  68:	3b0b3a0e 	blcc	2ce8a8 <_start-0x1fd21758>
  6c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
  70:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  74:	970a4001 	strls	r4, [sl, -r1]
  78:	13010c42 	movwne	r0, #7234	; 0x1c42
  7c:	34080000 	strcc	r0, [r8], #-0
  80:	3a0e0300 	bcc	380c88 <_start-0x1fc6f378>
  84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  88:	000a0213 	andeq	r0, sl, r3, lsl r2
  8c:	012e0900 	teqeq	lr, r0, lsl #18
  90:	0b3a0e03 	bleq	e838a4 <_start-0x1f16c75c>
  94:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
  98:	0b201349 	bleq	804dc4 <_start-0x1f7eb23c>
  9c:	00001301 	andeq	r1, r0, r1, lsl #6
  a0:	0300050a 	movweq	r0, #1290	; 0x50a
  a4:	3b0b3a0e 	blcc	2ce8e4 <_start-0x1fd2171c>
  a8:	0013490b 	andseq	r4, r3, fp, lsl #18
  ac:	00340b00 	eorseq	r0, r4, r0, lsl #22
  b0:	0b3a0e03 	bleq	e838c4 <_start-0x1f16c73c>
  b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b8:	340c0000 	strcc	r0, [ip], #-0
  bc:	3a080300 	bcc	200cc4 <_start-0x1fdef33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
  c8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 18 <_start-0x1ffeffe8>
  cc:	0b3a0e03 	bleq	e838e0 <_start-0x1f16c720>
  d0:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
  d4:	01111349 	tsteq	r1, r9, asr #6
  d8:	06400112 			; <UNDEFINED> instruction: 0x06400112
  dc:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
  e0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  e4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  e8:	0b3b0b3a 	bleq	ec2dd8 <_start-0x1f12d228>
  ec:	0a021349 	beq	84e18 <_start-0x1ff6b1e8>
  f0:	340f0000 	strcc	r0, [pc], #-0	; f8 <_start-0x1ffeff08>
  f4:	3a0e0300 	bcc	380cfc <_start-0x1fc6f304>
  f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  fc:	00060213 	andeq	r0, r6, r3, lsl r2
 100:	011d1000 	tsteq	sp, r0
 104:	01521331 	cmpeq	r2, r1, lsr r3
 108:	0b580655 	bleq	1601a64 <_start-0x1e9ee59c>
 10c:	13010b59 	movwne	r0, #7001	; 0x1b59
 110:	05110000 	ldreq	r0, [r1, #-0]
 114:	02133100 	andseq	r3, r3, #0, 2
 118:	12000006 	andne	r0, r0, #6
 11c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
 120:	34130000 	ldrcc	r0, [r3], #-0
 124:	02133100 	andseq	r3, r3, #0, 2
 128:	14000006 	strne	r0, [r0], #-6
 12c:	00018289 	andeq	r8, r1, r9, lsl #5
 130:	13310111 	teqne	r1, #1073741828	; 0x40000004
 134:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
 138:	11000182 	smlabbne	r0, r2, r1, r0
 13c:	0c429501 	cfstr64eq	mvdx9, [r2], {1}
 140:	00001331 	andeq	r1, r0, r1, lsr r3
 144:	3f012e16 	svccc	0x00012e16
 148:	3a0e030c 	bcc	380d80 <_start-0x1fc6f280>
 14c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 150:	1201110c 	andne	r1, r1, #12, 2
 154:	970a4001 	strls	r4, [sl, -r1]
 158:	13010c42 	movwne	r0, #7234	; 0x1c42
 15c:	05170000 	ldreq	r0, [r7, #-0]
 160:	3a0e0300 	bcc	380d68 <_start-0x1fc6f298>
 164:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 168:	00060213 	andeq	r0, r6, r3, lsl r2
 16c:	11010000 	mrsne	r0, (UNDEF: 1)
 170:	130e2501 	movwne	r2, #58625	; 0xe501
 174:	1b0e030b 	blne	380da8 <_start-0x1fc6f258>
 178:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 17c:	00061001 	andeq	r1, r6, r1
 180:	00240200 	eoreq	r0, r4, r0, lsl #4
 184:	0b3e0b0b 	bleq	f82db8 <_start-0x1f06d248>
 188:	00000e03 	andeq	r0, r0, r3, lsl #28
 18c:	0b002403 	bleq	91a0 <_start-0x1ffe6e60>
 190:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 194:	04000008 	streq	r0, [r0], #-8
 198:	08030016 	stmdaeq	r3, {r1, r2, r4}
 19c:	0b3b0b3a 	bleq	ec2e8c <_start-0x1f12d174>
 1a0:	00001349 	andeq	r1, r0, r9, asr #6
 1a4:	03010405 	movweq	r0, #5125	; 0x1405
 1a8:	3a0b0b0e 	bcc	2c2de8 <_start-0x1fd2d218>
 1ac:	010b3b0b 	tsteq	fp, fp, lsl #22
 1b0:	06000013 			; <UNDEFINED> instruction: 0x06000013
 1b4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 1b8:	00000d1c 	andeq	r0, r0, ip, lsl sp
 1bc:	03012e07 	movweq	r2, #7687	; 0x1e07
 1c0:	3b0b3a0e 	blcc	2cea00 <_start-0x1fd21600>
 1c4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
 1c8:	010b2013 	tsteq	fp, r3, lsl r0
 1cc:	08000013 	stmdaeq	r0, {r0, r1, r4}
 1d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1d4:	0b3b0b3a 	bleq	ec2ec4 <_start-0x1f12d13c>
 1d8:	00001349 	andeq	r1, r0, r9, asr #6
 1dc:	03003409 	movweq	r3, #1033	; 0x409
 1e0:	3b0b3a0e 	blcc	2cea20 <_start-0x1fd215e0>
 1e4:	0013490b 	andseq	r4, r3, fp, lsl #18
 1e8:	00340a00 	eorseq	r0, r4, r0, lsl #20
 1ec:	0b3a0803 	bleq	e82200 <_start-0x1f16de00>
 1f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1f4:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 1f8:	3a0e0301 	bcc	380e04 <_start-0x1fc6f1fc>
 1fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 200:	1113490c 	tstne	r3, ip, lsl #18
 204:	40011201 	andmi	r1, r1, r1, lsl #4
 208:	0c429706 	mcrreq	7, 0, r9, r2, cr6
 20c:	00001301 	andeq	r1, r0, r1, lsl #6
 210:	0300050c 	movweq	r0, #1292	; 0x50c
 214:	3b0b3a08 	blcc	2cea3c <_start-0x1fd215c4>
 218:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 21c:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
 220:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 224:	0b3b0b3a 	bleq	ec2f14 <_start-0x1f12d0ec>
 228:	06021349 	streq	r1, [r2], -r9, asr #6
 22c:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
 230:	11010182 	smlabbne	r1, r2, r1, r0
 234:	01133101 	tsteq	r3, r1, lsl #2
 238:	0f000013 	svceq	0x00000013
 23c:	0001828a 	andeq	r8, r1, sl, lsl #5
 240:	42910a02 	addsmi	r0, r1, #8192	; 0x2000
 244:	1000000a 	andne	r0, r0, sl
 248:	01018289 	smlabbeq	r1, r9, r2, r8
 24c:	13310111 	teqne	r1, #1073741828	; 0x40000004
 250:	0f110000 	svceq	0x00110000
 254:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 258:	12000013 	andne	r0, r0, #19
 25c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
 260:	0b3b0b3a 	bleq	ec2f50 <_start-0x1f12d0b0>
 264:	0b200c27 	bleq	803308 <_start-0x1f7eccf8>
 268:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 26c:	11133101 	tstne	r3, r1, lsl #2
 270:	40011201 	andmi	r1, r1, r1, lsl #4
 274:	0c429706 	mcrreq	7, 0, r9, r2, cr6
 278:	00001301 	andeq	r1, r0, r1, lsl #6
 27c:	31003414 	tstcc	r0, r4, lsl r4
 280:	00060213 	andeq	r0, r6, r3, lsl r2
 284:	00051500 	andeq	r1, r5, r0, lsl #10
 288:	00001331 	andeq	r1, r0, r1, lsr r3
 28c:	31001d16 	tstcc	r0, r6, lsl sp
 290:	55015213 	strpl	r5, [r1, #-531]	; 0x213
 294:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
 298:	1700000b 	strne	r0, [r0, -fp]
 29c:	1331001d 	teqne	r1, #29
 2a0:	01120111 	tsteq	r2, r1, lsl r1
 2a4:	0b590b58 	bleq	164300c <_start-0x1e9acff4>
 2a8:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 2ac:	030c3f01 	movweq	r3, #52993	; 0xcf01
 2b0:	3b0b3a0e 	blcc	2ceaf0 <_start-0x1fd21510>
 2b4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
 2b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2bc:	97064001 	strls	r4, [r6, -r1]
 2c0:	13010c42 	movwne	r0, #7234	; 0x1c42
 2c4:	05190000 	ldreq	r0, [r9, #-0]
 2c8:	3a0e0300 	bcc	380ed0 <_start-0x1fc6f130>
 2cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2d0:	00060213 	andeq	r0, r6, r3, lsl r2
 2d4:	00341a00 	eorseq	r1, r4, r0, lsl #20
 2d8:	0b3a0803 	bleq	e822ec <_start-0x1f16dd14>
 2dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2e0:	00000a02 	andeq	r0, r0, r2, lsl #20
 2e4:	0300341b 	movweq	r3, #1051	; 0x41b
 2e8:	3b0b3a08 	blcc	2ceb10 <_start-0x1fd214f0>
 2ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2f0:	1c000006 	stcne	0, cr0, [r0], {6}
 2f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2f8:	0b3b0b3a 	bleq	ec2fe8 <_start-0x1f12d018>
 2fc:	0a021349 	beq	85028 <_start-0x1ff6afd8>
 300:	0a1d0000 	beq	740308 <_start-0x1f8afcf8>
 304:	3a0e0300 	bcc	380f0c <_start-0x1fc6f0f4>
 308:	110b3b0b 	tstne	fp, fp, lsl #22
 30c:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
 310:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
 314:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 318:	00000111 	andeq	r0, r0, r1, lsl r1
 31c:	31011d1f 	tstcc	r1, pc, lsl sp
 320:	55015213 	strpl	r5, [r1, #-531]	; 0x213
 324:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
 328:	00130105 	andseq	r0, r3, r5, lsl #2
 32c:	00052000 	andeq	r2, r5, r0
 330:	06021331 			; <UNDEFINED> instruction: 0x06021331
 334:	0b210000 	bleq	84033c <_start-0x1f7afcc4>
 338:	00065501 	andeq	r5, r6, r1, lsl #10
 33c:	00342200 	eorseq	r2, r4, r0, lsl #4
 340:	00001331 	andeq	r1, r0, r1, lsr r3
 344:	01828923 	orreq	r8, r2, r3, lsr #18
 348:	31011100 	mrscc	r1, (UNDEF: 17)
 34c:	24000013 	strcs	r0, [r0], #-19
 350:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2a0 <_start-0x1ffefd60>
 354:	0b3a0e03 	bleq	e83b68 <_start-0x1f16c498>
 358:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 35c:	00000c3c 	andeq	r0, r0, ip, lsr ip
 360:	49000525 	stmdbmi	r0, {r0, r2, r5, r8, sl}
 364:	00000013 	andeq	r0, r0, r3, lsl r0
 368:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 36c:	030b130e 	movweq	r1, #45838	; 0xb30e
 370:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
 374:	52011106 	andpl	r1, r1, #-2147483647	; 0x80000001
 378:	00061001 	andeq	r1, r6, r1
 37c:	00240200 	eoreq	r0, r4, r0, lsl #4
 380:	0b3e0b0b 	bleq	f82fb4 <_start-0x1f06d04c>
 384:	00000e03 	andeq	r0, r0, r3, lsl #28
 388:	0b002403 	bleq	939c <_start-0x1ffe6c64>
 38c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 390:	04000008 	streq	r0, [r0], #-8
 394:	08030016 	stmdaeq	r3, {r1, r2, r4}
 398:	0b3b0b3a 	bleq	ec3088 <_start-0x1f12cf78>
 39c:	00001349 	andeq	r1, r0, r9, asr #6
 3a0:	03010405 	movweq	r0, #5125	; 0x1405
 3a4:	3a0b0b0e 	bcc	2c2fe4 <_start-0x1fd2d01c>
 3a8:	010b3b0b 	tsteq	fp, fp, lsl #22
 3ac:	06000013 			; <UNDEFINED> instruction: 0x06000013
 3b0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 3b4:	00000d1c 	andeq	r0, r0, ip, lsl sp
 3b8:	03012e07 	movweq	r2, #7687	; 0x1e07
 3bc:	3b0b3a0e 	blcc	2cebfc <_start-0x1fd21404>
 3c0:	200c270b 	andcs	r2, ip, fp, lsl #14
 3c4:	0013010b 	andseq	r0, r3, fp, lsl #2
 3c8:	00050800 	andeq	r0, r5, r0, lsl #16
 3cc:	0b3a0e03 	bleq	e83be0 <_start-0x1f16c420>
 3d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3d4:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 3d8:	030c3f01 	movweq	r3, #52993	; 0xcf01
 3dc:	3b0b3a0e 	blcc	2cec1c <_start-0x1fd213e4>
 3e0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
 3e4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 3e8:	97064001 	strls	r4, [r6, -r1]
 3ec:	13010c42 	movwne	r0, #7234	; 0x1c42
 3f0:	050a0000 	streq	r0, [sl, #-0]
 3f4:	3a080300 	bcc	200ffc <_start-0x1fdef004>
 3f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3fc:	00060213 	andeq	r0, r6, r3, lsl r2
 400:	00050b00 	andeq	r0, r5, r0, lsl #22
 404:	0b3a0e03 	bleq	e83c18 <_start-0x1f16c3e8>
 408:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 40c:	00000602 	andeq	r0, r0, r2, lsl #12
 410:	0300340c 	movweq	r3, #1036	; 0x40c
 414:	3b0b3a0e 	blcc	2cec54 <_start-0x1fd213ac>
 418:	1c13490b 	ldcne	9, cr4, [r3], {11}
 41c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 420:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 424:	0b3b0b3a 	bleq	ec3114 <_start-0x1f12ceec>
 428:	06021349 	streq	r1, [r2], -r9, asr #6
 42c:	340e0000 	strcc	r0, [lr], #-0
 430:	3a080300 	bcc	201038 <_start-0x1fdeefc8>
 434:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 438:	00060213 	andeq	r0, r6, r3, lsl r2
 43c:	82890f00 	addhi	r0, r9, #0, 30
 440:	01110101 	tsteq	r1, r1, lsl #2
 444:	310c4295 			; <UNDEFINED> instruction: 0x310c4295
 448:	00130113 	andseq	r0, r3, r3, lsl r1
 44c:	828a1000 	addhi	r1, sl, #0
 450:	0a020001 	beq	8045c <_start-0x1ff6fba4>
 454:	000a4291 	muleq	sl, r1, r2
 458:	82891100 	addhi	r1, r9, #0, 2
 45c:	01110001 	tsteq	r1, r1
 460:	310c4295 			; <UNDEFINED> instruction: 0x310c4295
 464:	12000013 	andne	r0, r0, #19
 468:	0b0b000f 	bleq	2c04ac <_start-0x1fd2fb54>
 46c:	00001349 	andeq	r1, r0, r9, asr #6
 470:	03003413 	movweq	r3, #1043	; 0x413
 474:	3b0b3a0e 	blcc	2cecb4 <_start-0x1fd2134c>
 478:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 47c:	1400000a 	strne	r0, [r0], #-10
 480:	00018289 	andeq	r8, r1, r9, lsl #5
 484:	13310111 	teqne	r1, #1073741828	; 0x40000004
 488:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
 48c:	11010182 	smlabbne	r1, r2, r1, r0
 490:	01133101 	tsteq	r3, r1, lsl #2
 494:	16000013 			; <UNDEFINED> instruction: 0x16000013
 498:	01018289 	smlabbeq	r1, r9, r2, r8
 49c:	13310111 	teqne	r1, #1073741828	; 0x40000004
 4a0:	01170000 	tsteq	r7, r0
 4a4:	01134901 	tsteq	r3, r1, lsl #18
 4a8:	18000013 	stmdane	r0, {r0, r1, r4}
 4ac:	13490021 	movtne	r0, #36897	; 0x9021
 4b0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 4b4:	3f012e19 	svccc	0x00012e19
 4b8:	3a0e030c 	bcc	3810f0 <_start-0x1fc6ef10>
 4bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4c0:	3c13490c 	ldccc	9, cr4, [r3], {12}
 4c4:	0013010c 	andseq	r0, r3, ip, lsl #2
 4c8:	00051a00 	andeq	r1, r5, r0, lsl #20
 4cc:	00001349 	andeq	r1, r0, r9, asr #6
 4d0:	3f002e1b 	svccc	0x00002e1b
 4d4:	3a0e030c 	bcc	38110c <_start-0x1fc6eef4>
 4d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4dc:	3c13490c 	ldccc	9, cr4, [r3], {12}
 4e0:	1c00000c 	stcne	0, cr0, [r0], {12}
 4e4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 434 <_start-0x1ffefbcc>
 4e8:	0b3a0e03 	bleq	e83cfc <_start-0x1f16c304>
 4ec:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 4f0:	00000c3c 	andeq	r0, r0, ip, lsr ip
 4f4:	01110100 	tsteq	r1, r0, lsl #2
 4f8:	0b130e25 	bleq	4c3d94 <_start-0x1fb2c26c>
 4fc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 500:	01120111 	tsteq	r2, r1, lsl r1
 504:	00000610 	andeq	r0, r0, r0, lsl r6
 508:	0b002402 	bleq	9518 <_start-0x1ffe6ae8>
 50c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 510:	0300000e 	movweq	r0, #14
 514:	0b0b0024 	bleq	2c05ac <_start-0x1fd2fa54>
 518:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 51c:	16040000 	strne	r0, [r4], -r0
 520:	3a080300 	bcc	201128 <_start-0x1fdeeed8>
 524:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 528:	05000013 	streq	r0, [r0, #-19]
 52c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 47c <_start-0x1ffefb84>
 530:	0b3a0e03 	bleq	e83d44 <_start-0x1f16c2bc>
 534:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 538:	01111349 	tsteq	r1, r9, asr #6
 53c:	06400112 			; <UNDEFINED> instruction: 0x06400112
 540:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
 544:	06000013 			; <UNDEFINED> instruction: 0x06000013
 548:	08030005 	stmdaeq	r3, {r0, r2}
 54c:	0b3b0b3a 	bleq	ec323c <_start-0x1f12cdc4>
 550:	06021349 	streq	r1, [r2], -r9, asr #6
 554:	05070000 	streq	r0, [r7, #-0]
 558:	3a0e0300 	bcc	381160 <_start-0x1fc6eea0>
 55c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 560:	000a0213 	andeq	r0, sl, r3, lsl r2
 564:	00340800 	eorseq	r0, r4, r0, lsl #16
 568:	0b3a0803 	bleq	e8257c <_start-0x1f16da84>
 56c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 570:	00000602 	andeq	r0, r0, r2, lsl #12
 574:	03003409 	movweq	r3, #1033	; 0x409
 578:	3b0b3a0e 	blcc	2cedb8 <_start-0x1fd21248>
 57c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 580:	0a000006 	beq	5a0 <_start-0x1ffefa60>
 584:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 588:	0b3b0b3a 	bleq	ec3278 <_start-0x1f12cd88>
 58c:	0a021349 	beq	852b8 <_start-0x1ff6ad48>
 590:	0a0b0000 	beq	2c0598 <_start-0x1fd2fa68>
 594:	3a0e0300 	bcc	38119c <_start-0x1fc6ee64>
 598:	110b3b0b 	tstne	fp, fp, lsl #22
 59c:	0c000001 	stceq	0, cr0, [r0], {1}
 5a0:	0b0b000f 	bleq	2c05e4 <_start-0x1fd2fa1c>
 5a4:	00001349 	andeq	r1, r0, r9, asr #6
 5a8:	3f012e0d 	svccc	0x00012e0d
 5ac:	3a0e030c 	bcc	3811e4 <_start-0x1fc6ee1c>
 5b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5b4:	1201110c 	andne	r1, r1, #12, 2
 5b8:	97064001 	strls	r4, [r6, -r1]
 5bc:	00000c42 	andeq	r0, r0, r2, asr #24
 5c0:	0300050e 	movweq	r0, #1294	; 0x50e
 5c4:	3b0b3a0e 	blcc	2cee04 <_start-0x1fd211fc>
 5c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5cc:	0f000006 	svceq	0x00000006
 5d0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 5d4:	0b3b0b3a 	bleq	ec32c4 <_start-0x1f12cd3c>
 5d8:	00001349 	andeq	r1, r0, r9, asr #6
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	1fff0000 	svcne	0x00ff0000
  14:	000000d8 	ldrdeq	r0, [r0], -r8
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00900002 	addseq	r0, r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	1fff00d8 	svcne	0x00ff00d8
  34:	00000134 	andeq	r0, r0, r4, lsr r1
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	030e0002 	movweq	r0, #57346	; 0xe002
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	1fff020c 	svcne	0x00ff020c
  54:	000003a0 	andeq	r0, r0, r0, lsr #7
	...
  60:	00000024 	andeq	r0, r0, r4, lsr #32
  64:	07fe0002 	ldrbeq	r0, [lr, r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	1fff05ac 	svcne	0x00ff05ac
  74:	0000009a 	muleq	r0, sl, r0
  78:	1fff06c8 	svcne	0x00ff06c8
  7c:	00000040 	andeq	r0, r0, r0, asr #32
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0b700002 	bleq	1c0009c <_start-0x1e3eff64>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	1fff0648 	svcne	0x00ff0648
  9c:	00000080 	andeq	r0, r0, r0, lsl #1
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00000014 	andeq	r0, r0, r4, lsl r0
   4:	00000018 	andeq	r0, r0, r8, lsl r0
   8:	007d0002 	rsbseq	r0, sp, r2
   c:	00000018 	andeq	r0, r0, r8, lsl r0
  10:	000000e8 	andeq	r0, r0, r8, ror #1
  14:	087d0002 	ldmdaeq	sp!, {r1}^
	...
  20:	000000a6 	andeq	r0, r0, r6, lsr #1
  24:	000000c4 	andeq	r0, r0, r4, asr #1
  28:	c8540001 	ldmdagt	r4, {r0}^
  2c:	ca000000 	bgt	34 <_start-0x1ffeffcc>
  30:	01000000 	mrseq	r0, (UNDEF: 0)
  34:	00005400 	andeq	r5, r0, r0, lsl #8
  38:	00000000 	andeq	r0, r0, r0
  3c:	00b20000 	adcseq	r0, r2, r0
  40:	00ba0000 	adcseq	r0, sl, r0
  44:	00010000 	andeq	r0, r1, r0
  48:	0000c851 	andeq	ip, r0, r1, asr r8
  4c:	0000ca00 	andeq	ip, r0, r0, lsl #20
  50:	51000100 	mrspl	r0, (UNDEF: 16)
	...
  5c:	00000032 	andeq	r0, r0, r2, lsr r0
  60:	000000a2 	andeq	r0, r0, r2, lsr #1
  64:	00540001 	subseq	r0, r4, r1
  68:	00000000 	andeq	r0, r0, r0
  6c:	46000000 	strmi	r0, [r0], -r0
  70:	96000000 	strls	r0, [r0], -r0
  74:	01000000 	mrseq	r0, (UNDEF: 0)
  78:	00005300 	andeq	r5, r0, r0, lsl #6
  7c:	00000000 	andeq	r0, r0, r0
  80:	00600000 	rsbeq	r0, r0, r0
  84:	00900000 	addseq	r0, r0, r0
  88:	00010000 	andeq	r0, r1, r0
  8c:	00000051 	andeq	r0, r0, r1, asr r0
  90:	00000000 	andeq	r0, r0, r0
  94:	00008c00 	andeq	r8, r0, r0, lsl #24
  98:	00009400 	andeq	r9, r0, r0, lsl #8
  9c:	31000500 	tstcc	r0, r0, lsl #10
  a0:	9f240072 	svcls	0x00240072
  a4:	00000094 	muleq	r0, r4, r0
  a8:	000000c4 	andeq	r0, r0, r4, asr #1
  ac:	c8520001 	ldmdagt	r2, {r0}^
  b0:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
  b4:	01000000 	mrseq	r0, (UNDEF: 0)
  b8:	00005200 	andeq	r5, r0, r0, lsl #4
  bc:	00000000 	andeq	r0, r0, r0
  c0:	00320000 	eorseq	r0, r2, r0
  c4:	008e0000 	addeq	r0, lr, r0
  c8:	00010000 	andeq	r0, r1, r0
  cc:	00000050 	andeq	r0, r0, r0, asr r0
  d0:	00000000 	andeq	r0, r0, r0
  d4:	00003800 	andeq	r3, r0, r0, lsl #16
  d8:	00004000 	andeq	r4, r0, r0
  dc:	53000100 	movwpl	r0, #256	; 0x100
  e0:	00000042 	andeq	r0, r0, r2, asr #32
  e4:	00000046 	andeq	r0, r0, r6, asr #32
  e8:	52530001 	subspl	r0, r3, #1
  ec:	5a000000 	bpl	f4 <_start-0x1ffeff0c>
  f0:	01000000 	mrseq	r0, (UNDEF: 0)
  f4:	005c5100 	subseq	r5, ip, r0, lsl #2
  f8:	00600000 	rsbeq	r0, r0, r0
  fc:	00010000 	andeq	r0, r1, r0
 100:	00006c51 	andeq	r6, r0, r1, asr ip
 104:	00007200 	andeq	r7, r0, r0, lsl #4
 108:	52000100 	andpl	r0, r0, #0, 2
 10c:	0000007c 	andeq	r0, r0, ip, ror r0
 110:	00000082 	andeq	r0, r0, r2, lsl #1
 114:	84520001 	ldrbhi	r0, [r2], #-1
 118:	94000000 	strls	r0, [r0], #-0
 11c:	01000000 	mrseq	r0, (UNDEF: 0)
 120:	00005200 	andeq	r5, r0, r0, lsl #4
 124:	00000000 	andeq	r0, r0, r0
 128:	00e80000 	rsceq	r0, r8, r0
 12c:	00f00000 	rscseq	r0, r0, r0
 130:	00010000 	andeq	r0, r1, r0
 134:	0000f050 	andeq	pc, r0, r0, asr r0	; <UNPREDICTABLE>
 138:	0000fc00 	andeq	pc, r0, r0, lsl #24
 13c:	f3000400 	vshl.u8	d0, d0, d0
 140:	009f5001 	addseq	r5, pc, r1
 144:	00000000 	andeq	r0, r0, r0
 148:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 14c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
 150:	01000000 	mrseq	r0, (UNDEF: 0)
 154:	00f45000 	rscseq	r5, r4, r0
 158:	00fc0000 	rscseq	r0, ip, r0
 15c:	000d0000 	andeq	r0, sp, r0
 160:	f75001f3 			; <UNDEFINED> instruction: 0xf75001f3
 164:	f7007325 			; <UNDEFINED> instruction: 0xf7007325
 168:	00f71b25 	rscseq	r1, r7, r5, lsr #22
 16c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 170:	00000000 	andeq	r0, r0, r0
 174:	0000fc00 	andeq	pc, r0, r0, lsl #24
 178:	0000fe00 	andeq	pc, r0, r0, lsl #28
 17c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 180:	0000fe00 	andeq	pc, r0, r0, lsl #28
 184:	00013400 	andeq	r3, r1, r0, lsl #8
 188:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 18c:	00000008 	andeq	r0, r0, r8
 190:	00000000 	andeq	r0, r0, r0
 194:	00010200 	andeq	r0, r1, r0, lsl #4
 198:	00010c00 	andeq	r0, r1, r0, lsl #24
 19c:	50000100 	andpl	r0, r0, r0, lsl #2
 1a0:	0000011c 	andeq	r0, r0, ip, lsl r1
 1a4:	0000011e 	andeq	r0, r0, lr, lsl r1
 1a8:	00500001 	subseq	r0, r0, r1
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	02000000 	andeq	r0, r0, #0
 1b4:	18000001 	stmdane	r0, {r0}
 1b8:	02000001 	andeq	r0, r0, #1
 1bc:	189f3300 	ldmne	pc, {r8, r9, ip, sp}	; <UNPREDICTABLE>
 1c0:	1c000001 	stcne	0, cr0, [r0], {1}
 1c4:	02000001 	andeq	r0, r0, #1
 1c8:	1c9f3000 	ldcne	0, cr3, [pc], {0}
 1cc:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
 1d0:	02000001 	andeq	r0, r0, #1
 1d4:	1e9f3300 	cdpne	3, 9, cr3, cr15, cr0, {0}
 1d8:	34000001 	strcc	r0, [r0], #-1
 1dc:	01000001 	tsteq	r0, r1
 1e0:	00005000 	andeq	r5, r0, r0
	...
 1ec:	00020000 	andeq	r0, r2, r0
 1f0:	00020000 	andeq	r0, r2, r0
 1f4:	0002007d 	andeq	r0, r2, sp, ror r0
 1f8:	00ac0000 	adceq	r0, ip, r0
 1fc:	00020000 	andeq	r0, r2, r0
 200:	0000187d 	andeq	r1, r0, sp, ror r8
	...
 20c:	001a0000 	andseq	r0, sl, r0
 210:	00010000 	andeq	r0, r1, r0
 214:	00001a50 	andeq	r1, r0, r0, asr sl
 218:	00002400 	andeq	r2, r0, r0, lsl #8
 21c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
 220:	00000024 	andeq	r0, r0, r4, lsr #32
 224:	0000008e 	andeq	r0, r0, lr, lsl #1
 228:	01f30004 	mvnseq	r0, r4
 22c:	008e9f50 	addeq	r9, lr, r0, asr pc
 230:	00900000 	addseq	r0, r0, r0
 234:	00010000 	andeq	r0, r1, r0
 238:	00009050 	andeq	r9, r0, r0, asr r0
 23c:	0000ac00 	andeq	sl, r0, r0, lsl #24
 240:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
 250:	0000001d 	andeq	r0, r0, sp, lsl r0
 254:	1d510001 	ldclne	0, cr0, [r1, #-4]
 258:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
 25c:	01000000 	mrseq	r0, (UNDEF: 0)
 260:	008e5500 	addeq	r5, lr, r0, lsl #10
 264:	00ac0000 	adceq	r0, ip, r0
 268:	00010000 	andeq	r0, r1, r0
 26c:	00000051 	andeq	r0, r0, r1, asr r0
	...
 278:	00001d00 	andeq	r1, r0, r0, lsl #26
 27c:	52000100 	andpl	r0, r0, #0, 2
 280:	0000001d 	andeq	r0, r0, sp, lsl r0
 284:	0000008e 	andeq	r0, r0, lr, lsl #1
 288:	8e560001 	cdphi	0, 5, cr0, cr6, cr1, {0}
 28c:	ac000000 	stcge	0, cr0, [r0], {-0}
 290:	01000000 	mrseq	r0, (UNDEF: 0)
 294:	00005200 	andeq	r5, r0, r0, lsl #4
 298:	00000000 	andeq	r0, r0, r0
 29c:	00100000 	andseq	r0, r0, r0
 2a0:	00200000 	eoreq	r0, r0, r0
 2a4:	00020000 	andeq	r0, r2, r0
 2a8:	00209f34 	eoreq	r9, r0, r4, lsr pc
 2ac:	00360000 	eorseq	r0, r6, r0
 2b0:	00010000 	andeq	r0, r1, r0
 2b4:	00003653 	andeq	r3, r0, r3, asr r6
 2b8:	00004600 	andeq	r4, r0, r0, lsl #12
 2bc:	57000100 	strpl	r0, [r0, -r0, lsl #2]
 2c0:	00000046 	andeq	r0, r0, r6, asr #32
 2c4:	00000051 	andeq	r0, r0, r1, asr r0
 2c8:	54530001 	ldrbpl	r0, [r3], #-1
 2cc:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
 2d0:	01000000 	mrseq	r0, (UNDEF: 0)
 2d4:	005e5300 	subseq	r5, lr, r0, lsl #6
 2d8:	00620000 	rsbeq	r0, r2, r0
 2dc:	00050000 	andeq	r0, r5, r0
 2e0:	21340073 	teqcs	r4, r3, ror r0
 2e4:	0000669f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
 2e8:	00006a00 	andeq	r6, r0, r0, lsl #20
 2ec:	53000100 	movwpl	r0, #256	; 0x100
 2f0:	0000006c 	andeq	r0, r0, ip, rrx
 2f4:	00000072 	andeq	r0, r0, r2, ror r0
 2f8:	00730008 	rsbseq	r0, r3, r8
 2fc:	1f244b40 	svcne	0x00244b40
 300:	00809f1a 	addeq	r9, r0, sl, lsl pc
 304:	00850000 	addeq	r0, r5, r0
 308:	00080000 	andeq	r0, r8, r0
 30c:	4b400073 	blmi	10004e0 <_start-0x1efefb20>
 310:	9f1a1f24 	svcls	0x001a1f24
	...
 31c:	00000068 	andeq	r0, r0, r8, rrx
 320:	0000006a 	andeq	r0, r0, sl, rrx
 324:	9f300002 	svcls	0x00300002
	...
 330:	00000068 	andeq	r0, r0, r8, rrx
 334:	00000070 	andeq	r0, r0, r0, ror r0
 338:	9f340002 	svcls	0x00340002
 33c:	00000070 	andeq	r0, r0, r0, ror r0
 340:	00000080 	andeq	r0, r0, r0, lsl #1
 344:	9f300002 	svcls	0x00300002
 348:	00000080 	andeq	r0, r0, r0, lsl #1
 34c:	0000008e 	andeq	r0, r0, lr, lsl #1
 350:	9f340002 	svcls	0x00340002
	...
 35c:	000000ac 	andeq	r0, r0, ip, lsr #1
 360:	000000ae 	andeq	r0, r0, lr, lsr #1
 364:	007d0002 	rsbseq	r0, sp, r2
 368:	000000ae 	andeq	r0, r0, lr, lsr #1
 36c:	00000134 	andeq	r0, r0, r4, lsr r1
 370:	107d0002 	rsbsne	r0, sp, r2
	...
 37c:	0000010a 	andeq	r0, r0, sl, lsl #2
 380:	00000122 	andeq	r0, r0, r2, lsr #2
 384:	9f340002 	svcls	0x00340002
 388:	00000122 	andeq	r0, r0, r2, lsr #2
 38c:	00000134 	andeq	r0, r0, r4, lsr r1
 390:	00500001 	subseq	r0, r0, r1
 394:	00000000 	andeq	r0, r0, r0
 398:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 39c:	10000001 	andne	r0, r0, r1
 3a0:	07000001 	streq	r0, [r0, -r1]
 3a4:	40007300 	andmi	r7, r0, r0, lsl #6
 3a8:	9f1a2449 	svcls	0x001a2449
	...
 3b4:	000000ca 	andeq	r0, r0, sl, asr #1
 3b8:	000000d8 	ldrdeq	r0, [r0], -r8
 3bc:	9f300002 	svcls	0x00300002
	...
 3c8:	0000010a 	andeq	r0, r0, sl, lsl #2
 3cc:	0000010c 	andeq	r0, r0, ip, lsl #2
 3d0:	9f300002 	svcls	0x00300002
	...
 3dc:	00000134 	andeq	r0, r0, r4, lsr r1
 3e0:	0000013a 	andeq	r0, r0, sl, lsr r1
 3e4:	007d0002 	rsbseq	r0, sp, r2
 3e8:	0000013a 	andeq	r0, r0, sl, lsr r1
 3ec:	00000202 	andeq	r0, r0, r2, lsl #4
 3f0:	287d0002 	ldmdacs	sp!, {r1}^
	...
 3fc:	00000134 	andeq	r0, r0, r4, lsr r1
 400:	0000015c 	andeq	r0, r0, ip, asr r1
 404:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 408:	d6000001 	strle	r0, [r0], -r1
 40c:	01000001 	tsteq	r0, r1
 410:	01d65500 	bicseq	r5, r6, r0, lsl #10
 414:	01e60000 	mvneq	r0, r0
 418:	00040000 	andeq	r0, r4, r0
 41c:	9f5001f3 	svcls	0x005001f3
 420:	000001e6 	andeq	r0, r0, r6, ror #3
 424:	000001fe 	strdeq	r0, [r0], -lr
 428:	fe550001 	cdp2	0, 5, cr0, cr5, cr1, {0}
 42c:	02000001 	andeq	r0, r0, #1
 430:	04000002 	streq	r0, [r0], #-2
 434:	5001f300 	andpl	pc, r1, r0, lsl #6
 438:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 43c:	00000000 	andeq	r0, r0, r0
 440:	00013400 	andeq	r3, r1, r0, lsl #8
 444:	00015c00 	andeq	r5, r1, r0, lsl #24
 448:	51000100 	mrspl	r0, (UNDEF: 16)
 44c:	0000015c 	andeq	r0, r0, ip, asr r1
 450:	00000202 	andeq	r0, r0, r2, lsl #4
 454:	00590001 	subseq	r0, r9, r1
 458:	00000000 	andeq	r0, r0, r0
 45c:	34000000 	strcc	r0, [r0], #-0
 460:	5c000001 	stcpl	0, cr0, [r0], {1}
 464:	01000001 	tsteq	r0, r1
 468:	015c5200 	cmpeq	ip, r0, lsl #4
 46c:	019c0000 	orrseq	r0, ip, r0
 470:	00010000 	andeq	r0, r1, r0
 474:	00019c56 	andeq	r9, r1, r6, asr ip
 478:	0001a400 	andeq	sl, r1, r0, lsl #8
 47c:	f3000400 	vshl.u8	d0, d0, d0
 480:	a49f5201 	ldrge	r5, [pc], #513	; 488 <_start-0x1ffefb78>
 484:	a6000001 	strge	r0, [r0], -r1
 488:	01000001 	tsteq	r0, r1
 48c:	01a65600 			; <UNDEFINED> instruction: 0x01a65600
 490:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
 494:	00030000 	andeq	r0, r3, r0
 498:	ac9f2076 	ldcge	0, cr2, [pc], {118}	; 0x76
 49c:	e6000001 	str	r0, [r0], -r1
 4a0:	04000001 	streq	r0, [r0], #-1
 4a4:	5201f300 	andpl	pc, r1, #0, 6
 4a8:	0001e69f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
 4ac:	0001fa00 	andeq	pc, r1, r0, lsl #20
 4b0:	56000100 	strpl	r0, [r0], -r0, lsl #2
 4b4:	000001fa 	strdeq	r0, [r0], -sl
 4b8:	00000202 	andeq	r0, r0, r2, lsl #4
 4bc:	01f30004 	mvnseq	r0, r4
 4c0:	00009f52 	andeq	r9, r0, r2, asr pc
 4c4:	00000000 	andeq	r0, r0, r0
 4c8:	01340000 	teqeq	r4, r0
 4cc:	015c0000 	cmpeq	ip, r0
 4d0:	00010000 	andeq	r0, r1, r0
 4d4:	00015c53 	andeq	r5, r1, r3, asr ip
 4d8:	00020200 	andeq	r0, r2, r0, lsl #4
 4dc:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
 4e8:	0000015c 	andeq	r0, r0, ip, asr r1
 4ec:	00000167 	andeq	r0, r0, r7, ror #2
 4f0:	67530001 	ldrbvs	r0, [r3, -r1]
 4f4:	02000001 	andeq	r0, r0, #1
 4f8:	02000002 	andeq	r0, r0, #2
 4fc:	005c9100 	subseq	r9, ip, r0, lsl #2
 500:	00000000 	andeq	r0, r0, r0
 504:	70000000 	andvc	r0, r0, r0
 508:	e6000001 	str	r0, [r0], -r1
 50c:	01000001 	tsteq	r0, r1
 510:	00005700 	andeq	r5, r0, r0, lsl #14
 514:	00000000 	andeq	r0, r0, r0
 518:	01680000 	cmneq	r8, r0
 51c:	01700000 	cmneq	r0, r0
 520:	00010000 	andeq	r0, r1, r0
 524:	00017050 	andeq	r7, r1, r0, asr r0
 528:	0001e600 	andeq	lr, r1, r0, lsl #12
 52c:	30000200 	andcc	r0, r0, r0, lsl #4
 530:	0001e69f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
 534:	0001ea00 	andeq	lr, r1, r0, lsl #20
 538:	50000100 	andpl	r0, r0, r0, lsl #2
 53c:	000001f2 	strdeq	r0, [r0], -r2
 540:	000001fa 	strdeq	r0, [r0], -sl
 544:	00500001 	subseq	r0, r0, r1
 548:	00000000 	andeq	r0, r0, r0
 54c:	02000000 	andeq	r0, r0, #0
 550:	06000002 	streq	r0, [r0], -r2
 554:	02000002 	andeq	r0, r0, #2
 558:	06007d00 	streq	r7, [r0], -r0, lsl #26
 55c:	0c000002 	stceq	0, cr0, [r0], {2}
 560:	02000002 	andeq	r0, r0, #2
 564:	0c247d00 	stceq	13, cr7, [r4], #-0
 568:	a0000002 	andge	r0, r0, r2
 56c:	03000003 	movweq	r0, #3
 570:	00c87d00 	sbceq	r7, r8, r0, lsl #26
	...
 57c:	00000202 	andeq	r0, r0, r2, lsl #4
 580:	0000025b 	andeq	r0, r0, fp, asr r2
 584:	5b500001 	blpl	1400590 <_start-0x1ebefa70>
 588:	a0000002 	andge	r0, r0, r2
 58c:	01000003 	tsteq	r0, r3
 590:	00005600 	andeq	r5, r0, r0, lsl #12
 594:	00000000 	andeq	r0, r0, r0
 598:	02020000 	andeq	r0, r2, #0
 59c:	025b0000 	subseq	r0, fp, #0
 5a0:	00010000 	andeq	r0, r1, r0
 5a4:	00025b51 	andeq	r5, r2, r1, asr fp
 5a8:	0003a000 	andeq	sl, r3, r0
 5ac:	5a000100 	bpl	9b4 <_start-0x1ffef64c>
	...
 5b8:	00000202 	andeq	r0, r0, r2, lsl #4
 5bc:	00000238 	andeq	r0, r0, r8, lsr r2
 5c0:	38520001 	ldmdacc	r2, {r0}^
 5c4:	40000002 	andmi	r0, r0, r2
 5c8:	01000002 	tsteq	r0, r2
 5cc:	02405700 	subeq	r5, r0, #0, 14
 5d0:	024c0000 	subeq	r0, ip, #0
 5d4:	00010000 	andeq	r0, r1, r0
 5d8:	00024c52 	andeq	r4, r2, r2, asr ip
 5dc:	0003a000 	andeq	sl, r3, r0
 5e0:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
 5ec:	00000202 	andeq	r0, r0, r2, lsl #4
 5f0:	00000210 	andeq	r0, r0, r0, lsl r2
 5f4:	10530001 	subsne	r0, r3, r1
 5f8:	a0000002 	andge	r0, r0, r2
 5fc:	01000003 	tsteq	r0, r3
 600:	00005400 	andeq	r5, r0, r0, lsl #8
 604:	00000000 	andeq	r0, r0, r0
 608:	03460000 	movteq	r0, #24576	; 0x6000
 60c:	03780000 	cmneq	r8, #0
 610:	00010000 	andeq	r0, r1, r0
 614:	00000059 	andeq	r0, r0, r9, asr r0
 618:	00000000 	andeq	r0, r0, r0
 61c:	0002e000 	andeq	lr, r2, r0
 620:	0002ee00 	andeq	lr, r2, r0, lsl #28
 624:	30000200 	andcc	r0, r0, r0, lsl #4
 628:	0003349f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
 62c:	00037800 	andeq	r7, r3, r0, lsl #16
 630:	5b000100 	blpl	a38 <_start-0x1ffef5c8>
	...
 63c:	00000276 	andeq	r0, r0, r6, ror r2
 640:	00000282 	andeq	r0, r0, r2, lsl #5
 644:	82500001 	subshi	r0, r0, #1
 648:	46000002 	strmi	r0, [r0], -r2
 64c:	01000003 	tsteq	r0, r3
 650:	03465500 	movteq	r5, #25856	; 0x6500
 654:	03780000 	cmneq	r8, #0
 658:	00020000 	andeq	r0, r2, r0
 65c:	03789f30 	cmneq	r8, #48, 30	; 0xc0
 660:	037c0000 	cmneq	ip, #0
 664:	00010000 	andeq	r0, r1, r0
 668:	00038455 	andeq	r8, r3, r5, asr r4
 66c:	00038e00 	andeq	r8, r3, r0, lsl #28
 670:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
 67c:	0000021a 	andeq	r0, r0, sl, lsl r2
 680:	00000232 	andeq	r0, r0, r2, lsr r2
 684:	32530001 	subscc	r0, r3, #1
 688:	40000002 	andmi	r0, r0, r2
 68c:	02000002 	andeq	r0, r0, #2
 690:	40489100 	submi	r9, r8, r0, lsl #2
 694:	48000002 	stmdami	r0, {r1}
 698:	01000002 	tsteq	r0, r2
 69c:	02485300 	subeq	r5, r8, #0, 6
 6a0:	03a00000 	moveq	r0, #0
 6a4:	00020000 	andeq	r0, r2, r0
 6a8:	00004891 	muleq	r0, r1, r8
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	02840000 	addeq	r0, r4, #0
 6b4:	02950000 	addseq	r0, r5, #0
 6b8:	00010000 	andeq	r0, r1, r0
 6bc:	00030051 	andeq	r0, r3, r1, asr r0
 6c0:	00031000 	andeq	r1, r3, r0
 6c4:	50000100 	andpl	r0, r0, r0, lsl #2
 6c8:	00000310 	andeq	r0, r0, r0, lsl r3
 6cc:	0000031b 	andeq	r0, r0, fp, lsl r3
 6d0:	00720002 	rsbseq	r0, r2, r2
 6d4:	00000324 	andeq	r0, r0, r4, lsr #6
 6d8:	0000032c 	andeq	r0, r0, ip, lsr #6
 6dc:	56500001 	ldrbpl	r0, [r0], -r1
 6e0:	6a000003 	bvs	6f4 <_start-0x1ffef90c>
 6e4:	01000003 	tsteq	r0, r3
 6e8:	036a5200 	cmneq	sl, #0, 4
 6ec:	03780000 	cmneq	r8, #0
 6f0:	00020000 	andeq	r0, r2, r0
 6f4:	00000073 	andeq	r0, r0, r3, ror r0
 6f8:	00000000 	andeq	r0, r0, r0
 6fc:	03680000 	cmneq	r8, #0
 700:	03780000 	cmneq	r8, #0
 704:	00020000 	andeq	r0, r2, r0
 708:	00009f30 	andeq	r9, r0, r0, lsr pc
 70c:	00000000 	andeq	r0, r0, r0
 710:	05ac0000 	streq	r0, [ip, #0]!
 714:	05b21fff 	ldreq	r1, [r2, #4095]!	; 0xfff
 718:	00021fff 	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
 71c:	05b2007d 	ldreq	r0, [r2, #125]!	; 0x7d
 720:	06461fff 			; <UNDEFINED> instruction: 0x06461fff
 724:	00021fff 	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
 728:	0000147d 	andeq	r1, r0, sp, ror r4
 72c:	00000000 	andeq	r0, r0, r0
 730:	05ac0000 	streq	r0, [ip, #0]!
 734:	05ca1fff 	strbeq	r1, [sl, #4095]	; 0xfff
 738:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 73c:	ff05ca50 			; <UNDEFINED> instruction: 0xff05ca50
 740:	ff060c1f 			; <UNDEFINED> instruction: 0xff060c1f
 744:	5600011f 			; <UNDEFINED> instruction: 0x5600011f
 748:	1fff060c 	svcne	0x00ff060c
 74c:	1fff0646 	svcne	0x00ff0646
 750:	01f30004 	mvnseq	r0, r4
 754:	00009f50 	andeq	r9, r0, r0, asr pc
 758:	00000000 	andeq	r0, r0, r0
 75c:	05ac0000 	streq	r0, [ip, #0]!
 760:	05b01fff 	ldreq	r1, [r0, #4095]!	; 0xfff
 764:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 768:	ff05b051 			; <UNDEFINED> instruction: 0xff05b051
 76c:	ff06121f 			; <UNDEFINED> instruction: 0xff06121f
 770:	5300011f 	movwpl	r0, #287	; 0x11f
 774:	1fff0612 	svcne	0x00ff0612
 778:	1fff061e 	svcne	0x00ff061e
 77c:	01f30004 	mvnseq	r0, r4
 780:	061e9f51 	ssaxeq	r9, lr, r1
 784:	063d1fff 	shsub8eq	r1, sp, pc	; <UNPREDICTABLE>
 788:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 78c:	ff063d53 			; <UNDEFINED> instruction: 0xff063d53
 790:	ff063e1f 			; <UNDEFINED> instruction: 0xff063e1f
 794:	f300041f 	vqshl.u8	d0, d15, d0
 798:	3e9f5101 	fmlcce	f5, f7, f1
 79c:	461fff06 	ldrmi	pc, [pc], -r6, lsl #30
 7a0:	011fff06 	tsteq	pc, r6, lsl #30
 7a4:	00005300 	andeq	r5, r0, r0, lsl #6
 7a8:	00000000 	andeq	r0, r0, r0
 7ac:	05ac0000 	streq	r0, [ip, #0]!
 7b0:	05c21fff 	strbeq	r1, [r2, #4095]	; 0xfff
 7b4:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 7b8:	ff05c252 			; <UNDEFINED> instruction: 0xff05c252
 7bc:	ff06461f 			; <UNDEFINED> instruction: 0xff06461f
 7c0:	5500011f 	strpl	r0, [r0, #-287]	; 0x11f
	...
 7cc:	1fff05ac 	svcne	0x00ff05ac
 7d0:	1fff05ca 	svcne	0x00ff05ca
 7d4:	00700005 	rsbseq	r0, r0, r5
 7d8:	ca9f1a3f 	bgt	fe7c70dc <stack_top+0xde7d59cc>
 7dc:	0c1fff05 	ldceq	15, cr15, [pc], {5}
 7e0:	051fff06 	ldreq	pc, [pc, #-3846]	; fffff8e2 <stack_top+0xe000e1d2>
 7e4:	3f007600 	svccc	0x00007600
 7e8:	060c9f1a 			; <UNDEFINED> instruction: 0x060c9f1a
 7ec:	06461fff 			; <UNDEFINED> instruction: 0x06461fff
 7f0:	00061fff 	strdeq	r1, [r6], -pc	; <UNPREDICTABLE>
 7f4:	3f5001f3 	svccc	0x005001f3
 7f8:	00009f1a 	andeq	r9, r0, sl, lsl pc
 7fc:	00000000 	andeq	r0, r0, r0
 800:	05ac0000 	streq	r0, [ip, #0]!
 804:	05ca1fff 	strbeq	r1, [sl, #4095]	; 0xfff
 808:	00071fff 	strdeq	r1, [r7], -pc	; <UNPREDICTABLE>
 80c:	25380070 	ldrcs	r0, [r8, #-112]!	; 0x70
 810:	ca9f1a3f 	bgt	fe7c7114 <stack_top+0xde7d5a04>
 814:	0c1fff05 	ldceq	15, cr15, [pc], {5}
 818:	071fff06 	ldreq	pc, [pc, -r6, lsl #30]
 81c:	38007600 	stmdacc	r0, {r9, sl, ip, sp, lr}
 820:	9f1a3f25 	svcls	0x001a3f25
 824:	1fff060c 	svcne	0x00ff060c
 828:	1fff0646 	svcne	0x00ff0646
 82c:	01f30008 	mvnseq	r0, r8
 830:	3f253850 	svccc	0x00253850
 834:	00009f1a 	andeq	r9, r0, sl, lsl pc
 838:	00000000 	andeq	r0, r0, r0
 83c:	05b00000 	ldreq	r0, [r0, #0]!
 840:	061d1fff 	ssub8eq	r1, sp, pc	; <UNPREDICTABLE>
 844:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 848:	ff061e51 			; <UNDEFINED> instruction: 0xff061e51
 84c:	ff063d1f 			; <UNDEFINED> instruction: 0xff063d1f
 850:	5100011f 	tstpl	r0, pc, lsl r1
 854:	1fff063e 	svcne	0x00ff063e
 858:	1fff0646 	svcne	0x00ff0646
 85c:	00510001 	subseq	r0, r1, r1
 860:	00000000 	andeq	r0, r0, r0
 864:	d0000000 	andle	r0, r0, r0
 868:	da1fff05 	ble	800484 <_start-0x1f7efb7c>
 86c:	021fff05 	andseq	pc, pc, #5, 30
 870:	da9f3100 	ble	fe7ccc78 <stack_top+0xde7db568>
 874:	e41fff05 	ldr	pc, [pc], #-3845	; 87c <_start-0x1ffef784>
 878:	021fff05 	andseq	pc, pc, #5, 30
 87c:	e49f3800 	ldr	r3, [pc], #2048	; 884 <_start-0x1ffef77c>
 880:	ee1fff05 	cdp	15, 1, cr15, cr15, cr5, {0}
 884:	031fff05 	tsteq	pc, #5, 30
 888:	9f200800 	svcls	0x00200800
 88c:	1fff05ee 	svcne	0x00ff05ee
 890:	1fff05f6 	svcne	0x00ff05f6
 894:	40080003 	andmi	r0, r8, r3
 898:	ff05f69f 			; <UNDEFINED> instruction: 0xff05f69f
 89c:	ff06001f 			; <UNDEFINED> instruction: 0xff06001f
 8a0:	0a00041f 	beq	1924 <_start-0x1ffee6dc>
 8a4:	0c9f0100 	ldfeqs	f0, [pc], {0}
 8a8:	1d1fff06 	ldcne	15, cr15, [pc, #-24]	; 898 <_start-0x1ffef768>
 8ac:	011fff06 	tsteq	pc, r6, lsl #30
 8b0:	061e5000 	ldreq	r5, [lr], -r0
 8b4:	063d1fff 	shsub8eq	r1, sp, pc	; <UNPREDICTABLE>
 8b8:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 8bc:	ff063e50 			; <UNDEFINED> instruction: 0xff063e50
 8c0:	ff06441f 			; <UNDEFINED> instruction: 0xff06441f
 8c4:	5000011f 	andpl	r0, r0, pc, lsl r1
	...
 8d0:	1fff05d2 	svcne	0x00ff05d2
 8d4:	1fff05da 	svcne	0x00ff05da
 8d8:	dc520001 	mrrcle	0, 0, r0, r2, cr1
 8dc:	e41fff05 	ldr	pc, [pc], #-3845	; 8e4 <_start-0x1ffef71c>
 8e0:	011fff05 	tsteq	pc, r5, lsl #30
 8e4:	05e65200 	strbeq	r5, [r6, #512]!	; 0x200
 8e8:	05ee1fff 	strbeq	r1, [lr, #4095]!	; 0xfff
 8ec:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 8f0:	ff05ee52 			; <UNDEFINED> instruction: 0xff05ee52
 8f4:	ff06001f 			; <UNDEFINED> instruction: 0xff06001f
 8f8:	3000021f 	andcc	r0, r0, pc, lsl r2
 8fc:	ff060c9f 			; <UNDEFINED> instruction: 0xff060c9f
 900:	ff061d1f 			; <UNDEFINED> instruction: 0xff061d1f
 904:	5200011f 	andpl	r0, r0, #-1073741817	; 0xc0000007
 908:	1fff061e 	svcne	0x00ff061e
 90c:	1fff063d 	svcne	0x00ff063d
 910:	3e520001 	cdpcc	0, 5, cr0, cr2, cr1, {0}
 914:	401fff06 	andsmi	pc, pc, r6, lsl #30
 918:	011fff06 	tsteq	pc, r6, lsl #30
 91c:	00005200 	andeq	r5, r0, r0, lsl #4
 920:	00000000 	andeq	r0, r0, r0
 924:	05d60000 	ldrbeq	r0, [r6]
 928:	05da1fff 	ldrbeq	r1, [sl, #4095]	; 0xfff
 92c:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 930:	ff05e054 			; <UNDEFINED> instruction: 0xff05e054
 934:	ff05e41f 			; <UNDEFINED> instruction: 0xff05e41f
 938:	5400011f 	strpl	r0, [r0], #-287	; 0x11f
 93c:	1fff05ea 	svcne	0x00ff05ea
 940:	1fff05ee 	svcne	0x00ff05ee
 944:	f0540001 			; <UNDEFINED> instruction: 0xf0540001
 948:	f61fff05 	pldw	[pc], -r5, lsl #30
 94c:	011fff05 	tsteq	pc, r5, lsl #30
 950:	05f85400 	ldrbeq	r5, [r8, #1024]!	; 0x400
 954:	06001fff 			; <UNDEFINED> instruction: 0x06001fff
 958:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 95c:	ff060854 			; <UNDEFINED> instruction: 0xff060854
 960:	ff06281f 			; <UNDEFINED> instruction: 0xff06281f
 964:	5400011f 	strpl	r0, [r0], #-287	; 0x11f
 968:	1fff062a 	svcne	0x00ff062a
 96c:	1fff0630 	svcne	0x00ff0630
 970:	34540001 	ldrbcc	r0, [r4], #-1
 974:	361fff06 	ldrcc	pc, [pc], -r6, lsl #30
 978:	011fff06 	tsteq	pc, r6, lsl #30
 97c:	063e5400 	ldrteq	r5, [lr], -r0, lsl #8
 980:	06461fff 			; <UNDEFINED> instruction: 0x06461fff
 984:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 988:	00000054 	andeq	r0, r0, r4, asr r0
 98c:	00000000 	andeq	r0, r0, r0
 990:	ff06c800 			; <UNDEFINED> instruction: 0xff06c800
 994:	ff06ca1f 			; <UNDEFINED> instruction: 0xff06ca1f
 998:	7d00021f 	sfmvc	f0, 4, [r0, #-124]	; 0xffffff84
 99c:	ff06ca00 			; <UNDEFINED> instruction: 0xff06ca00
 9a0:	ff06cc1f 			; <UNDEFINED> instruction: 0xff06cc1f
 9a4:	7d00021f 	sfmvc	f0, 4, [r0, #-124]	; 0xffffff84
 9a8:	ff06cc08 			; <UNDEFINED> instruction: 0xff06cc08
 9ac:	ff07081f 			; <UNDEFINED> instruction: 0xff07081f
 9b0:	7d00031f 	stcvc	3, cr0, [r0, #-124]	; 0xffffff84
 9b4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 9b8:	00000000 	andeq	r0, r0, r0
 9bc:	06c80000 	strbeq	r0, [r8], r0
 9c0:	06d11fff 			; <UNDEFINED> instruction: 0x06d11fff
 9c4:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 9c8:	ff06d150 			; <UNDEFINED> instruction: 0xff06d150
 9cc:	ff07021f 			; <UNDEFINED> instruction: 0xff07021f
 9d0:	f300041f 	vqshl.u8	d0, d15, d0
 9d4:	029f5001 	addseq	r5, pc, #1
 9d8:	041fff07 	ldreq	pc, [pc], #-3847	; 9e0 <_start-0x1ffef620>
 9dc:	011fff07 	tsteq	pc, r7, lsl #30
 9e0:	07045000 	streq	r5, [r4, -r0]
 9e4:	07081fff 			; <UNDEFINED> instruction: 0x07081fff
 9e8:	00041fff 	strdeq	r1, [r4], -pc	; <UNPREDICTABLE>
 9ec:	9f5001f3 	svcls	0x005001f3
	...
 9f8:	1fff06c8 	svcne	0x00ff06c8
 9fc:	1fff06d1 	svcne	0x00ff06d1
 a00:	d1510001 	cmple	r1, r1
 a04:	021fff06 	andseq	pc, pc, #6, 30
 a08:	041fff07 	ldreq	pc, [pc], #-3847	; a10 <_start-0x1ffef5f0>
 a0c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 a10:	ff07029f 			; <UNDEFINED> instruction: 0xff07029f
 a14:	ff07041f 			; <UNDEFINED> instruction: 0xff07041f
 a18:	5100011f 	tstpl	r0, pc, lsl r1
 a1c:	1fff0704 	svcne	0x00ff0704
 a20:	1fff0708 	svcne	0x00ff0708
 a24:	01f30004 	mvnseq	r0, r4
 a28:	00009f51 	andeq	r9, r0, r1, asr pc
 a2c:	00000000 	andeq	r0, r0, r0
 a30:	06d60000 	ldrbeq	r0, [r6], r0
 a34:	07021fff 			; <UNDEFINED> instruction: 0x07021fff
 a38:	00031fff 	strdeq	r1, [r3], -pc	; <UNPREDICTABLE>
 a3c:	007fb091 			; <UNDEFINED> instruction: 0x007fb091
 a40:	00000000 	andeq	r0, r0, r0
 a44:	d2000000 	andle	r0, r0, #0
 a48:	d61fff06 	ldrle	pc, [pc], -r6, lsl #30
 a4c:	011fff06 	tsteq	pc, r6, lsl #30
 a50:	06de5000 	ldrbeq	r5, [lr], r0
 a54:	06ea1fff 			; <UNDEFINED> instruction: 0x06ea1fff
 a58:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 a5c:	ff06f250 			; <UNDEFINED> instruction: 0xff06f250
 a60:	ff06f81f 			; <UNDEFINED> instruction: 0xff06f81f
 a64:	5000011f 	andpl	r0, r0, pc, lsl r1
	...
 a70:	1fff06d6 	svcne	0x00ff06d6
 a74:	1fff0702 	svcne	0x00ff0702
 a78:	b4910003 	ldrlt	r0, [r1], #3
 a7c:	0000007f 	andeq	r0, r0, pc, ror r0
 a80:	00000000 	andeq	r0, r0, r0
 a84:	ff06c800 			; <UNDEFINED> instruction: 0xff06c800
 a88:	ff06d61f 			; <UNDEFINED> instruction: 0xff06d61f
 a8c:	3000021f 	andcc	r0, r0, pc, lsl r2
 a90:	ff06d69f 			; <UNDEFINED> instruction: 0xff06d69f
 a94:	ff07021f 			; <UNDEFINED> instruction: 0xff07021f
 a98:	5400011f 	strpl	r0, [r0], #-287	; 0x11f
 a9c:	1fff0702 	svcne	0x00ff0702
 aa0:	1fff0708 	svcne	0x00ff0708
 aa4:	9f300002 	svcls	0x00300002
	...
 ab4:	00000002 	andeq	r0, r0, r2
 ab8:	007d0002 	rsbseq	r0, sp, r2
 abc:	00000002 	andeq	r0, r0, r2
 ac0:	0000004c 	andeq	r0, r0, ip, asr #32
 ac4:	087d0002 	ldmdaeq	sp!, {r1}^
	...
 ad4:	0000001a 	andeq	r0, r0, sl, lsl r0
 ad8:	1a500001 	bne	1400ae4 <_start-0x1ebef51c>
 adc:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
 ae0:	04000000 	streq	r0, [r0], #-0
 ae4:	5001f300 	andpl	pc, r1, r0, lsl #6
 ae8:	00002e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
 aec:	00003000 	andeq	r3, r0, r0
 af0:	50000100 	andpl	r0, r0, r0, lsl #2
 af4:	00000030 	andeq	r0, r0, r0, lsr r0
 af8:	0000004c 	andeq	r0, r0, ip, asr #32
 afc:	01f30004 	mvnseq	r0, r4
 b00:	00009f50 	andeq	r9, r0, r0, asr pc
 b04:	00000000 	andeq	r0, r0, r0
 b08:	00160000 	andseq	r0, r6, r0
 b0c:	001a0000 	andseq	r0, sl, r0
 b10:	00020000 	andeq	r0, r2, r0
 b14:	00009f30 	andeq	r9, r0, r0, lsr pc
	...
 b20:	00300000 	eorseq	r0, r0, r0
 b24:	00020000 	andeq	r0, r2, r0
 b28:	00309f30 	eorseq	r9, r0, r0, lsr pc
 b2c:	004c0000 	subeq	r0, ip, r0
 b30:	00010000 	andeq	r0, r1, r0
 b34:	00000050 	andeq	r0, r0, r0, asr r0
 b38:	00000000 	andeq	r0, r0, r0
 b3c:	00004c00 	andeq	r4, r0, r0, lsl #24
 b40:	00004e00 	andeq	r4, r0, r0, lsl #28
 b44:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 b48:	00004e00 	andeq	r4, r0, r0, lsl #28
 b4c:	00008000 	andeq	r8, r0, r0
 b50:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 b54:	0000000c 	andeq	r0, r0, ip
 b58:	00000000 	andeq	r0, r0, r0
 b5c:	00004c00 	andeq	r4, r0, r0, lsl #24
 b60:	00005600 	andeq	r5, r0, r0, lsl #12
 b64:	52000100 	andpl	r0, r0, #0, 2
 b68:	00000056 	andeq	r0, r0, r6, asr r0
 b6c:	00000080 	andeq	r0, r0, r0, lsl #1
 b70:	01f30004 	mvnseq	r0, r4
 b74:	00009f52 	andeq	r9, r0, r2, asr pc
 b78:	00000000 	andeq	r0, r0, r0
 b7c:	00760000 	rsbseq	r0, r6, r0
 b80:	007a0000 	rsbseq	r0, sl, r0
 b84:	00010000 	andeq	r0, r1, r0
 b88:	00000052 	andeq	r0, r0, r2, asr r0
 b8c:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0000002a 	andeq	r0, r0, sl, lsr #32
   4:	0000002e 	andeq	r0, r0, lr, lsr #32
   8:	00000032 	andeq	r0, r0, r2, lsr r0
   c:	0000009c 	muleq	r0, ip, r0
	...
  18:	0000002a 	andeq	r0, r0, sl, lsr #32
  1c:	0000002e 	andeq	r0, r0, lr, lsr #32
  20:	00000032 	andeq	r0, r0, r2, lsr r0
  24:	0000009c 	muleq	r0, ip, r0
	...
  30:	000000ca 	andeq	r0, r0, sl, asr #1
  34:	000000d4 	ldrdeq	r0, [r0], -r4
  38:	000000da 	ldrdeq	r0, [r0], -sl
  3c:	000000de 	ldrdeq	r0, [r0], -lr
	...
  48:	000000d4 	ldrdeq	r0, [r0], -r4
  4c:	000000d8 	ldrdeq	r0, [r0], -r8
  50:	000000de 	ldrdeq	r0, [r0], -lr
  54:	000000e2 	andeq	r0, r0, r2, ror #1
	...
  60:	00000350 	andeq	r0, r0, r0, asr r3
  64:	00000354 	andeq	r0, r0, r4, asr r3
  68:	00000368 	andeq	r0, r0, r8, ror #6
  6c:	00000378 	andeq	r0, r0, r8, ror r3
	...
  78:	00000350 	andeq	r0, r0, r0, asr r3
  7c:	00000354 	andeq	r0, r0, r4, asr r3
  80:	00000368 	andeq	r0, r0, r8, ror #6
  84:	00000378 	andeq	r0, r0, r8, ror r3
	...
  90:	1fff05ac 	svcne	0x00ff05ac
  94:	1fff0646 	svcne	0x00ff0646
  98:	1fff06c8 	svcne	0x00ff06c8
  9c:	1fff0708 	svcne	0x00ff0708
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f474254 	svcpl	0x00474254
   4:	00535f41 	subseq	r5, r3, r1, asr #30
   8:	5f746567 	svcpl	0x00746567
   c:	5f676274 	svcpl	0x00676274
  10:	006b6c63 	rsbeq	r6, fp, r3, ror #24
  14:	5f6f6376 	svcpl	0x006f6376
  18:	00766964 	rsbseq	r6, r6, r4, ror #18
  1c:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
  20:	6f6c6300 	svcvs	0x006c6300
  24:	632e6b63 	teqvs	lr, #101376	; 0x18c00
  28:	67627400 	strbvs	r7, [r2, -r0, lsl #8]!
  2c:	75004d5f 	strvc	r4, [r0, #-3423]	; 0xd5f
  30:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  34:	2064656e 	rsbcs	r6, r4, lr, ror #10
  38:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  3c:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
  40:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
  44:	336d6300 	cmncc	sp, #0, 6
  48:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0x5f
  4c:	6c63735f 	stclvs	3, cr7, [r3], #-380	; 0xfffffe84
  50:	68730031 	ldmdavs	r3!, {r0, r4, r5}^
  54:	2074726f 	rsbscs	r7, r4, pc, ror #4
  58:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  5c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  60:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
  64:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
  68:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
  6c:	6b6c635f 	blvs	1b18df0 <_start-0x1e4d7210>
  70:	6f6c6300 	svcvs	0x006c6300
  74:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3	; <UNPREDICTABLE>
  78:	00656e69 	rsbeq	r6, r5, r9, ror #28
  7c:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
  80:	00736e5f 	rsbseq	r6, r3, pc, asr lr
  84:	76676572 			; <UNDEFINED> instruction: 0x76676572
  88:	74006c61 	strvc	r6, [r0], #-3169	; 0xc61
  8c:	745f6762 	ldrbvc	r6, [pc], #-1890	; 94 <_start-0x1ffeff6c>
  90:	74007079 	strvc	r7, [r0], #-121	; 0x79
  94:	4e5f6762 	cdpmi	7, 5, cr6, cr15, cr2, {3}
  98:	47425400 	strbmi	r5, [r2, -r0, lsl #8]
  9c:	505f425f 	subspl	r4, pc, pc, asr r2	; <UNPREDICTABLE>
  a0:	47425400 	strbmi	r5, [r2, -r0, lsl #8]
  a4:	535f425f 	cmppl	pc, #-268435451	; 0xf0000005
  a8:	6f682f00 	svcvs	0x00682f00
  ac:	6a2f656d 	bvs	bd9668 <_start-0x1f416998>
  b0:	52412f68 	subpl	r2, r1, #104, 30	; 0x1a0
  b4:	4144414d 	cmpmi	r4, sp, asr #2
  b8:	7837335f 	ldmdavc	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp}
  bc:	6f632f78 	svcvs	0x00632f78
  c0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
  c4:	69645f65 	stmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
  c8:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
  cc:	72742d6d 	rsbsvc	r2, r4, #6976	; 0x1b40
  d0:	65747375 	ldrbvs	r7, [r4, #-885]!	; 0x375
  d4:	69662d64 	stmdbvs	r6!, {r2, r5, r6, r8, sl, fp, sp}^
  d8:	61776d72 	cmnvs	r7, r2, ror sp
  dc:	312d6572 	teqcc	sp, r2, ror r5
  e0:	612f322e 	teqvs	pc, lr, lsr #4
  e4:	742d6d72 	strtvc	r6, [sp], #-3442	; 0xd72
  e8:	74737572 	ldrbtvc	r7, [r3], #-1394	; 0x572
  ec:	662d6465 	strtvs	r6, [sp], -r5, ror #8
  f0:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
  f4:	2d657261 	sfmcs	f7, 2, [r5, #-388]!	; 0xfffffe7c
  f8:	2f322e31 	svccs	0x00322e31
  fc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ffffff34 <stack_top+0xe000e824>
 100:	74772f73 	ldrbtvc	r2, [r7], #-3955	; 0xf73
 104:	74772f70 	ldrbtvc	r2, [r7], #-3952	; 0xf70
 108:	6700696d 	strvs	r6, [r0, -sp, ror #18]
 10c:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
 110:	635f6665 	cmpvs	pc, #105906176	; 0x6500000
 114:	6c006b6c 	stcvs	11, cr6, [r0], {108}	; 0x6c
 118:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 11c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 120:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 124:	6b6c6300 	blvs	1b18d2c <_start-0x1e4d72d4>
 128:	00736e5f 	rsbseq	r6, r3, pc, asr lr
 12c:	20554e47 	subscs	r4, r5, r7, asr #28
 130:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
 134:	00332e37 	eorseq	r2, r3, r7, lsr lr
 138:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 13c:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 140:	61770074 	cmnvs	r7, r4, ror r0
 144:	6e5f7469 	cdpvs	4, 5, cr7, cr15, cr9, {3}
 148:	6d630073 	stclvs	0, cr0, [r3, #-460]!	; 0xfffffe34
 14c:	72705f33 	rsbsvc	r5, r0, #51, 30	; 0xcc
 150:	63735f65 	cmnvs	r3, #404	; 0x194
 154:	6c00326c 	sfmvs	f3, 4, [r0], {108}	; 0x6c
 158:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 15c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 160:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 164:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 168:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 16c:	6c630074 	stclvs	0, cr0, [r3], #-464	; 0xfffffe30
 170:	5f6b636f 	svcpl	0x006b636f
 174:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 178:	47425400 	strbmi	r5, [r2, -r0, lsl #8]
 17c:	505f415f 	subspl	r4, pc, pc, asr r1	; <UNPREDICTABLE>
 180:	5f424d00 	svcpl	0x00424d00
 184:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
 188:	4441425f 	strbmi	r4, [r1], #-607	; 0x25f
 18c:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 18 <_start-0x1ffeffe8>
 190:	444e414d 	strbmi	r4, [lr], #-333	; 0x14d
 194:	75666500 	strbvc	r6, [r6, #-1280]!	; 0x500
 198:	775f6573 			; <UNDEFINED> instruction: 0x775f6573
 19c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
 1a0:	756f6300 	strbvc	r6, [pc, #-768]!	; fffffea8 <stack_top+0xe000e798>
 1a4:	6500746e 	strvs	r7, [r0, #-1134]	; 0x46e
 1a8:	65737566 	ldrbvs	r7, [r3, #-1382]!	; 0x566
 1ac:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1b0:	655f6574 	ldrbvs	r6, [pc, #-1396]	; fffffc44 <stack_top+0xe000e534>
 1b4:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
 1b8:	424d0065 	submi	r0, sp, #101	; 0x65
 1bc:	4154535f 	cmpmi	r4, pc, asr r3
 1c0:	55535f54 	ldrbpl	r5, [r3, #-3924]	; 0xf54
 1c4:	53454343 	movtpl	r4, #21315	; 0x5343
 1c8:	66650053 			; <UNDEFINED> instruction: 0x66650053
 1cc:	5f657375 	svcpl	0x00657375
 1d0:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 1d4:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
 1d8:	5f6f6e5f 	svcpl	0x006f6e5f
 1dc:	00636365 	rsbeq	r6, r3, r5, ror #6
 1e0:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
 1e4:	66650073 			; <UNDEFINED> instruction: 0x66650073
 1e8:	5f657375 	svcpl	0x00657375
 1ec:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 1f0:	5f424d00 	svcpl	0x00424d00
 1f4:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
 1f8:	4441425f 	strbmi	r4, [r1], #-607	; 0x25f
 1fc:	4752415f 			; <UNDEFINED> instruction: 0x4752415f
 200:	4e454d55 	mcrmi	13, 2, r4, cr5, cr5, {2}
 204:	66650054 			; <UNDEFINED> instruction: 0x66650054
 208:	2e657375 	mcrcs	3, 3, r7, cr5, cr5, {3}
 20c:	424d0063 	submi	r0, sp, #99	; 0x63
 210:	4154535f 	cmpmi	r4, pc, asr r3
 214:	414d5f54 	cmpmi	sp, r4, asr pc
 218:	64720058 	ldrbtvs	r0, [r2], #-88	; 0x58
 21c:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 220:	7400726f 	strvc	r7, [r0], #-623	; 0x26f
 224:	6f656d69 	svcvs	0x00656d69
 228:	73007475 	movwvc	r7, #1141	; 0x475
 22c:	00307165 	eorseq	r7, r0, r5, ror #2
 230:	31716573 	cmncc	r1, r3, ror r5
 234:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
 238:	00746573 	rsbseq	r6, r4, r3, ror r5
 23c:	786f626d 	stmdavc	pc!, {r0, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
 240:	6174735f 	cmnvs	r4, pc, asr r3
 244:	00737574 	rsbseq	r7, r3, r4, ror r5
 248:	655f7277 	ldrbvs	r7, [pc, #-631]	; ffffffd9 <stack_top+0xe000e8c9>
 24c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 250:	5f424d00 	svcpl	0x00424d00
 254:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
 258:	5f57485f 	svcpl	0x0057485f
 25c:	4f525245 	svcmi	0x00525245
 260:	424d0052 	submi	r0, sp, #82	; 0x52
 264:	4154535f 	cmpmi	r4, pc, asr r3
 268:	49545f54 	ldmdbmi	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
 26c:	554f454d 	strbpl	r4, [pc, #-1357]	; fffffd27 <stack_top+0xe000e617>
 270:	424d0054 	submi	r0, sp, #84	; 0x54
 274:	5f504f5f 	svcpl	0x00504f5f
 278:	44414552 	strbmi	r4, [r1], #-1362	; 0x552
 27c:	72616e00 	rsbvc	r6, r1, #0, 28
 280:	6d007367 	stcvs	3, cr7, [r0, #-412]	; 0xfffffe64
 284:	5f786f62 	svcpl	0x00786f62
 288:	6973706f 	ldmdbvs	r3!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
 28c:	4d00657a 	cfstr32mi	mvfx6, [r0, #-488]	; 0xfffffe18
 290:	504f5f42 	subpl	r5, pc, r2, asr #30
 294:	325f5a53 	subscc	r5, pc, #339968	; 0x53000
 298:	00423635 	subeq	r3, r2, r5, lsr r6
 29c:	4f5f424d 	svcmi	0x005f424d
 2a0:	52575f50 	subspl	r5, r7, #80, 30	; 0x140
 2a4:	00455449 	subeq	r5, r5, r9, asr #8
 2a8:	615f7277 	cmpvs	pc, r7, ror r2	; <UNPREDICTABLE>
 2ac:	00736772 	rsbseq	r6, r3, r2, ror r7
 2b0:	4f5f424d 	svcmi	0x005f424d
 2b4:	5f5a5350 	svcpl	0x005a5350
 2b8:	524f5744 	subpl	r5, pc, #68, 14	; 0x1100000
 2bc:	424d0044 	submi	r0, sp, #68	; 0x44
 2c0:	53504f5f 	cmppl	r0, #380	; 0x17c
 2c4:	414d5f5a 	cmpmi	sp, sl, asr pc
 2c8:	6d630058 	stclvs	0, cr0, [r3, #-352]!	; 0xfffffea0
 2cc:	78655f64 	stmdavc	r5!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 2d0:	74756365 	ldrbtvc	r6, [r5], #-869	; 0x365
 2d4:	706f0065 	rsbvc	r0, pc, r5, rrx
 2d8:	6d007a73 	vstrvs	s14, [r0, #-460]	; 0xfffffe34
 2dc:	006e6961 	rsbeq	r6, lr, r1, ror #18
 2e0:	65637865 	strbvs	r7, [r3, #-2149]!	; 0x865
 2e4:	6f697470 	svcvs	0x00697470
 2e8:	61685f6e 	cmnvs	r8, lr, ror #30
 2ec:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
 2f0:	626d0072 	rsbvs	r0, sp, #114	; 0x72
 2f4:	735f786f 	cmpvc	pc, #7274496	; 0x6f0000
 2f8:	00646e65 	rsbeq	r6, r4, r5, ror #28
 2fc:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
 300:	00746174 	rsbseq	r6, r4, r4, ror r1
 304:	65637865 	strbvs	r7, [r3, #-2149]!	; 0x865
 308:	6f697470 	svcvs	0x00697470
 30c:	626d006e 	rsbvs	r0, sp, #110	; 0x6e
 310:	6f5f786f 	svcvs	0x005f786f
 314:	69730070 	ldmdbvs	r3!, {r4, r5, r6}^
 318:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 31c:	4d006570 	cfstr32mi	mvfx6, [r0, #-448]	; 0xfffffe40
 320:	504f5f42 	subpl	r5, pc, r2, asr #30
 324:	425f5a53 	subsmi	r5, pc, #339968	; 0x53000
 328:	6d005449 	cfstrsvs	mvf5, [r0, #-292]	; 0xfffffedc
 32c:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
 330:	75640063 	strbvc	r0, [r4, #-99]!	; 0x63
 334:	00796d6d 	rsbseq	r6, r9, sp, ror #26
 338:	4f5f424d 	svcmi	0x005f424d
 33c:	5f5a5350 	svcpl	0x005a5350
 340:	44524f57 	ldrbmi	r4, [r2], #-3927	; 0xf57
 344:	5f424d00 	svcpl	0x00424d00
 348:	4d5f504f 	ldclmi	0, cr5, [pc, #-316]	; 214 <_start-0x1ffefdec>
 34c:	4d005841 	stcmi	8, cr5, [r0, #-260]	; 0xfffffefc
 350:	504f5f42 	subpl	r5, pc, r2, asr #30
 354:	425f5a53 	subsmi	r5, pc, #339968	; 0x53000
 358:	00455459 	subeq	r5, r5, r9, asr r4
 35c:	786f626d 	stmdavc	pc!, {r0, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
 360:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
 364:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
 368:	5f787200 	svcpl	0x00787200
 36c:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 370:	6f626d00 	svcvs	0x00626d00
 374:	00632e78 	rsbeq	r2, r3, r8, ror lr

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	1fff00d8 	svcne	0x00ff00d8
  1c:	00000014 	andeq	r0, r0, r4, lsl r0
  20:	00000014 	andeq	r0, r0, r4, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	1fff00ec 	svcne	0x00ff00ec
  2c:	000000d4 	ldrdeq	r0, [r0], -r4
  30:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  34:	00018e02 	andeq	r8, r1, r2, lsl #28
  38:	0000000c 	andeq	r0, r0, ip
  3c:	00000000 	andeq	r0, r0, r0
  40:	1fff01c0 	svcne	0x00ff01c0
  44:	00000014 	andeq	r0, r0, r4, lsl r0
  48:	00000014 	andeq	r0, r0, r4, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	1fff01d4 	svcne	0x00ff01d4
  54:	00000038 	andeq	r0, r0, r8, lsr r0
  58:	83080e41 	movwhi	r0, #36417	; 0x8e41
  5c:	00018e02 	andeq	r8, r1, r2, lsl #28
  60:	0000000c 	andeq	r0, r0, ip
  64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  68:	7c020001 	stcvc	0, cr0, [r2], {1}
  6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000060 	andeq	r0, r0, r0, rrx
  78:	1fff020c 	svcne	0x00ff020c
  7c:	000000ac 	andeq	r0, r0, ip, lsr #1
  80:	83180e41 	tsthi	r8, #1040	; 0x410
  84:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
  88:	87038604 	strhi	r8, [r3, -r4, lsl #12]
  8c:	00018e02 	andeq	r8, r1, r2, lsl #28
  90:	00000018 	andeq	r0, r0, r8, lsl r0
  94:	00000060 	andeq	r0, r0, r0, rrx
  98:	1fff02b8 	svcne	0x00ff02b8
  9c:	00000088 	andeq	r0, r0, r8, lsl #1
  a0:	83100e41 	tsthi	r0, #1040	; 0x410
  a4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
  a8:	00018e02 	andeq	r8, r1, r2, lsl #28
  ac:	00000024 	andeq	r0, r0, r4, lsr #32
  b0:	00000060 	andeq	r0, r0, r0, rrx
  b4:	1fff0340 	svcne	0x00ff0340
  b8:	000000ce 	andeq	r0, r0, lr, asr #1
  bc:	80280e43 	eorhi	r0, r8, r3, asr #28
  c0:	8409810a 	strhi	r8, [r9], #-266	; 0x10a
  c4:	86078508 	strhi	r8, [r7], -r8, lsl #10
  c8:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
  cc:	8a038904 	bhi	e24e4 <_start-0x1ff0db1c>
  d0:	00018e02 	andeq	r8, r1, r2, lsl #28
  d4:	00000024 	andeq	r0, r0, r4, lsr #32
  d8:	00000060 	andeq	r0, r0, r0, rrx
  dc:	1fff040e 	svcne	0x00ff040e
  e0:	0000019e 	muleq	r0, lr, r1
  e4:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
  e8:	86088509 	strhi	r8, [r8], -r9, lsl #10
  ec:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
  f0:	8a048905 	bhi	12250c <_start-0x1fecdaf4>
  f4:	8e028b03 	vmlahi.f64	d8, d2, d3
  f8:	480e4301 	stmdami	lr, {r0, r8, r9, lr}
  fc:	0000000c 	andeq	r0, r0, ip
 100:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 104:	7c020001 	stcvc	0, cr0, [r2], {1}
 108:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	000000fc 	strdeq	r0, [r0], -ip
 114:	1fff05ac 	svcne	0x00ff05ac
 118:	0000009a 	muleq	r0, sl, r0
 11c:	84140e43 	ldrhi	r0, [r4], #-3651	; 0xe43
 120:	86048505 	strhi	r8, [r4], -r5, lsl #10
 124:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 128:	00000001 	andeq	r0, r0, r1
 12c:	00000018 	andeq	r0, r0, r8, lsl r0
 130:	000000fc 	strdeq	r0, [r0], -ip
 134:	1fff06c8 	svcne	0x00ff06c8
 138:	00000040 	andeq	r0, r0, r0, asr #32
 13c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
 140:	41018e02 	tstmi	r1, r2, lsl #28
 144:	0000500e 	andeq	r5, r0, lr
 148:	0000000c 	andeq	r0, r0, ip
 14c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 150:	7c020001 	stcvc	0, cr0, [r2], {1}
 154:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 158:	00000014 	andeq	r0, r0, r4, lsl r0
 15c:	00000148 	andeq	r0, r0, r8, asr #2
 160:	1fff0648 	svcne	0x00ff0648
 164:	0000004c 	andeq	r0, r0, ip, asr #32
 168:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
 16c:	00018e02 	andeq	r8, r1, r2, lsl #28
 170:	00000018 	andeq	r0, r0, r8, lsl r0
 174:	00000148 	andeq	r0, r0, r8, asr #2
 178:	1fff0694 	svcne	0x00ff0694
 17c:	00000034 	andeq	r0, r0, r4, lsr r0
 180:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
 184:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 188:	00000001 	andeq	r0, r0, r1
