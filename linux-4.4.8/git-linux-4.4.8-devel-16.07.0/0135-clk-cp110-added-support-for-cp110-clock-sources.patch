From b655f34d2b0aa6d5785926ad74eac1e3f06e8bb4 Mon Sep 17 00:00:00 2001
From: Yehuda Yitschak <yehuday@marvell.com>
Date: Sun, 21 Feb 2016 11:26:30 +0200
Subject: [PATCH 135/538] clk: cp110: added support for cp110 clock sources

- added clock gating support based on the common clock gating scheme
- added support for CP110 clock sources

Change-Id: I0da57a1c7adae77113701e6841da917ce034b94d
Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
---
 .../clock/mvebu-armada-cp110-core-clock.txt        |  32 ++++++
 .../bindings/clock/mvebu-gated-clock.txt           |  29 ++++-
 arch/arm64/Kconfig.platforms                       |   2 +
 arch/arm64/boot/dts/marvell/armada-cp110.dtsi      |  12 ++
 drivers/clk/mvebu/Kconfig                          |   3 +
 drivers/clk/mvebu/Makefile                         |   1 +
 drivers/clk/mvebu/cp110.c                          | 125 +++++++++++++++++++++
 7 files changed, 203 insertions(+), 1 deletion(-)
 create mode 100644 Documentation/devicetree/bindings/clock/mvebu-armada-cp110-core-clock.txt
 create mode 100644 drivers/clk/mvebu/cp110.c

diff --git a/Documentation/devicetree/bindings/clock/mvebu-armada-cp110-core-clock.txt b/Documentation/devicetree/bindings/clock/mvebu-armada-cp110-core-clock.txt
new file mode 100644
index 0000000..6418bde
--- /dev/null
+++ b/Documentation/devicetree/bindings/clock/mvebu-armada-cp110-core-clock.txt
@@ -0,0 +1,32 @@
+* Clock bindings for Marvell MVEBU CP110 Core clocks
+
+The Marvell MVEBU Armada 7K/8K SoCs contain a block called CP110,
+hosting slow and high speed peripherals. This Device Tree
+binding allows to describe the core clocks of the CP110, whose
+frequencies are fixed except for the NAND clock.
+
+Clock consumers must specify the desired clock by having the clock ID
+in its "clocks" phandle cell.
+
+The following is a list of provided IDs and clock names for the core
+Armada AP806 clocks:
+
+ 0 = APLL - The PLL clock. Root of the clock tree
+ 1 = PPv2 - The Packet processor clock
+ 2 = EIP  - The encryption engine clock
+ 3 = Core - The clock of all other consumers (except NAND)
+ 4 = Nand - The clock of the NAND interface.
+
+Required properties:
+- compatible: must be be one of the following:
+	"marvell,armada-cp110-clock"
+- reg: must be the register address of the NAND clock control register
+- #clock-cells: from common clock binding; shall be set to 1
+
+Example:
+
+	cp110_clk: clk@0x6F8204 {
+		compatible = "marvell,armada-cp110-clock";
+		reg = <0x440700 0x4>;
+		#clock-cells = <1>;
+	};
diff --git a/Documentation/devicetree/bindings/clock/mvebu-gated-clock.txt b/Documentation/devicetree/bindings/clock/mvebu-gated-clock.txt
index 660e649..0ea7b6f 100644
--- a/Documentation/devicetree/bindings/clock/mvebu-gated-clock.txt
+++ b/Documentation/devicetree/bindings/clock/mvebu-gated-clock.txt
@@ -1,12 +1,38 @@
 * Gated Clock bindings for Marvell EBU SoCs
 
-Marvell Armada 370/375/380/385/39x/XP, Dove and Kirkwood allow some
+Marvell Armada 370/375/380/385/39x/XP, Dove, Kirkwood, and CP-110 allow some
 peripheral clocks to be gated to save some power. The clock consumer
 should specify the desired clock by having the clock ID in its
 "clocks" phandle cell. The clock ID is directly mapped to the
 corresponding clock gating control bit in HW to ease manual clock
 lookup in datasheet.
 
+The following is a list of provided IDs for Armada CPN110 component:
+ID	Clock		Peripheral
+-----------------------------------
+0	Audio		AC97 Cntrl
+1	communit	TDM Comm-Unit
+2	nand		Nand Flash Ctrl
+3	pp		Packet Processor
+4	sd		SD/eMMC
+5	mg		MG
+5	mg_core		MG Core
+7	xor1		XOR Engine 1
+8	xor0		XOR Engine 0
+9	gop		Ethernet GOP
+11	pcie_x1_0	PCIe x1, unit 0
+12	pcie_x1_1	PCIe x1, unit 1
+13	pcie_x4		PCIe x4
+14	pcie_core	PCIe Core
+15	sata0		Sata
+16	satausbcore	Sata/USB Core
+18	sd-mmc		SD/MMC unit
+22	usb3h0		USB3 Host #0
+23	USB3h1		USB3 Host #1
+24	USB3d		USB3 device
+25	eip150		EIP-150
+26	eip197		EIP-197
+
 The following is a list of provided IDs for Armada 370:
 ID	Clock	Peripheral
 -----------------------------------
@@ -162,6 +188,7 @@ ID	Clock	Peripheral
 
 Required properties:
 - compatible : shall be one of the following:
+	"marvell,armada-cp110-gating-clock" - for A8K CP110 component clock gating.
 	"marvell,armada-370-gating-clock" - for Armada 370 SoC clock gating
 	"marvell,armada-375-gating-clock" - for Armada 375 SoC clock gating
 	"marvell,armada-380-gating-clock" - for Armada 380/385 SoC clock gating
diff --git a/arch/arm64/Kconfig.platforms b/arch/arm64/Kconfig.platforms
index 04645ad..575614d 100644
--- a/arch/arm64/Kconfig.platforms
+++ b/arch/arm64/Kconfig.platforms
@@ -4,8 +4,10 @@ config ARCH_MVEBU
 	bool "Marvell EBU SoC Family"
 	select ARM_GIC_ODMI
 	select MVEBU_PIC
+	select MVEBU_CLK_COMMON
 	select ARMADA_AP806_CORE_CLK
 	select ARMADA_AP806_RING_CLK
+	select ARMADA_CP110_CLK
 	help
 	  This enables support for Marvell EBU familly, including:
 	   - Armada 3700 SoC Family
diff --git a/arch/arm64/boot/dts/marvell/armada-cp110.dtsi b/arch/arm64/boot/dts/marvell/armada-cp110.dtsi
index c21e87e..289c6ed 100644
--- a/arch/arm64/boot/dts/marvell/armada-cp110.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-cp110.dtsi
@@ -17,3 +17,15 @@
  * Generic Device Tree describing Marvell Armada CP-110 device
  */
 
+cp110_clk: clk@0x440700 {
+	compatible = "marvell,armada-cp110-clock";
+	reg = <0x440700 0x4>;
+	#clock-cells = <1>;
+};
+
+gateclk: clock-gating-control@440220 {
+	compatible = "marvell,armada-cp110-gating-clock";
+	reg = <0x440220 0x4>;
+	clocks = <&cp110_clk 3>;
+	#clock-cells = <1>;
+};
diff --git a/drivers/clk/mvebu/Kconfig b/drivers/clk/mvebu/Kconfig
index 5d30aac..8d6f007 100644
--- a/drivers/clk/mvebu/Kconfig
+++ b/drivers/clk/mvebu/Kconfig
@@ -48,3 +48,6 @@ config ARMADA_AP806_CORE_CLK
 
 config ARMADA_AP806_RING_CLK
 	bool
+
+config ARMADA_CP110_CLK
+	bool
diff --git a/drivers/clk/mvebu/Makefile b/drivers/clk/mvebu/Makefile
index 41902ae..8390f06 100644
--- a/drivers/clk/mvebu/Makefile
+++ b/drivers/clk/mvebu/Makefile
@@ -7,6 +7,7 @@ obj-$(CONFIG_ARMADA_38X_CLK)	+= armada-38x.o
 obj-$(CONFIG_ARMADA_39X_CLK)	+= armada-39x.o
 obj-$(CONFIG_ARMADA_AP806_CORE_CLK) += ap806-core.o
 obj-$(CONFIG_ARMADA_AP806_RING_CLK) += ap806-ring.o
+obj-$(CONFIG_ARMADA_CP110_CLK)  += cp110.o
 obj-$(CONFIG_ARMADA_XP_CLK)	+= armada-xp.o
 obj-$(CONFIG_DOVE_CLK)		+= dove.o
 obj-$(CONFIG_KIRKWOOD_CLK)	+= kirkwood.o
diff --git a/drivers/clk/mvebu/cp110.c b/drivers/clk/mvebu/cp110.c
new file mode 100644
index 0000000..6a5ad0d
--- /dev/null
+++ b/drivers/clk/mvebu/cp110.c
@@ -0,0 +1,125 @@
+/***************************************************************************
+* Copyright (C) 2015 Marvell International Ltd.
+* ***************************************************************************
+* This program is free software: you can redistribute it and/or modify it
+* under the terms of the GNU General Public License as published by the Free
+* Software Foundation, either version 2 of the License, or any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program.  If not, see <http://www.gnu.org/licenses/>.
+* ***************************************************************************
+*/
+
+#include <linux/kernel.h>
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/slab.h>
+#include "common.h"
+
+#define CPN110_APLL_CLK_FREQ	(1000000000)
+
+/* NAND clock frequency control bit (250 / 400) */
+#define NF_CLOCK_SEL_400_MASK       (0x1)
+
+enum cp110_clock_id {
+	CP110_APLL_CLK = 0,
+	CP110_PPV2_CLK = 1,
+	CP110_EIP_CLK  = 2,
+	CP110_CORE_CLK = 3,
+	CP110_NAND_CLK = 4,
+	CP110_CLK_CNT
+};
+
+static struct clk *cp110_core_clks[CP110_CLK_CNT];
+
+static struct clk_onecell_data cp110_core_clk_data = {
+	.clks = cp110_core_clks,
+	.clk_num = CP110_CLK_CNT,
+};
+
+static void __init cp110_clk_init(struct device_node *np)
+{
+	void __iomem *base;
+	u32 nand_clk_ctrl;
+
+	base = of_iomap(np, 0);
+	if (WARN_ON(!base))
+		return;
+
+	nand_clk_ctrl = readl(base);
+	iounmap(base);
+
+	/* Register the APLL which is the root of the clk tree */
+	cp110_core_clks[CP110_APLL_CLK] = clk_register_fixed_rate(NULL, "apll-clk",
+			NULL, CLK_IS_ROOT, CPN110_APLL_CLK_FREQ);
+
+	/* PPv2 is APLL/3 */
+	cp110_core_clks[CP110_PPV2_CLK] = clk_register_fixed_factor(NULL, "ppv2-clk",
+			"apll-clk", 0, 1, 3);
+
+	/* EIP clock is APLL/2 */
+	cp110_core_clks[CP110_EIP_CLK] = clk_register_fixed_factor(NULL, "eip-clk",
+			"apll-clk", 0, 1, 2);
+
+	/* Core clock is EIP/2 */
+	cp110_core_clks[CP110_CORE_CLK] = clk_register_fixed_factor(NULL, "core-clk",
+			"eip-clk", 0, 1, 2);
+
+	/* NAND can be either APLL/2.5 or core clock */
+	if (nand_clk_ctrl & NF_CLOCK_SEL_400_MASK)
+		cp110_core_clks[CP110_NAND_CLK] = clk_register_fixed_factor(NULL, "nand-clk",
+				"apll-clk", 0, 2, 5);
+	else
+		cp110_core_clks[CP110_NAND_CLK] = clk_register_fixed_factor(NULL, "nand-clk",
+				"core-clk", 0, 1, 1);
+
+	of_clk_add_provider(np, of_clk_src_onecell_get,
+			    &cp110_core_clk_data);
+
+}
+
+CLK_OF_DECLARE(cp110_clk, "marvell,armada-cp110-clock", cp110_clk_init);
+
+/*
+ * Clock Gating Control
+ */
+static const struct clk_gating_soc_desc armada_cp110_gating_desc[] __initconst = {
+
+	{"audio", NULL, 0},
+	{"communit", NULL, 1},
+	{"nand", "nand-clk", 2},
+	{"pp", "ppv2-clk", 3},
+	{"sd", NULL, 4},
+	{"mg", NULL, 5},
+	{"mg_core", NULL, 6},
+	{"xor1", NULL, 7},
+	{"xor0", NULL, 8},
+	{"gop", NULL, 9},
+	{"pcie_x1_0", NULL, 11},
+	{"pcie_x1_1", NULL, 12},
+	{"pcie_x4", NULL, 13},
+	{"pcie_core", NULL, 14},
+	{"sata", NULL, 15},
+	{"sata_usb_core", NULL, 16},
+	{"sdmmc_core", NULL, 18},
+	{"usb3h0", NULL, 22},
+	{"usb3h1", NULL, 23},
+	{"usb3d", NULL, 24},
+	{"eip150", "eip-clk", 25},
+	{"eip197", "eip-clk", 26},
+	{ }
+};
+
+static void __init armada_cp110_clk_gating_init(struct device_node *np)
+{
+	mvebu_clk_gating_setup(np, armada_cp110_gating_desc);
+}
+CLK_OF_DECLARE(armada_cp110_clk_gating, "marvell,armada-cp110-gating-clock",
+	       armada_cp110_clk_gating_init);
-- 
1.9.1

