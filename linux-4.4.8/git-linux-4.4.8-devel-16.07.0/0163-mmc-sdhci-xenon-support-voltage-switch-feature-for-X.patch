From 1a383e01f8cf36e590a856c296b9c92e04e2f792 Mon Sep 17 00:00:00 2001
From: Marcin Wojtas <mw@semihalf.com>
Date: Mon, 15 Feb 2016 01:27:46 +0100
Subject: [PATCH 163/538] mmc: sdhci-xenon: support voltage switch feature for
 Xenon

Some host controller such as Xenon need additional setting
when switch signal voltage in eMMC mode.
And need to re-enable internal clock before voltage switch.
1. add a callback routine "voltage_switch_pre" in
    struct sdhci_ops, which is used by some host controller
    which need re-enable the internal clock before voltage
    switch
2. implement voltage_switch_pre callback routine in Xenon
    driver and register it.
3. call voltage_switch also in 3.3v case in sdhci
4. implement voltage_switch callback routine in Xenon driver
   and register it.

Change-Id: I0607aae756a9250d2dc4f013e08d3ce6a2d23819
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27678
Reviewed-by: Nadav Haklai <nadavh@marvell.com>
Tested-by: Nadav Haklai <nadavh@marvell.com>
---
 drivers/mmc/host/sdhci-xenon.c | 91 ++++++++++++++++++++++++++++++++++++++++++
 drivers/mmc/host/sdhci.c       |  8 ++++
 drivers/mmc/host/sdhci.h       |  1 +
 3 files changed, 100 insertions(+)

diff --git a/drivers/mmc/host/sdhci-xenon.c b/drivers/mmc/host/sdhci-xenon.c
index dd087d6..24f0af6 100644
--- a/drivers/mmc/host/sdhci-xenon.c
+++ b/drivers/mmc/host/sdhci-xenon.c
@@ -42,6 +42,16 @@
 
 #define SDHC_SYS_EXT_OP_CTRL			0x010c
 
+#define SDHC_SLOT_eMMC_CTRL			0x0130
+#define  ENABLE_DATA_STROBE			(1 << 24)
+#define  SET_EMMC_RSTN				(1 << 16)
+#define  DISABLE_RD_DATA_CRC			(1 << 14)
+#define  DISABLE_CRC_STAT_TOKEN			(1 << 13)
+#define  eMMC_VCCQ_MASK				0x3
+#define   eMMC_VCCQ_1_8V			0x1
+#define   eMMC_VCCQ_1_2V			0x2
+#define	  eMMC_VCCQ_3_3V			0x3
+
 #define SDHC_SLOT_RETUNING_REQ_CTRL		0x0144
 #define  RETUNING_COMPATIBLE			0x1
 
@@ -185,6 +195,85 @@ static void sdhci_xenon_reset(struct sdhci_host *host, u8 mask)
 	sdhci_xenon_reset_exit(host, host->mmc->slotno, mask);
 }
 
+static void sdhci_xenon_voltage_switch(struct sdhci_host *host)
+{
+	u32 reg;
+	unsigned char voltage;
+	unsigned char voltage_code;
+
+	voltage = host->mmc->ios.signal_voltage;
+
+	if (voltage == MMC_SIGNAL_VOLTAGE_330) {
+		voltage_code = eMMC_VCCQ_3_3V;
+	} else if (voltage == MMC_SIGNAL_VOLTAGE_180) {
+		voltage_code = eMMC_VCCQ_1_8V;
+	} else {
+		pr_err("%s: Xenon unsupported signal voltage\n",
+		       mmc_hostname(host->mmc));
+		return;
+	}
+
+	/* This host is for eMMC, XENON self-defined
+	 * eMMC slot control register should be accessed
+	 * instead of Host Control 2
+	 */
+	reg = sdhci_readl(host, SDHC_SLOT_eMMC_CTRL);
+	reg &= ~eMMC_VCCQ_MASK;
+	reg |= voltage_code;
+	sdhci_writel(host, reg, SDHC_SLOT_eMMC_CTRL);
+
+	/* There is no standard to determine this waiting period */
+	usleep_range(1000, 2000);
+
+	/* Check whether io voltage switch is done */
+	reg = sdhci_readl(host, SDHC_SLOT_eMMC_CTRL);
+	reg &= eMMC_VCCQ_MASK;
+	/*
+	 * This bit is set only when regulator feedbacks the voltage switch
+	 * result. However, in actaul implementation, regulator might not
+	 * provide this feedback. Thus we shall not rely on this bit status
+	 * to determine if switch is failed. If the bit is not set, just
+	 * throws a warning, error level message is not need.
+	 */
+	if (reg != voltage_code)
+		pr_warn("%s: Xenon failed to switch signal voltage\n",
+			mmc_hostname(host->mmc));
+}
+
+static void sdhci_xenon_voltage_switch_pre(struct sdhci_host *host)
+{
+	u32 reg;
+	int timeout;
+
+	/*
+	 * Before SD/SDIO set signal voltage, SD bus clock should be disabled.
+	 * However, sdhci_set_clock will also disable the internal clock.
+	 * For some host SD controller, if internal clock is disabled,
+	 * the 3.3V/1.8V bit can not be updated.
+	 * Thus here manually enable internal clock.
+	 * After switch completes, it is unnessary to disable internal clock,
+	 * since keeping internal clock active follows SD spec.
+	 */
+	reg = sdhci_readw(host, SDHCI_CLOCK_CONTROL);
+	if (!(reg & SDHCI_CLOCK_INT_EN)) {
+		reg |= SDHCI_CLOCK_INT_EN;
+		sdhci_writew(host, reg, SDHCI_CLOCK_CONTROL);
+
+		/* Wait max 20 ms */
+		timeout = 20;
+		while (!((reg = sdhci_readw(host, SDHCI_CLOCK_CONTROL))
+				& SDHCI_CLOCK_INT_STABLE)) {
+			if (timeout == 0) {
+				pr_err("%s: Internal clock never stabilised.\n",
+				       mmc_hostname(host->mmc));
+				break;
+			}
+			timeout--;
+			mdelay(1);
+		}
+	}
+}
+
 static const struct of_device_id sdhci_xenon_dt_ids[] = {
 	{ .compatible = "marvell,xenon-sdhci",},
 	{}
@@ -208,6 +297,8 @@ static struct sdhci_ops sdhci_xenon_ops = {
 	.set_uhs_signaling	= sdhci_set_uhs_signaling,
 	.platform_init		= sdhci_xenon_platform_init,
 	.get_max_clock		= sdhci_xenon_get_max_clock,
+	.voltage_switch		= sdhci_xenon_voltage_switch,
+	.voltage_switch_pre	= sdhci_xenon_voltage_switch_pre,
 };
 
 static struct sdhci_pltfm_data sdhci_xenon_pdata = {
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 340970d..9d8254e 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -1773,6 +1773,10 @@ static int sdhci_do_start_signal_voltage_switch(struct sdhci_host *host,
 	if (host->version < SDHCI_SPEC_300)
 		return 0;
 
+	/* Some controller need to do more before switching */
+	if (host->ops->voltage_switch_pre)
+		host->ops->voltage_switch_pre(host);
+
 	ctrl = sdhci_readw(host, SDHCI_HOST_CONTROL2);
 
 	switch (ios->signal_voltage) {
@@ -1793,6 +1797,10 @@ static int sdhci_do_start_signal_voltage_switch(struct sdhci_host *host,
 		/* Wait for 5ms */
 		usleep_range(5000, 5500);
 
+		/* Some controller need to do more when switching */
+		if (host->ops->voltage_switch)
+			host->ops->voltage_switch(host);
+
 		/* 3.3V regulator output should be stable within 5 ms */
 		ctrl = sdhci_readw(host, SDHCI_HOST_CONTROL2);
 		if (!(ctrl & SDHCI_CTRL_VDD_180))
diff --git a/drivers/mmc/host/sdhci.h b/drivers/mmc/host/sdhci.h
index 75b16ec..13c9a71 100644
--- a/drivers/mmc/host/sdhci.h
+++ b/drivers/mmc/host/sdhci.h
@@ -550,6 +550,7 @@ struct sdhci_ops {
 					 struct mmc_card *card,
 					 unsigned int max_dtr, int host_drv,
 					 int card_drv, int *drv_type);
+	void	(*voltage_switch_pre)(struct sdhci_host *host);
 	void	(*init_card)(struct sdhci_host *host, struct mmc_card *card);
 };
 
-- 
1.9.1

