From e4e0e1009eed1920131a2b0021ad821f66b1b842 Mon Sep 17 00:00:00 2001
From: Marcin Wojtas <mw@semihalf.com>
Date: Sun, 6 Mar 2016 11:54:00 +0100
Subject: [PATCH 257/538] net: mvneta: redefine packet offset for A3700
 controller

Packet offset which has to be taken into account by HW, while putting
incoming data to a buffer, needs to be written to each queue's
configuration register (MVNETA_RXQ_CONFIG_REG(q)).

There are 4 bits allowing to set the offset to maximum 120B with 8B
granularity. Since NET_SKB_PAD depends directly on L1_CACHE_BYTES
macro, that was recently redefined to 128B for all arm64 platforms,
Armada3700 is not capable of handling it with above mentioned limitation.

This commit adds a special offset correction, for Armada 3700 SoC, set to
64B (0B for others). Which is taken into account in
mvneta_rxq_offset_set() during configuration and also when updating
descriptors in mvneta_rx_refill().

Change-Id: Ic5def6cf64c4ddf10ce696156df8b5af2f0c20b8
Signed-off-by: Marcin Wojtas <mw@semihalf.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/28169
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-by: Ofer Heifetz <oferh@marvell.com>
---
 drivers/net/ethernet/marvell/mvneta.c | 18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/marvell/mvneta.c b/drivers/net/ethernet/marvell/mvneta.c
index d7b953f..181842a 100644
--- a/drivers/net/ethernet/marvell/mvneta.c
+++ b/drivers/net/ethernet/marvell/mvneta.c
@@ -284,6 +284,12 @@
 /* descriptor aligned size */
 #define MVNETA_DESC_ALIGNED_SIZE	32
 
+/* Number of bytes to be taken into account by HW when putting incoming data
+ * to the buffers. It is needed in case NET_SKB_PAD exceeds maximum packet
+ * offset supported in MVNETA_RXQ_CONFIG_REG(q) registers.
+ */
+#define MVNETA_RX_PKT_OFFSET_CORRECTION	64
+
 #define MVNETA_RX_PKT_SIZE(mtu) \
 	ALIGN((mtu) + MVNETA_MH_SIZE + MVNETA_VLAN_TAG_LEN + \
 	      ETH_HLEN + ETH_FCS_LEN,			     \
@@ -404,6 +410,7 @@ struct mvneta_port {
 #ifdef CONFIG_64BIT
 	u64 data_high;
 #endif
+	u16 rx_offset_correction;
 };
 
 /* The mvneta_tx_desc and mvneta_rx_desc structures describe the
@@ -1579,6 +1586,8 @@ static int mvneta_rx_refill(struct mvneta_port *pp,
 		return -ENOMEM;
 	}
 
+	phys_addr += pp->rx_offset_correction;
+
 	mvneta_rx_desc_fill(rx_desc, phys_addr, (uintptr_t)data);
 	return 0;
 }
@@ -2447,7 +2456,7 @@ static int mvneta_rxq_init(struct mvneta_port *pp,
 	mvreg_write(pp, MVNETA_RXQ_SIZE_REG(rxq->id), rxq->size);
 
 	/* Set Offset */
-	mvneta_rxq_offset_set(pp, rxq, NET_SKB_PAD);
+	mvneta_rxq_offset_set(pp, rxq, NET_SKB_PAD - pp->rx_offset_correction);
 
 	/* Set coalescing pkts and time */
 	mvneta_rx_pkts_coal_set(pp, rxq, rxq->pkts_coal);
@@ -3752,6 +3761,13 @@ static int mvneta_probe(struct platform_device *pdev)
 
 	pp->rxq_def = rxq_def;
 
+	/* Set RX packet offset correction for platforms, whose NET_SKB_PAD,
+	 * exceeds 64B. It should be 64B for 64-bit platforms and 0B for
+	 * 32-bit ones.
+	 */
+	pp->rx_offset_correction =
+			  max(0, NET_SKB_PAD - MVNETA_RX_PKT_OFFSET_CORRECTION);
+
 	pp->indir[0] = rxq_def;
 
 	/* Get special SoC configurations */
-- 
1.9.1

