From 98886ddeaf5c763c233d11c255536b2416e9fc32 Mon Sep 17 00:00:00 2001
From: Terry Zhou <bjzhou@marvell.com>
Date: Tue, 1 Mar 2016 09:16:50 +0800
Subject: [PATCH 290/538] pinctrl: a3700: add pinctrl support for Armada-3700

- add definition for all the pins in north & south bridges
- enable pinctrl support for a3700

Change-Id: I133e84e8c9954fd55efa4606d5d8b5b5cfea629e
Signed-off-by: Terry Zhou <bjzhou@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27950
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
---
 .../pinctrl/marvell,armada-3700-pinctrl.txt        |  53 +++++
 arch/arm64/Kconfig.platforms                       |   2 +
 arch/arm64/boot/dts/marvell/armada-37xx.dtsi       |  10 +
 drivers/pinctrl/Makefile                           |   2 +-
 drivers/pinctrl/mvebu/Kconfig                      |   8 +-
 drivers/pinctrl/mvebu/Makefile                     |   1 +
 drivers/pinctrl/mvebu/pinctrl-armada-3700.c        | 260 +++++++++++++++++++++
 7 files changed, 333 insertions(+), 3 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/pinctrl/marvell,armada-3700-pinctrl.txt
 create mode 100644 drivers/pinctrl/mvebu/pinctrl-armada-3700.c

diff --git a/Documentation/devicetree/bindings/pinctrl/marvell,armada-3700-pinctrl.txt b/Documentation/devicetree/bindings/pinctrl/marvell,armada-3700-pinctrl.txt
new file mode 100644
index 0000000..d28cf1a
--- /dev/null
+++ b/Documentation/devicetree/bindings/pinctrl/marvell,armada-3700-pinctrl.txt
@@ -0,0 +1,53 @@
+* Marvell Armada 3700 SoC pinctrl driver for mpp
+
+Please refer to marvell,mvebu-pinctrl.txt in this directory for common binding
+part and usage.
+
+Required properties:
+- compatible: "marvell,armada-3700-nb-pinctrl" or "marvell,armada-3700-sb-pinctrl"
+- reg: register specifier of MPP registers
+
+Available mpp pins/groups and functions:
+Note: brackets (x) are not part of the mpp name for marvell,function and given
+only for more detailed description in this document.
+
+North bridge: "marvell,armada-3700-nb-pinctrl"
+name          pins     functions
+================================================================================
+mpp0          0        jtag, gpio
+mpp1          1        sdio, gpio
+mpp2          2        mmc, gpio
+mpp3          3        pwm0, gpio
+mpp4          4        pwm1, gpio
+mpp5          5        pwm2, gpio
+mpp6          6        pwm3, gpio
+mpp7          7        pmic1, gpio
+mpp8          8        pmic0, gpio
+mpp9          9        i2c2, gpio
+mpp10         10       i2c1, gpio
+mpp11         11       fcs0, gpio
+mpp12         12       fcs1, gpio
+mpp13         13       fcs2, gpio
+mpp14         14       fcs3, gpio
+mpp15         15       spi, gpio
+mpp16         16       1wire, gpio
+mpp17         17       uart1, gpio
+mpp18         18       spi(quad), gpio
+mpp19         19       spi(cs), uart2
+mpp20         20       led(led0), pulllow
+mpp21         21       led(led1), pulllow
+mpp22         22       led(led2), pulllow
+mpp23         23       led(led3), pulllow
+
+South bridge: "marvell,armada-3700-sb-pinctrl"
+name          pins     functions
+================================================================================
+mpp0          0        usb32, gpio
+mpp1          1        usb2, gpio
+mpp2          2        sdio, gpio
+mpp3          3        mii, gpio
+mpp4          4        pcie1, gpio
+mpp5          5        ptp, gpio
+mpp6          6        ptp(clk), mii(txerr)
+mpp7          7        ptp(trig), mii(carriersense)
+mpp8          8        collision, mii(txerr)
\ No newline at end of file
diff --git a/arch/arm64/Kconfig.platforms b/arch/arm64/Kconfig.platforms
index c562f7e..2a5cf3f 100644
--- a/arch/arm64/Kconfig.platforms
+++ b/arch/arm64/Kconfig.platforms
@@ -7,6 +7,8 @@ config ARCH_MVEBU
 	select MVEBU_PIC
 	select MVEBU_CLK_COMMON
 	select ARMADA_3700_CLK
+	select PINCTRL
+	select PINCTRL_ARMADA_3700
 	select ARMADA_AP806_CORE_CLK
 	select ARMADA_AP806_RING_CLK
 	select ARMADA_AP806_SYSCON
diff --git a/arch/arm64/boot/dts/marvell/armada-37xx.dtsi b/arch/arm64/boot/dts/marvell/armada-37xx.dtsi
index 7bfe347..bb3d31a 100644
--- a/arch/arm64/boot/dts/marvell/armada-37xx.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-37xx.dtsi
@@ -144,12 +144,22 @@
 				#clock-cells = <1>;
 			};
 
+			npinctrl: north-bridge-pinctrl@13830 {
+				compatible = "marvell,armada-3700-nb-pinctrl";
+				reg = <0x13830 0x4>;
+			};
+
 			sgateclk: south-bridge-gate-clk@18014 {
 				compatible = "marvell,armada-3700-south-bridge-gating-clock";
 				reg = <0x18014 0x4>;
 				#clock-cells = <1>;
 			};
 
+			spinctrl: south-bridge-pinctrl@18830 {
+				compatible = "marvell,armada-3700-sb-pinctrl";
+				reg = <0x18830 0x4>;
+			};
+
 			eth0: ethernet@30000 {
 				   compatible = "marvell,armada3700-neta";
 				   reg = <0x30000 0x4000>;
diff --git a/drivers/pinctrl/Makefile b/drivers/pinctrl/Makefile
index 738cb49..1ade871 100644
--- a/drivers/pinctrl/Makefile
+++ b/drivers/pinctrl/Makefile
@@ -44,7 +44,7 @@ obj-$(CONFIG_ARCH_BCM)		+= bcm/
 obj-$(CONFIG_ARCH_BERLIN)	+= berlin/
 obj-y				+= freescale/
 obj-$(CONFIG_X86)		+= intel/
-obj-$(CONFIG_PLAT_ORION)        += mvebu/
+obj-$(CONFIG_PINCTRL_MVEBU)        += mvebu/
 obj-y				+= nomadik/
 obj-$(CONFIG_ARCH_QCOM)		+= qcom/
 obj-$(CONFIG_PINCTRL_SAMSUNG)	+= samsung/
diff --git a/drivers/pinctrl/mvebu/Kconfig b/drivers/pinctrl/mvebu/Kconfig
index 1706024..f8e503d 100644
--- a/drivers/pinctrl/mvebu/Kconfig
+++ b/drivers/pinctrl/mvebu/Kconfig
@@ -1,10 +1,14 @@
-if PLAT_ORION
-
 config PINCTRL_MVEBU
 	bool
 	select PINMUX
 	select PINCONF
 
+config PINCTRL_ARMADA_3700
+	bool
+	select PINCTRL_MVEBU
+
+if PLAT_ORION
+
 config PINCTRL_DOVE
 	bool
 	select PINCTRL_MVEBU
diff --git a/drivers/pinctrl/mvebu/Makefile b/drivers/pinctrl/mvebu/Makefile
index 554d8af..5506126 100644
--- a/drivers/pinctrl/mvebu/Makefile
+++ b/drivers/pinctrl/mvebu/Makefile
@@ -6,4 +6,5 @@ obj-$(CONFIG_PINCTRL_ARMADA_375) += pinctrl-armada-375.o
 obj-$(CONFIG_PINCTRL_ARMADA_38X) += pinctrl-armada-38x.o
 obj-$(CONFIG_PINCTRL_ARMADA_39X) += pinctrl-armada-39x.o
 obj-$(CONFIG_PINCTRL_ARMADA_XP)  += pinctrl-armada-xp.o
+obj-$(CONFIG_PINCTRL_ARMADA_3700) += pinctrl-armada-3700.o
 obj-$(CONFIG_PINCTRL_ORION)  += pinctrl-orion.o
diff --git a/drivers/pinctrl/mvebu/pinctrl-armada-3700.c b/drivers/pinctrl/mvebu/pinctrl-armada-3700.c
new file mode 100644
index 0000000..e96b35b
--- /dev/null
+++ b/drivers/pinctrl/mvebu/pinctrl-armada-3700.c
@@ -0,0 +1,260 @@
+/*
+ * Marvell Armada 3700 pinctrl driver based on mvebu pinctrl core
+ *
+ * Copyright (C) 2016 Marvell
+ *
+ * Terry Zhou <bjzhou@marvell.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/err.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/clk.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-mvebu.h"
+
+#define MVEBU_MPPS_PER_REG	32
+#define MVEBU_MPP_BITS		1
+#define MVEBU_MPP_MASK		0x1
+
+enum armada_3700_bridge {
+	I_NORTHBRIDGE	= 0,
+	I_SOUTHBRIDGE,
+	I_MAXCONTROLLER,
+};
+
+static void __iomem *mpp_base[I_MAXCONTROLLER];/* north & south bridge mpp base*/
+
+static int armada_3700_nb_mpp_ctrl_get(unsigned pid, unsigned long *config)
+{
+	return default_mpp_ctrl_get(mpp_base[I_NORTHBRIDGE], pid, config);
+}
+
+static int armada_3700_nb_mpp_ctrl_set(unsigned pid, unsigned long config)
+{
+	return default_mpp_ctrl_set(mpp_base[I_NORTHBRIDGE], pid, config);
+}
+
+static int armada_3700_sb_mpp_ctrl_get(unsigned pid, unsigned long *config)
+{
+	return default_mpp_ctrl_get(mpp_base[I_SOUTHBRIDGE], pid, config);
+}
+
+static int armada_3700_sb_mpp_ctrl_set(unsigned pid, unsigned long config)
+{
+	return default_mpp_ctrl_set(mpp_base[I_SOUTHBRIDGE], pid, config);
+}
+
+static struct mvebu_mpp_mode armada_3700_nb_mpp_modes[] = {
+	MPP_MODE(0,
+	   MPP_FUNCTION(0x0, "jtag", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(1,
+	   MPP_FUNCTION(0x0, "sdio", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(2,
+	   MPP_FUNCTION(0x0, "mmc", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(3,
+	   MPP_FUNCTION(0x0, "pwm0", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(4,
+	   MPP_FUNCTION(0x0, "pwm1", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(5,
+	   MPP_FUNCTION(0x0, "pwm2", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(6,
+	   MPP_FUNCTION(0x0, "pwm3", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(7,
+	   MPP_FUNCTION(0x0, "pmic1", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(8,
+	   MPP_FUNCTION(0x0, "pmic0", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(9,
+	   MPP_FUNCTION(0x0, "i2c2", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(10,
+	   MPP_FUNCTION(0x0, "i2c1", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(11,
+	   MPP_FUNCTION(0x0, "fcs0", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(12,
+	   MPP_FUNCTION(0x0, "fcs1", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(13,
+	   MPP_FUNCTION(0x0, "fcs2", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(14,
+	   MPP_FUNCTION(0x0, "fcs3", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(15,
+	   MPP_FUNCTION(0x0, "spi", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(16,
+	   MPP_FUNCTION(0x0, "1wire", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(17,
+	   MPP_FUNCTION(0x0, "uart1", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(18,
+	   MPP_FUNCTION(0x0, "spi", "quad"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(19,
+	   MPP_FUNCTION(0x0, "spi", "cs"),
+	   MPP_FUNCTION(0x1, "uart2", NULL)),
+	MPP_MODE(20,
+	   MPP_FUNCTION(0x0, "led", "led0"),
+	   MPP_FUNCTION(0x1, "pulllow", NULL)),
+	MPP_MODE(21,
+	   MPP_FUNCTION(0x0, "led", "led1"),
+	   MPP_FUNCTION(0x1, "pulllow", NULL)),
+	MPP_MODE(22,
+	   MPP_FUNCTION(0x0, "led", "led2"),
+	   MPP_FUNCTION(0x1, "pulllow", NULL)),
+	MPP_MODE(23,
+	   MPP_FUNCTION(0x0, "led", "led3"),
+	   MPP_FUNCTION(0x1, "pulllow", NULL)),
+};
+
+static struct mvebu_mpp_mode armada_3700_sb_mpp_modes[] = {
+	MPP_MODE(0,
+	   MPP_FUNCTION(0x0, "usb32", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(1,
+	   MPP_FUNCTION(0x0, "usb2", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(2,
+	   MPP_FUNCTION(0x0, "sdio", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(3,
+	   MPP_FUNCTION(0x0, "mii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(4,
+	   MPP_FUNCTION(0x0, "pcie1", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(5,
+	   MPP_FUNCTION(0x0, "ptp", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(6,
+	   MPP_FUNCTION(0x0, "ptp", "clk"),
+	   MPP_FUNCTION(0x1, "mii", "txerr")),
+	MPP_MODE(7,
+	   MPP_FUNCTION(0x0, "ptp", "trig"),
+	   MPP_FUNCTION(0x1, "mii", "carriersense")),
+	MPP_MODE(8,
+	   MPP_FUNCTION(0x0, "collision", NULL),
+	   MPP_FUNCTION(0x1, "mii", "txerr")),
+};
+
+static struct mvebu_pinctrl_soc_info armada_3700_pinctrl_info[I_MAXCONTROLLER];
+
+static const struct of_device_id armada_3700_pinctrl_of_match[] = {
+	{
+		.compatible = "marvell,armada-3700-nb-pinctrl",
+		.data       = (void *) I_NORTHBRIDGE
+	},
+	{
+		.compatible = "marvell,armada-3700-sb-pinctrl",
+		.data       = (void *) I_SOUTHBRIDGE,
+	},
+	{ },
+};
+
+static struct mvebu_mpp_ctrl armada_3700_nb_mpp_controls[] = {
+	MPP_FUNC_CTRL(0, 23, NULL, armada_3700_nb_mpp_ctrl),
+};
+
+static struct mvebu_mpp_ctrl armada_3700_sb_mpp_controls[] = {
+	MPP_FUNC_CTRL(0, 8, NULL, armada_3700_sb_mpp_ctrl),
+};
+
+static struct pinctrl_gpio_range armada_3700_nb_mpp_gpio_ranges[] = {
+	MPP_GPIO_RANGE(0,   0,  0, 24),
+};
+
+static struct pinctrl_gpio_range armada_3700_sb_mpp_gpio_ranges[] = {
+	MPP_GPIO_RANGE(0,   0,  0, 9),
+};
+
+
+static int armada_3700_pinctrl_probe(struct platform_device *pdev)
+{
+	const struct of_device_id *match =
+		of_match_device(armada_3700_pinctrl_of_match, &pdev->dev);
+	unsigned index;
+	struct mvebu_pinctrl_soc_info *soc;
+	struct resource *res;
+
+	if (!match)
+		return -ENODEV;
+
+	index = (unsigned) match->data;
+	if (index > I_MAXCONTROLLER) {
+		dev_err(&pdev->dev, "controller index error, index=%d max=%d\n", index, I_MAXCONTROLLER);
+		return -ENODEV;
+	}
+
+	/* armada3700 need to set mpps_per_reg */
+	mvebu_pinctrl_set_mpps(MVEBU_MPPS_PER_REG);
+
+	soc = &armada_3700_pinctrl_info[index];
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	mpp_base[index] = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(mpp_base[index]))
+		return PTR_ERR(mpp_base[index]);
+
+	soc->variant = 0; /* no variants for Armada 3700 */
+	if (index == I_NORTHBRIDGE) {
+		soc->controls = armada_3700_nb_mpp_controls;
+		soc->ncontrols = ARRAY_SIZE(armada_3700_nb_mpp_controls);
+		soc->modes = armada_3700_nb_mpp_modes;
+		soc->nmodes = ARRAY_SIZE(armada_3700_nb_mpp_modes);
+		soc->gpioranges = armada_3700_nb_mpp_gpio_ranges;
+		soc->ngpioranges = ARRAY_SIZE(armada_3700_nb_mpp_gpio_ranges);
+	} else if (index == I_SOUTHBRIDGE) {
+		soc->controls = armada_3700_sb_mpp_controls;
+		soc->ncontrols = ARRAY_SIZE(armada_3700_sb_mpp_controls);
+		soc->modes = armada_3700_sb_mpp_modes;
+		soc->nmodes = ARRAY_SIZE(armada_3700_sb_mpp_modes);
+		soc->gpioranges = armada_3700_sb_mpp_gpio_ranges;
+		soc->ngpioranges = ARRAY_SIZE(armada_3700_sb_mpp_gpio_ranges);
+	}
+
+	pdev->dev.platform_data = soc;
+
+	return mvebu_pinctrl_probe(pdev);
+}
+
+static int armada_3700_pinctrl_remove(struct platform_device *pdev)
+{
+	return mvebu_pinctrl_remove(pdev);
+}
+
+static struct platform_driver armada_3700_pinctrl_driver = {
+	.driver = {
+		.name = "armada-3700-pinctrl",
+		.of_match_table = armada_3700_pinctrl_of_match,
+	},
+	.probe = armada_3700_pinctrl_probe,
+	.remove = armada_3700_pinctrl_remove,
+};
+
+module_platform_driver(armada_3700_pinctrl_driver);
+
+MODULE_AUTHOR("Terry Zhou <bjzhou@marvell.com>");
+MODULE_DESCRIPTION("Marvell Armada 3700 pinctrl driver");
+MODULE_LICENSE("GPL v2");
-- 
1.9.1

