From 995ec2b01d5fca0d494e8b9c12e805fb231bad20 Mon Sep 17 00:00:00 2001
From: Yuval Caduri <cyuval@marvell.com>
Date: Tue, 5 Apr 2016 21:33:41 +0300
Subject: [PATCH 296/538] mvpp2x: Add 10G KR support in gop

Change-Id: Ia470d556aadbf6e207734168dad6ca736f5a1ea1
Signed-off-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/28804
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c | 65 +++++++++++++++++++---
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h | 21 +++++++
 .../ethernet/marvell/mvpp2x/mv_gop110_hw_type.h    | 25 ++++++++-
 3 files changed, 101 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
index ea1dd21..6cab141 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
@@ -949,8 +949,21 @@ int mv_gop110_port_init(struct gop_hw *gop, struct mv_mac_data *mac)
 		mv_gop110_serdes_reset(gop, 0, false, false, false);
 		mv_gop110_serdes_reset(gop, 1, false, false, false);
 	break;
-	/* Stefan: need to check KR case */
 	case PHY_INTERFACE_MODE_KR:
+
+		num_of_act_lanes = 2;
+		mac_num = 0;
+		/* configure PCS */
+		mv_gop110_xpcs_mode(gop, num_of_act_lanes);
+		mv_gop110_mpcs_mode(gop);
+		/* configure MAC */
+		mv_gop110_xlg_mac_mode_cfg(gop, mac_num, num_of_act_lanes);
+
+		/* pcs unreset */
+		mv_gop110_xpcs_reset(gop, UNRESET);
+
+		/* mac unreset */
+		mv_gop110_xlg_mac_reset(gop, mac_num, UNRESET);
 	break;
 	default:
 		pr_err("%s: Requested port mode (%d) not supported",
@@ -1766,14 +1779,13 @@ int mv_gop110_xlg_mac_mode_cfg(struct gop_hw *gop, int mac_num,
 	u32 reg_addr;
 	u32 val;
 
-	/* Set TX FIFO thresholds */
-	reg_addr = MV_XLG_PORT_FIFOS_THRS_CFG_REG;
+	/* configure 10G MAC mode */
+	reg_addr = MV_XLG_PORT_MAC_CTRL0_REG;
 	val = mv_gop110_xlg_mac_read(gop, mac_num, reg_addr);
-	U32_SET_FIELD(val, MV_XLG_MAC_PORT_FIFOS_THRS_CFG_TXRDTHR_MASK,
-		      (6 << MV_XLG_MAC_PORT_FIFOS_THRS_CFG_TXRDTHR_OFFS));
+	U32_SET_FIELD(val, MV_XLG_MAC_CTRL0_RXFCEN_MASK,
+		      (1 << MV_XLG_MAC_CTRL0_RXFCEN_OFFS));
 	mv_gop110_xlg_mac_write(gop, mac_num, reg_addr, val);
 
-	/* configure 10G MAC mode */
 	reg_addr = MV_XLG_PORT_MAC_CTRL3_REG;
 	val = mv_gop110_xlg_mac_read(gop, mac_num, reg_addr);
 	U32_SET_FIELD(val, MV_XLG_MAC_CTRL3_MACMODESELECT_MASK,
@@ -1784,12 +1796,17 @@ int mv_gop110_xlg_mac_mode_cfg(struct gop_hw *gop, int mac_num,
 
 	/* read - modify - write */
 	val = mv_gop110_xlg_mac_read(gop, mac_num, reg_addr);
-	U32_SET_FIELD(val, 0x1F10, 0x310);
+	U32_SET_FIELD(val, MV_XLG_MAC_CTRL4_MAC_MODE_DMA_1G_MASK, 0 <<
+					MV_XLG_MAC_CTRL4_MAC_MODE_DMA_1G_OFFS);
+	U32_SET_FIELD(val, MV_XLG_MAC_CTRL4_FORWARD_PFC_EN_MASK, 1 <<
+					MV_XLG_MAC_CTRL4_FORWARD_PFC_EN_OFFS);
+	U32_SET_FIELD(val, MV_XLG_MAC_CTRL4_FORWARD_802_3X_FC_EN_MASK, 1 <<
+					MV_XLG_MAC_CTRL4_FORWARD_802_3X_FC_EN_OFFS);
 	mv_gop110_xlg_mac_write(gop, mac_num, reg_addr, val);
 
 	/* Jumbo frame support - 0x1400*2= 0x2800 bytes */
 	val = mv_gop110_xlg_mac_read(gop, mac_num, MV_XLG_PORT_MAC_CTRL1_REG);
-	U32_SET_FIELD(val, 0x1FFF, 0x1400);
+	U32_SET_FIELD(val, MV_XLG_MAC_CTRL1_FRAMESIZELIMIT_MASK, 0x1400);
 	mv_gop110_xlg_mac_write(gop, mac_num, MV_XLG_PORT_MAC_CTRL1_REG, val);
 
 	/* mask all port interrupts */
@@ -2263,6 +2280,36 @@ int mv_gop110_xpcs_mode(struct gop_hw *gop, int num_of_lanes)
 	return 0;
 }
 
+int mv_gop110_mpcs_mode(struct gop_hw *gop)
+{
+	u32 reg_addr;
+	u32 val;
+
+	/* configure PCS40G COMMON CONTROL */
+	reg_addr = PCS40G_COMMON_CONTROL;
+	val = mv_gop110_mpcs_global_read(gop, reg_addr);
+	U32_SET_FIELD(val, FORWARD_ERROR_CORRECTION_MASK,
+		      0 << FORWARD_ERROR_CORRECTION_OFFSET);
+
+	mv_gop110_mpcs_global_write(gop, reg_addr, val);
+
+	/* configure PCS CLOCK RESET */
+	reg_addr = PCS_CLOCK_RESET;
+	val = mv_gop110_mpcs_global_read(gop, reg_addr);
+	U32_SET_FIELD(val, CLK_DIVISION_RATIO_MASK, 1 << CLK_DIVISION_RATIO_OFFSET);
+
+	mv_gop110_mpcs_global_write(gop, reg_addr, val);
+
+	U32_SET_FIELD(val, CLK_DIV_PHASE_SET_MASK, 0 << CLK_DIV_PHASE_SET_OFFSET);
+	U32_SET_FIELD(val, MAC_CLK_RESET_MASK, 1 << MAC_CLK_RESET_OFFSET);
+	U32_SET_FIELD(val, RX_SD_CLK_RESET_MASK, 1 << RX_SD_CLK_RESET_OFFSET);
+	U32_SET_FIELD(val, TX_SD_CLK_RESET_MASK, 1 << TX_SD_CLK_RESET_OFFSET);
+
+	mv_gop110_mpcs_global_write(gop, reg_addr, val);
+
+	return 0;
+}
+
 u64 mv_gop110_mib_read64(struct gop_hw *gop, int port, unsigned int offset)
 {
 	u64 val, val2;
@@ -2283,7 +2330,7 @@ static void mv_gop110_mib_print(struct gop_hw *gop, int port, u32 offset,
 	u64 val;
 
 	val = mv_gop110_mib_read64(gop, port, offset);
-	pr_info("  %-32s: 0x%02x = 0x%08llx\n", mib_name, offset, val);
+	pr_info("  %-32s: 0x%02x = %lld\n", mib_name, offset, val);
 }
 
 void mv_gop110_mib_counters_show(struct gop_hw *gop, int port)
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
index a344ef2..d58aa48 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
@@ -199,6 +199,26 @@ void mv_gop110_serdes_init(struct gop_hw *gop, int lane,
 void mv_gop110_serdes_reset(struct gop_hw *gop, int lane, bool analog_reset,
 			    bool core_reset, bool digital_reset);
 
+/* MPCS Functions */
+
+static inline u32 mv_gop110_mpcs_global_read(struct gop_hw *gop, u32 offset)
+{
+	return mv_gop_gen_read(gop->gop_110.mspg_base, offset);
+}
+
+static inline void mv_gop110_mpcs_global_write(struct gop_hw *gop, u32 offset,
+					       u32 data)
+{
+	mv_gop_gen_write(gop->gop_110.mspg_base, offset, data);
+}
+
+static inline void mv_gop110_mpcs_global_print(struct gop_hw *gop,
+					       char *reg_name, u32 reg)
+{
+	pr_info("  %-32s: 0x%x = 0x%08x\n", reg_name, reg,
+		mv_gop110_mpcs_global_read(gop, reg));
+}
+
 /* XPCS Functions */
 
 static inline u32 mv_gop110_xpcs_global_read(struct gop_hw *gop, u32 offset)
@@ -243,6 +263,7 @@ void mv_gop110_xpcs_gl_regs_dump(struct gop_hw *gop);
 void mv_gop110_xpcs_lane_regs_dump(struct gop_hw *gop, int lane);
 int mv_gop110_xpcs_reset(struct gop_hw *gop, enum mv_reset reset);
 int mv_gop110_xpcs_mode(struct gop_hw *gop, int num_of_lanes);
+int mv_gop110_mpcs_mode(struct gop_hw *gop);
 
 /* XLG MAC Functions */
 static inline u32 mv_gop110_xlg_mac_read(struct gop_hw *gop, int mac_num,
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw_type.h b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw_type.h
index 68770ef..40c3994 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw_type.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw_type.h
@@ -2175,5 +2175,28 @@
 #define SD1_CONTROL_RXAUI1_L45_EN_MASK	(0x1 << \
 					SD1_CONTROL_RXAUI1_L45_EN_OFFSET)
 
-#endif /*_MV_GOP_HW_TYPE_H_*/
+/******************************************************************************/
+
+#define PCS40G_COMMON_CONTROL					(0x014)
+
+#define FORWARD_ERROR_CORRECTION_OFFSET			10
+#define FORWARD_ERROR_CORRECTION_MASK	(0x1 << FORWARD_ERROR_CORRECTION_OFFSET)
+
+#define PCS_CLOCK_RESET							(0x14C)
+
+#define CLK_DIV_PHASE_SET_OFFSET					11
+#define CLK_DIV_PHASE_SET_MASK	(0x1 << CLK_DIV_PHASE_SET_OFFSET)
 
+#define CLK_DIVISION_RATIO_OFFSET				4
+#define CLK_DIVISION_RATIO_MASK	(0x7 << CLK_DIVISION_RATIO_OFFSET)
+
+#define MAC_CLK_RESET_OFFSET					2
+#define MAC_CLK_RESET_MASK		(0x1 << MAC_CLK_RESET_OFFSET)
+
+#define RX_SD_CLK_RESET_OFFSET					1
+#define RX_SD_CLK_RESET_MASK	(0x1 << RX_SD_CLK_RESET_OFFSET)
+
+#define TX_SD_CLK_RESET_OFFSET					0
+#define TX_SD_CLK_RESET_MASK	(0x1 << TX_SD_CLK_RESET_OFFSET)
+
+#endif /*_MV_GOP_HW_TYPE_H_*/
-- 
1.9.1

