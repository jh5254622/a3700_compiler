From 253cf7a5b43f621d60ffa56d5616fb8cca7965c0 Mon Sep 17 00:00:00 2001
From: Nizan Zorea <nzorea@marvell.com>
Date: Thu, 7 Apr 2016 14:26:28 +0300
Subject: [PATCH 370/538] rtc: a70x0: update rtc driver to match Armada-70x0 as
 well

A38x, and A70x0 had different RTC implementation for update MBUS timing
parameters and read of timing parameters. This patch add new functionality
for A70x0.

Change-Id: Ifd87aea13cb6e7447e23681cc811d36f792f7026
Signed-off-by: Nizan Zorea <nzorea@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/28877
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Lior Amsalem <alior@marvell.com>
---
 .../devicetree/bindings/rtc/armada-380-rtc.txt     |   2 +-
 drivers/rtc/rtc-armada38x.c                        | 155 +++++++++++++++------
 2 files changed, 115 insertions(+), 42 deletions(-)

diff --git a/Documentation/devicetree/bindings/rtc/armada-380-rtc.txt b/Documentation/devicetree/bindings/rtc/armada-380-rtc.txt
index 2eb9d4e..321af99 100644
--- a/Documentation/devicetree/bindings/rtc/armada-380-rtc.txt
+++ b/Documentation/devicetree/bindings/rtc/armada-380-rtc.txt
@@ -3,7 +3,7 @@
 RTC controller for the Armada 38x SoCs
 
 Required properties:
-- compatible : Should be "marvell,armada-380-rtc"
+- compatible : Should be "marvell,armada-380-rtc" or "marvell,armada-70x0-rtc"
 - reg: a list of base address and size pairs, one for each entry in
   reg-names
 - reg names: should contain:
diff --git a/drivers/rtc/rtc-armada38x.c b/drivers/rtc/rtc-armada38x.c
index 8a8e01f..fedff8f 100644
--- a/drivers/rtc/rtc-armada38x.c
+++ b/drivers/rtc/rtc-armada38x.c
@@ -12,6 +12,7 @@
  *
  */
 
+#include <linux/of_device.h>
 #include <linux/delay.h>
 #include <linux/io.h>
 #include <linux/module.h>
@@ -29,11 +30,22 @@
 #define RTC_TIME	    0xC
 #define RTC_ALARM1	    0x10
 
-#define RTC_BRIDGE_TIMING_CTRL_REG_OFFS	0x0
-#define RTC_WRCLK_PERIOD_OFFS		0
-#define RTC_WRCLK_PERIOD_MASK		(0x3FF << RTC_WRCLK_PERIOD_OFFS)
-#define RTC_READ_OUTPUT_DELAY_OFFS	26
-#define RTC_READ_OUTPUT_DELAY_MASK	(0x1F << RTC_READ_OUTPUT_DELAY_OFFS)
+/* armada38x SoC registers  */
+#define RTC_38X_BRIDGE_TIMING_CTRL_REG_OFFS		0x0
+#define RTC_38X_WRCLK_PERIOD_OFFS			0
+#define RTC_38X_WRCLK_PERIOD_MASK			(0x3FF << RTC_38X_WRCLK_PERIOD_OFFS)
+#define RTC_38X_READ_OUTPUT_DELAY_OFFS			26
+#define RTC_38X_READ_OUTPUT_DELAY_MASK			(0x1F << RTC_38X_READ_OUTPUT_DELAY_OFFS)
+
+/* armada70x0 SoC registers */
+#define RTC_70X0_BRIDGE_TIMING_CTRL0_REG_OFFS		0x0
+#define RTC_70X0_WRCLK_PERIOD_OFFS			0
+#define RTC_70X0_WRCLK_PERIOD_MASK			(0xFFFF << RTC_70X0_WRCLK_PERIOD_OFFS)
+#define RTC_70X0_WRCLK_SETUP_OFFS			16
+#define RTC_70X0_WRCLK_SETUP_MASK			(0xFFFF << RTC_70X0_WRCLK_SETUP_OFFS)
+#define RTC_70X0_BRIDGE_TIMING_CTRL1_REG_OFFS		0x4
+#define RTC_70X0_READ_OUTPUT_DELAY_OFFS			0
+#define RTC_70X0_READ_OUTPUT_DELAY_MASK			(0xFFFF << RTC_70X0_READ_OUTPUT_DELAY_OFFS)
 
 
 #define SOC_RTC_INTERRUPT   0x8
@@ -51,6 +63,13 @@ struct armada38x_rtc {
 	void __iomem	    *regs_soc;
 	spinlock_t	    lock;
 	int		    irq;
+	struct armada38x_rtc_data *data;
+};
+
+struct armada38x_rtc_data {
+	/* Initialize the RTC-MBUS bridge timing */
+	void (*update_mbus_timing)(struct armada38x_rtc *rtc);
+	unsigned long (*read_rtc_reg)(struct armada38x_rtc *rtc, uint8_t rtc_reg);
 };
 
 /*
@@ -72,16 +91,33 @@ static void rtc_delayed_write(u32 val, struct armada38x_rtc *rtc, int offset)
 }
 
 /* Update RTC-MBUS bridge timing parameters */
-static void rtc_update_mbus_timing_params(struct armada38x_rtc *rtc)
+static void rtc_update_70x0_mbus_timing_params(struct armada38x_rtc *rtc)
+{
+	uint32_t reg;
+
+	reg = readl(rtc->regs_soc + RTC_70X0_BRIDGE_TIMING_CTRL0_REG_OFFS);
+	reg &= ~RTC_70X0_WRCLK_PERIOD_MASK;
+	reg |= 0x3FF << RTC_70X0_WRCLK_PERIOD_OFFS;
+	reg &= ~RTC_70X0_WRCLK_SETUP_MASK;
+	reg |= 0x29 << RTC_70X0_WRCLK_SETUP_OFFS;
+	writel(reg, rtc->regs_soc + RTC_70X0_BRIDGE_TIMING_CTRL0_REG_OFFS);
+
+	reg = readl(rtc->regs_soc + RTC_70X0_BRIDGE_TIMING_CTRL1_REG_OFFS);
+	reg &= ~RTC_70X0_READ_OUTPUT_DELAY_MASK;
+	reg |= 0x3F << RTC_70X0_READ_OUTPUT_DELAY_OFFS;
+	writel(reg, rtc->regs_soc + RTC_70X0_BRIDGE_TIMING_CTRL1_REG_OFFS);
+}
+
+static void rtc_update_38x_mbus_timing_params(struct armada38x_rtc *rtc)
 {
 	uint32_t reg;
 
-	reg = readl(rtc->regs_soc + RTC_BRIDGE_TIMING_CTRL_REG_OFFS);
-	reg &= ~RTC_WRCLK_PERIOD_MASK;
-	reg |= 0x3FF << RTC_WRCLK_PERIOD_OFFS; /*Maximum value*/
-	reg &= ~RTC_READ_OUTPUT_DELAY_MASK;
-	reg |= 0x1F << RTC_READ_OUTPUT_DELAY_OFFS; /*Maximum value*/
-	writel(reg, rtc->regs_soc + RTC_BRIDGE_TIMING_CTRL_REG_OFFS);
+	reg = readl(rtc->regs_soc + RTC_38X_BRIDGE_TIMING_CTRL_REG_OFFS);
+	reg &= ~RTC_38X_WRCLK_PERIOD_MASK;
+	reg |= 0x3FF << RTC_38X_WRCLK_PERIOD_OFFS; /*Maximum value*/
+	reg &= ~RTC_38X_READ_OUTPUT_DELAY_MASK;
+	reg |= 0x1F << RTC_38X_READ_OUTPUT_DELAY_OFFS; /*Maximum value*/
+	writel(reg, rtc->regs_soc + RTC_38X_BRIDGE_TIMING_CTRL_REG_OFFS);
 }
 
 struct str_value_to_freq {
@@ -89,7 +125,7 @@ struct str_value_to_freq {
 	uint8_t freq;
 } __packed;
 
-static unsigned long read_rtc_register_wa(struct armada38x_rtc *rtc, uint8_t rtc_reg)
+static unsigned long read_rtc_38x_reg_wa(struct armada38x_rtc *rtc, uint8_t rtc_reg)
 {
 	unsigned long value_array[SAMPLE_NR], i, j, value;
 	unsigned long max = 0, index_max = SAMPLE_NR - 1;
@@ -125,13 +161,47 @@ static unsigned long read_rtc_register_wa(struct armada38x_rtc *rtc, uint8_t rtc
 	return value_to_freq[index_max].value;
 }
 
+static unsigned long read_rtc_reg(struct armada38x_rtc *rtc, uint8_t rtc_reg)
+{
+	unsigned long value = readl(rtc->regs + rtc_reg);
+
+	return value;
+}
+
+static const struct armada38x_rtc_data armada38x_data = {
+	.update_mbus_timing = rtc_update_38x_mbus_timing_params,
+	.read_rtc_reg = read_rtc_38x_reg_wa,
+};
+
+static const struct armada38x_rtc_data armada70x0_data = {
+	.update_mbus_timing = rtc_update_70x0_mbus_timing_params,
+	.read_rtc_reg = read_rtc_reg,
+};
+
+#ifdef CONFIG_OF
+static const struct of_device_id armada38x_rtc_of_match_table[] = {
+	{
+		.compatible	= "marvell,armada-380-rtc",
+		.data		= &armada38x_data,
+	},
+	{
+		.compatible	= "marvell,armada-70x0-rtc",
+		.data		= &armada70x0_data,
+	},
+	{
+		 /* sentinel */
+	},
+};
+MODULE_DEVICE_TABLE(of, armada38x_rtc_of_match_table);
+#endif
+
 static int armada38x_rtc_read_time(struct device *dev, struct rtc_time *tm)
 {
 	struct armada38x_rtc *rtc = dev_get_drvdata(dev);
 	unsigned long time, flags;
 
 	spin_lock_irqsave(&rtc->lock, flags);
-	time = read_rtc_register_wa(rtc, RTC_TIME);
+	time = rtc->data->read_rtc_reg(rtc, RTC_TIME);
 	spin_unlock_irqrestore(&rtc->lock, flags);
 
 	rtc_time_to_tm(time, tm);
@@ -166,8 +236,8 @@ static int armada38x_rtc_read_alarm(struct device *dev, struct rtc_wkalrm *alrm)
 
 	spin_lock_irqsave(&rtc->lock, flags);
 
-	time = read_rtc_register_wa(rtc, RTC_ALARM1);
-	val = read_rtc_register_wa(rtc, RTC_IRQ1_CONF) & RTC_IRQ1_AL_EN;
+	time = rtc->data->read_rtc_reg(rtc, RTC_ALARM1);
+	val = rtc->data->read_rtc_reg(rtc, RTC_IRQ1_CONF) & RTC_IRQ1_AL_EN;
 
 	spin_unlock_irqrestore(&rtc->lock, flags);
 
@@ -195,7 +265,7 @@ static int armada38x_rtc_set_alarm(struct device *dev, struct rtc_wkalrm *alrm)
 
 	if (alrm->enabled) {
 			rtc_delayed_write(RTC_IRQ1_AL_EN, rtc, RTC_IRQ1_CONF);
-			val = read_rtc_register_wa(rtc, SOC_RTC_INTERRUPT);
+			val = rtc->data->read_rtc_reg(rtc, SOC_RTC_INTERRUPT);
 			writel(val | SOC_RTC_ALARM1_MASK,
 			       rtc->regs_soc + SOC_RTC_INTERRUPT);
 	}
@@ -234,10 +304,10 @@ static irqreturn_t armada38x_rtc_alarm_irq(int irq, void *data)
 
 	spin_lock(&rtc->lock);
 
-	val = read_rtc_register_wa(rtc, SOC_RTC_INTERRUPT);
+	val = rtc->data->read_rtc_reg(rtc, SOC_RTC_INTERRUPT);
 
 	writel(val & ~SOC_RTC_ALARM1, rtc->regs_soc + SOC_RTC_INTERRUPT);
-	val = read_rtc_register_wa(rtc, RTC_IRQ1_CONF);
+	val = rtc->data->read_rtc_reg(rtc, RTC_IRQ1_CONF);
 	/* disable all the interrupts for alarm 1 */
 	rtc_delayed_write(0, rtc, RTC_IRQ1_CONF);
 	/* Ack the event */
@@ -267,9 +337,14 @@ static struct rtc_class_ops armada38x_rtc_ops = {
 static __init int armada38x_rtc_probe(struct platform_device *pdev)
 {
 	struct resource *res;
+	const struct of_device_id *match;
 	struct armada38x_rtc *rtc;
 	int ret;
 
+	match = of_match_device(armada38x_rtc_of_match_table, &pdev->dev);
+	if (!match)
+		return -ENODEV;
+
 	rtc = devm_kzalloc(&pdev->dev, sizeof(struct armada38x_rtc),
 			    GFP_KERNEL);
 	if (!rtc)
@@ -286,29 +361,35 @@ static __init int armada38x_rtc_probe(struct platform_device *pdev)
 	if (IS_ERR(rtc->regs_soc))
 		return PTR_ERR(rtc->regs_soc);
 
+	rtc->data = (struct armada38x_rtc_data *)match->data;
 	rtc->irq = platform_get_irq(pdev, 0);
-
-	if (rtc->irq < 0) {
-		dev_err(&pdev->dev, "no irq\n");
-		return rtc->irq;
-	}
-	if (devm_request_irq(&pdev->dev, rtc->irq, armada38x_rtc_alarm_irq,
-				0, pdev->name, rtc) < 0) {
-		dev_warn(&pdev->dev, "Interrupt not available.\n");
+	if (of_device_is_compatible(pdev->dev.of_node, "marvell,armada-70x0-rtc")) {
 		rtc->irq = -1;
-		/*
-		 * If there is no interrupt available then we can't
-		 * use the alarm
-		 */
 		armada38x_rtc_ops.set_alarm = NULL;
 		armada38x_rtc_ops.alarm_irq_enable = NULL;
+	} else {
+		if (rtc->irq < 0) {
+			dev_err(&pdev->dev, "no irq\n");
+			return rtc->irq;
+		}
+		if (devm_request_irq(&pdev->dev, rtc->irq, armada38x_rtc_alarm_irq,
+					0, pdev->name, rtc) < 0) {
+			dev_warn(&pdev->dev, "Interrupt not available.\n");
+			rtc->irq = -1;
+			/*
+			 * If there is no interrupt available then we can't
+			 * use the alarm
+			 */
+			armada38x_rtc_ops.set_alarm = NULL;
+			armada38x_rtc_ops.alarm_irq_enable = NULL;
+		}
 	}
 	platform_set_drvdata(pdev, rtc);
 	if (rtc->irq != -1)
 		device_init_wakeup(&pdev->dev, 1);
 
 	/* Update RTC-MBUS bridge timing parameters */
-	rtc_update_mbus_timing_params(rtc);
+	rtc->data->update_mbus_timing(rtc);
 
 	rtc->rtc_dev = devm_rtc_device_register(&pdev->dev, pdev->name,
 					&armada38x_rtc_ops, THIS_MODULE);
@@ -339,7 +420,7 @@ static int armada38x_rtc_resume(struct device *dev)
 		struct armada38x_rtc *rtc = dev_get_drvdata(dev);
 
 		/* Update RTC-MBUS bridge timing parameters */
-		rtc_update_mbus_timing_params(rtc);
+		rtc->data->update_mbus_timing(rtc);
 
 		return disable_irq_wake(rtc->irq);
 	}
@@ -351,14 +432,6 @@ static int armada38x_rtc_resume(struct device *dev)
 static SIMPLE_DEV_PM_OPS(armada38x_rtc_pm_ops,
 			 armada38x_rtc_suspend, armada38x_rtc_resume);
 
-#ifdef CONFIG_OF
-static const struct of_device_id armada38x_rtc_of_match_table[] = {
-	{ .compatible = "marvell,armada-380-rtc", },
-	{}
-};
-MODULE_DEVICE_TABLE(of, armada38x_rtc_of_match_table);
-#endif
-
 static struct platform_driver armada38x_rtc_driver = {
 	.driver		= {
 		.name	= "armada38x-rtc",
-- 
1.9.1

