From 9cfb996f2158b174553e48ee97c74ffa0434fef8 Mon Sep 17 00:00:00 2001
From: Grzegorz Jaszczyk <jaz@semihalf.com>
Date: Fri, 25 Mar 2016 16:12:48 +0100
Subject: [PATCH 382/538] PCI: Ignore assigning BAR with incorrect BAR size

On some Marvell switches, announced BARs size are incorrect and too big to
fit to the pcie mem aperture (e.g. BAR2 on some of those systems reports
2GB) which results with lack of BAR assignment:
"pci 0000:01:00.0: BAR 4: can't assign mem pref (size 0x8000000)"
or
"pci 0000:01:00.0: BAR 4: no space for [mem size 0x08000000 64bit pref]
pci 0000:01:00.0: BAR 4: failed to assign [mem size 0x08000000 64bit pref]"
depends on Linux Kernel version.

This finally results with lack of assignment of any BAR including BAR0
which is correct and allows to reconfigure BAR1 and BAR2 size.

To overcome this issue, don't try to allocate resources for any of the
broken BAR. This will allow to allocate resource for correct BARs (BAR0 is
always good). Having assigned BAR0 allows to reconfigure the BAR1 and/or
BAR2 and do the pci-rescan, which will result with having all BARs
correctly set and so for assigned.

This quirk only applies to scenarios where the endpoint has BobCat2
(0xFC00) or AllyCat3 (0xF400).

Change-Id: Id67db720dc62cc9636da303807537270ec7571b2
Signed-off-by: Grzegorz Jaszczyk <jaz@semihalf.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/28683
Reviewed-by: Lior Amsalem <alior@marvell.com>
Tested-by: Lior Amsalem <alior@marvell.com>
(cherry picked from commit b91c8a667cbd8240094e23620a2442b704158476)
Reviewed-on: http://vgitil04.il.marvell.com:8080/29752
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
Reviewed-by: Nadav Haklai <nadavh@marvell.com>
---
 drivers/pci/quirks.c    | 51 +++++++++++++++++++++++++++++++++++++++++++++++++
 include/linux/pci_ids.h |  3 +++
 2 files changed, 54 insertions(+)

diff --git a/drivers/pci/quirks.c b/drivers/pci/quirks.c
index be18d29..a2ad43e 100644
--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@ -28,6 +28,57 @@
 #include <asm/dma.h>	/* isa_dma_bridge_buggy */
 #include "pci.h"
 
+#define _8M	0x00800000
+#define _64M	0x04000000
+#define MV_PCI_BAR_1	2
+#define MV_PCI_BAR_2	4
+
+/* On some Marvell switches, announced BAR size are incorrect and too big to
+ * fit to the pcie aperture (e.g. BAR2 on some of those systems reports 2GB).
+ * Therefore ignore those BARs and assign resources only for correct BARs.
+ * The BAR0 is always correct and allows to reconfigure corrupted BAR1 and/or
+ * BAR2 size
+ */
+static void quirk_ignore_msys_bar(struct pci_dev *dev)
+{
+	int bar2_size;
+
+	switch (dev->device) {
+	case PCI_DEVICE_ID_MARVELL_BOBCAT2:
+		bar2_size = _64M;
+		break;
+	case PCI_DEVICE_ID_MARVELL_ALLEYCAT3:
+		bar2_size = _8M;
+		break;
+	default:
+		return;
+	}
+
+	/* Don't try to assign any of the broken BARs. */
+	if (resource_size(&dev->resource[MV_PCI_BAR_2]) != bar2_size) {
+		dev_info(&dev->dev, "BAR %d size: %pR is corrupted - skipping\n",
+			 MV_PCI_BAR_2, &dev->resource[MV_PCI_BAR_2]);
+
+		dev->resource[MV_PCI_BAR_2].start = 0;
+		dev->resource[MV_PCI_BAR_2].end = 0;
+		dev->resource[MV_PCI_BAR_2].flags = 0;
+	}
+
+	if (resource_size(&dev->resource[MV_PCI_BAR_1]) != _64M) {
+		dev_info(&dev->dev, "BAR %d size: %pR is corrupted - skipping\n",
+			 MV_PCI_BAR_1, &dev->resource[MV_PCI_BAR_1]);
+
+		dev->resource[MV_PCI_BAR_2].start = 0;
+		dev->resource[MV_PCI_BAR_2].end = 0;
+		dev->resource[MV_PCI_BAR_1].flags = 0;
+	}
+}
+
+DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_MARVELL, PCI_DEVICE_ID_MARVELL_ALLEYCAT3,
+			 quirk_ignore_msys_bar);
+DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_MARVELL, PCI_DEVICE_ID_MARVELL_BOBCAT2,
+			 quirk_ignore_msys_bar);
+
 /*
  * Decoding should be disabled for a PCI device during BAR sizing to avoid
  * conflict. But doing so may cause problems on host bridge and perhaps other
diff --git a/include/linux/pci_ids.h b/include/linux/pci_ids.h
index d9ba49c..4f77a6c 100644
--- a/include/linux/pci_ids.h
+++ b/include/linux/pci_ids.h
@@ -1628,6 +1628,9 @@
 #define PCI_DEVICE_ID_MARVELL_88ALP01_NAND	0x4100
 #define PCI_DEVICE_ID_MARVELL_88ALP01_SD	0x4101
 #define PCI_DEVICE_ID_MARVELL_88ALP01_CCIC	0x4102
+/* Marvell switches */
+#define PCI_DEVICE_ID_MARVELL_BOBCAT2		0xFC00
+#define PCI_DEVICE_ID_MARVELL_ALLEYCAT3		0xF400
 
 #define PCI_VENDOR_ID_V3		0x11b0
 #define PCI_DEVICE_ID_V3_V960		0x0001
-- 
1.9.1

