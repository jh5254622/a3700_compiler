From 76775e947ee58d3a3b52bec8bd53bad9530d5dbd Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Tue, 24 May 2016 18:19:59 +0300
Subject: [PATCH 443/538] net: mvpp2x: use relaxed read/write function in tx/rx
 functions and mv_pp22_thread_relaxed_read in mv_pp22_poll

-use mv_pp2x_relaxed_read in mv_pp2x_tx instead pp2x_read
-use mv_pp2x_relaxed_write in mv_pp2x_rx instead pp2x_write
-use mv_pp22_thread_relaxed_read in mv_pp22_poll instead
 mv_pp22_thread_read

Change-Id: I9fec7d8320b81b71b8f89d161785d2e62883220f
Reviewed-on: http://vgitil04.il.marvell.com:8080/29943
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c   | 28 ++++++++--
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h   | 59 ++++++++++++----------
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c | 15 +++---
 3 files changed, 65 insertions(+), 37 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
index 295ce54..7b536ef 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
@@ -89,6 +89,16 @@ void mv_pp2x_write(struct mv_pp2x_hw *hw, u32 offset, u32 data)
 }
 EXPORT_SYMBOL(mv_pp2x_write);
 
+
+void mv_pp2x_relaxed_write(struct mv_pp2x_hw *hw, u32 offset, u32 data)
+{
+	void *reg_ptr = hw->cpu_base[smp_processor_id()] + offset;
+
+	writel_relaxed(data, reg_ptr);
+}
+EXPORT_SYMBOL(mv_pp2x_relaxed_write);
+
+
 u32 mv_pp2x_read(struct mv_pp2x_hw *hw, u32 offset)
 {
 #if defined(MVPP2_DEBUG) && !defined(CONFIG_MV_PP2_PALLADIUM)
@@ -125,6 +135,18 @@ u32 mv_pp2x_read(struct mv_pp2x_hw *hw, u32 offset)
 }
 EXPORT_SYMBOL(mv_pp2x_read);
 
+
+u32 mv_pp2x_relaxed_read(struct mv_pp2x_hw *hw, u32 offset)
+{
+	void *reg_ptr = hw->cpu_base[smp_processor_id()] + offset;
+	u32 val;
+
+	val = readl_relaxed(reg_ptr);
+	return val;
+}
+EXPORT_SYMBOL(mv_pp2x_relaxed_read);
+
+
 /* Parser configuration routines */
 
 /* Flow ID definetion array */
@@ -3763,7 +3785,7 @@ int mv_pp2x_aggr_desc_num_check(struct mv_pp2x *priv,
 	if ((aggr_txq->count + num) > aggr_txq->size) {
 		/* Update number of occupied aggregated Tx descriptors */
 		int cpu = smp_processor_id();
-		u32 val = mv_pp2x_read(&priv->hw,
+		u32 val = mv_pp2x_relaxed_read(&priv->hw,
 				MVPP2_AGGR_TXQ_STATUS_REG(cpu));
 
 		aggr_txq->count = val & MVPP2_AGGR_TXQ_PENDING_MASK;
@@ -3782,9 +3804,9 @@ int mv_pp2x_txq_alloc_reserved_desc(struct mv_pp2x *priv,
 	u32 val;
 
 	val = (txq->id << MVPP2_TXQ_RSVD_REQ_Q_OFFSET) | num;
-	mv_pp2x_write(&priv->hw, MVPP2_TXQ_RSVD_REQ_REG, val);
+	mv_pp2x_relaxed_write(&priv->hw, MVPP2_TXQ_RSVD_REQ_REG, val);
 
-	val = mv_pp2x_read(&priv->hw, MVPP2_TXQ_RSVD_RSLT_REG);
+	val = mv_pp2x_relaxed_read(&priv->hw, MVPP2_TXQ_RSVD_RSLT_REG);
 
 	return val & MVPP2_TXQ_RSVD_RSLT_MASK;
 }
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
index 5d9ec26..9ef209e 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
@@ -55,6 +55,12 @@ static inline u32 mv_pp2x_read(struct mv_pp2x_hw *hw, u32 offset)
 	return readl(hw->cpu_base[smp_processor_id()] + offset);
 }
 #endif
+
+void mv_pp2x_relaxed_write(struct mv_pp2x_hw *hw, u32 offset, u32 data);
+u32 mv_pp2x_relaxed_read(struct mv_pp2x_hw *hw, u32 offset);
+
+
+
 static inline void mv_pp22_thread_write(struct mv_pp2x_hw *hw, u32 sw_thread,
 					     u32 offset, u32 data)
 {
@@ -67,6 +73,20 @@ static inline u32 mv_pp22_thread_read(struct mv_pp2x_hw *hw, u32 sw_thread,
 	return readl(hw->base + sw_thread*MVPP2_ADDR_SPACE_SIZE + offset);
 }
 
+static inline void mv_pp22_thread_relaxed_write(struct mv_pp2x_hw *hw,
+						u32 sw_thread,
+						u32 offset, u32 data)
+{
+	writel_relaxed(data, hw->base + sw_thread*MVPP2_ADDR_SPACE_SIZE + offset);
+}
+
+static inline u32 mv_pp22_thread_relaxed_read(struct mv_pp2x_hw *hw,
+					      u32 sw_thread,
+					      u32 offset)
+{
+	return readl_relaxed(hw->base + sw_thread*MVPP2_ADDR_SPACE_SIZE + offset);
+}
+
 static inline void mv_pp21_isr_rx_group_write(struct mv_pp2x_hw *hw, int port,
 						    int num_rx_queues)
 {
@@ -105,7 +125,7 @@ static inline int mv_pp2x_txq_phys(int port, int txq)
 /* Get number of Rx descriptors occupied by received packets */
 static inline int mv_pp2x_rxq_received(struct mv_pp2x_port *port, int rxq_id)
 {
-	u32 val = mv_pp2x_read(&port->priv->hw, MVPP2_RXQ_STATUS_REG(rxq_id));
+	u32 val = mv_pp2x_relaxed_read(&port->priv->hw, MVPP2_RXQ_STATUS_REG(rxq_id));
 
 	return val & MVPP2_RXQ_OCCUPIED_MASK;
 }
@@ -266,25 +286,9 @@ static inline void mv_pp2x_bm_pool_put(struct mv_pp2x_hw *hw, u32 pool,
 					      struct sk_buff *buf_virt_addr)
 {
 
-/*TODO: Validate this is  correct CONFIG_XXX for (sk_buff *),
- * it is a kmem_cache address (YuvalC).
- */
-#ifdef CONFIG_64BIT /*CONFIG_PHYS_ADDR_T_64BIT*/
-	u32 val = 0;
-
-	val = (upper_32_bits((uintptr_t)buf_virt_addr) &
-		MVPP22_ADDR_HIGH_MASK) << MVPP22_BM_VIRT_HIGH_RLS_OFFST;
-#ifdef CONFIG_ARCH_DMA_ADDR_T_64BIT
-	val |= (upper_32_bits(buf_phys_addr) &
-		MVPP22_ADDR_HIGH_MASK) << MVPP22_BM_PHY_HIGH_RLS_OFFSET;
-
-#endif
-	mv_pp2x_write(hw, MVPP22_BM_PHY_VIRT_HIGH_RLS_REG, val);
-#endif
-
-	mv_pp2x_write(hw, MVPP2_BM_VIRT_RLS_REG,
-		      lower_32_bits((uintptr_t)buf_virt_addr));
-	mv_pp2x_write(hw, MVPP2_BM_PHY_RLS_REG(pool),
+	mv_pp2x_relaxed_write(hw, MVPP2_BM_VIRT_RLS_REG,
+			      lower_32_bits((uintptr_t)buf_virt_addr));
+	mv_pp2x_relaxed_write(hw, MVPP2_BM_PHY_RLS_REG(pool),
 		      lower_32_bits(buf_phys_addr));
 
 }
@@ -354,20 +358,23 @@ static inline void mv_pp2x_qvector_interrupt_disable(struct queue_vector *q_vec)
 }
 
 static inline int mv_pp2x_txq_sent_desc_proc(struct mv_pp2x_port *port,
-						  struct mv_pp2x_tx_queue *txq)
+					     int sw_thread,
+					     u8 txq_id)
 {
 	u32 val;
 
 	/* Reading status reg resets transmitted descriptor counter */
 	if (port->priv->pp2_version == PPV21) {
-		val = mv_pp2x_read(&(port->priv->hw),
-				   MVPP21_TXQ_SENT_REG(txq->id));
+		val = mv_pp22_thread_relaxed_read(&port->priv->hw,
+							sw_thread,
+							MVPP21_TXQ_SENT_REG(txq_id));
 		return (val & MVPP21_TRANSMITTED_COUNT_MASK) >>
 			MVPP21_TRANSMITTED_COUNT_OFFSET;
 		}
 	else {
-		val = mv_pp2x_read(&(port->priv->hw),
-				   MVPP22_TXQ_SENT_REG(txq->id));
+		val = mv_pp22_thread_relaxed_read(&port->priv->hw,
+						  sw_thread,
+						  MVPP22_TXQ_SENT_REG(txq_id));
 		return (val & MVPP22_TRANSMITTED_COUNT_MASK) >>
 			MVPP22_TRANSMITTED_COUNT_OFFSET;
 		}
@@ -426,7 +433,7 @@ static inline dma_addr_t mv_pp22_rxdesc_phys_addr_get(
 {
 	return((dma_addr_t)
 		(rx_desc->u.pp22.buf_phys_addr_key_hash &
-		DMA_BIT_MASK(40)));
+		DMA_BIT_MASK(32)));
 }
 
 static inline struct sk_buff *mv_pp21_txdesc_cookie_get(
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 16fccb1..b76db97 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -800,7 +800,9 @@ static void mv_pp2x_txq_done(struct mv_pp2x_port *port,
 	if (txq_pcpu->cpu != smp_processor_id())
 		netdev_err(port->dev, "wrong cpu on the end of Tx processing\n");
 
-	tx_done = mv_pp2x_txq_sent_desc_proc(port, txq);
+	tx_done = mv_pp2x_txq_sent_desc_proc(port,
+					     QV_CPU_2_THR(txq_pcpu->cpu),
+					     txq->id);
 	if (!tx_done)
 		return;
 
@@ -2157,7 +2159,7 @@ static int mv_pp2x_rx(struct mv_pp2x_port *port, struct napi_struct *napi,
 	}
 
 	/* Update Rx queue management counters */
-	wmb();
+
 	mv_pp2x_rxq_status_update(port, rxq->id, rx_todo, rx_filled);
 
 	return rx_todo;
@@ -2344,7 +2346,6 @@ static int mv_pp2x_tx(struct sk_buff *skb, struct net_device *dev)
 	aggr_txq->count += frags;
 
 	/* Enable transmit */
-	wmb();
 	mv_pp2x_aggr_txq_pend_desc_add(port, frags);
 
 	if (txq_pcpu->size - txq_pcpu->count < MAX_SKB_FRAGS + 1) {
@@ -2477,7 +2478,7 @@ static int mv_pp22_poll(struct napi_struct *napi, int budget)
 	 */
 
 	/*The read is in the q_vector's sw_thread_id  address_space */
-	cause_rx_tx = mv_pp22_thread_read(hw, q_vec->sw_thread_id,
+	cause_rx_tx = mv_pp22_thread_relaxed_read(hw, q_vec->sw_thread_id,
 			MVPP2_ISR_RX_TX_CAUSE_REG(port->id));
 	pr_debug("%s port_id(%d), q_vec(%d), cpuId(%d), sw_thread_id(%d), isr_tx_rx(0x%x)\n",
 		__func__, port->id, (int)(q_vec - port->q_vector),
@@ -4059,6 +4060,8 @@ static int mv_pp2x_init(struct platform_device *pdev, struct mv_pp2x *priv)
 	if (dram_target_info)
 		mv_pp2x_conf_mbus_windows(dram_target_info, hw);
 
+	mv_pp2x_write(hw, MVPP22_BM_PHY_VIRT_HIGH_RLS_REG, 0x0);
+
 #if !defined(CONFIG_MV_PP2_FPGA)
 	/*AXI Bridge Configuration */
 
@@ -4231,11 +4234,7 @@ static struct mv_pp2x_platform_data pp22_pdata = {
 	.num_port_irq = 5,
 	.hw.desc_queue_addr_shift = MVPP22_DESC_ADDR_SHIFT,
 	.skb_base_addr = 0,
-#ifdef CONFIG_64BIT
-	.skb_base_mask = DMA_BIT_MASK(40),
-#else
 	.skb_base_mask = DMA_BIT_MASK(32),
-#endif
 };
 
 
-- 
1.9.1

