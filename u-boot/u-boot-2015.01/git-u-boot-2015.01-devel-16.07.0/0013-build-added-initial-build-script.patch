From 5155428825d15b1e5fa0424f9327f2b440fd5840 Mon Sep 17 00:00:00 2001
From: Yehuda Yitschak <yehuday@marvell.com>
Date: Tue, 25 Feb 2014 17:23:42 +0200
Subject: [PATCH 0013/1240] build: added initial build script

Change-Id: I0f3a6aec99425347b47b9aff2193c9b97b44c1f2
Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
---
 build.pl | 249 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 249 insertions(+)
 create mode 100755 build.pl

diff --git a/build.pl b/build.pl
new file mode 100755
index 0000000..1dfeb8a
--- /dev/null
+++ b/build.pl
@@ -0,0 +1,249 @@
+#!/usr/bin/perl
+
+use Cwd qw();
+
+sub bin2hex
+{
+	system ("\${CROSS_COMPILE}objcopy -O verilog -I binary u-boot.bin u-boot.tmp");
+
+	my $addr=-1;
+
+	unless(open $src, "<./u-boot.tmp")
+	{
+		print ("Failed to open u-boot.tmp\n");
+		goto ERROR;
+	}
+	unless(open $dst, ">./u-boot.hex")
+	{
+		print ("Failed to open u-boot.hex\n");
+		goto ERROR;
+	}
+
+	foreach my $line (<$src>)
+	{
+		if ($addr eq -1){
+			goto SKIP;
+		}
+		
+		# Create address line
+		my $addr_str = sprintf("@%07x",$addr);
+	
+		# Remove spaces line endings and ^M
+		$line =~ s/\r//;
+		$line =~ s/ //g;
+		chomp($line);
+		
+		print $dst "$addr_str\n";
+		print $dst reverse split /(..)/, $line;
+		print $dst "\n";
+
+	SKIP:
+		$addr++;
+	}
+
+	close($dst);
+	close($src);
+
+	`rm -rf u-boot.tmp`;
+
+	return 0;
+
+ERROR:
+	return 1;
+}
+
+sub usage
+{
+	print "\nUsage  : build -f \"Flash type\" -b \"board name\" [-c] [-o \"Output file\"]\n";
+	print "Example: build -f spi -b armada8k -c\n";
+	print "\n";
+	print "Options:\n";
+	print "\t-f\tBoot device. Accepts spi, nor, nand\n";
+	print "\t-b\tBoard type. Accepts: armada8k, armada8021-pxp";
+	print "\t-c\tClean build. calls \"make mrproper\"\n";
+	print "\t-o\tOutput directory. Build products will be copied to here\n";
+	print "\t-h\tPrints this help message\n";
+	print "\n";
+	print "Environment Variables:\n";
+	print "\tCROSS_COMPILE     Cross compiler to build U-BOOT\n";
+	print "\tCROSS_COMPILE_BH  Cross compiler to build bin hdr\n";
+	print "\n";
+}
+
+# Main
+use Getopt::Std;
+
+getopt('f:b:o:i:v:d:');
+
+if ($opt_h)
+{
+	usage();
+	exit 0;
+}
+
+unless ($opt_b) {
+	printf "\nError: Please specify board type\n\n";
+	usage();
+	exit 1;
+}
+
+unless ($opt_f) {
+	printf "\nError: Please specify flash type\n\n";
+	usage();
+	exit 1;
+}
+
+$cross    = $ENV{'CROSS_COMPILE'};
+$cross_bh = $ENV{'CROSS_COMPILE_BH'};
+
+if(!defined $cross){
+	printf "\nError: Please set environment variable CROSS_COMPILE\n\n";
+	usage();
+	exit 1;
+}
+
+my $board = $opt_b;
+my $flash = $opt_f;
+
+#if(!defined $cross_bh){
+#	printf " *** Error: Please set environment variables CROSS_COMPILE_BH\n";
+#	usage();
+#	exit 1;
+#}
+
+# Handle clean build
+if($opt_c eq 1)
+{
+	unless(($board eq "armada8021-pxp") or 
+	       ($board eq "armada8k")) {
+		print "\nError: Unsupported board \"$opt_b\"\n\n";
+		usage();
+		exit 1;
+	}
+
+	# Clean U-Boot
+	print "\n**** [Cleaning U-Boot]\t*****\n\n";
+	if (system("make mrproper")) {
+		print "\nError: Failed calling make mrporer\n\n";
+		exit 1;
+	}
+
+	# Clean tools folder
+	#my $path = Cwd::cwd();
+	#chdir  ("./tools/marvell");
+	#system("make clean BOARD=$boardID -s");
+	#chdir  ("$path");
+	
+	print "\n**** [Configuring U-boot]\t*****\n\n";
+	if (system("make ${board}_config")) {
+		print "\nError: Failed configuring u-boot to board $board\n\n";
+		exit 1;
+	}
+
+	# Set pre processors
+#	print "\n**** [Setting Macros]\t*****\n\n";
+#	if($opt_f eq "spi")      {
+#		system("echo \"#define MV_SPI_BOOT\" >> include/config.h");
+#		system("echo \"#define MV_INCLUDE_SPI\" >> include/config.h");
+#		print "Boot from SPI\n";
+#		$img_opts   = "";
+#		$flash_name = "spi";
+#		$img_type   = "flash";
+#	}
+#	elsif ($opt_f eq "nor")  {
+#		system("echo \"#define MV_NOR_BOOT\" >> include/config.h");
+#                print "Boot from NOR\n";
+#		$img_opts   = "";
+#		$flash_name = "nor";
+#		$img_type   = "flash";
+#	}
+#	elsif  ($opt_f eq "nand"){
+#		system("echo \"#define MV_NAND_BOOT\" >> include/config.h");
+#		print "Boot from NAND\n";
+#		$flash_name = "nand";
+#		$img_type   = "nand";
+#		if( ($boardID eq "axp") or
+#			($boardID eq "a375") or
+#			($boardID eq "msys") or
+#                        ($boardID eq "a38x")) {
+#			$img_opts   = "-P 4096 -L 128 -N MLC";
+#		}
+#		elsif($boardID eq "alp") {
+#			$img_opts   = "-P 2048 -L 128 -N SLC";
+#		}
+#		print "Image options =  $img_opts\n\n";
+#	}
+#	else
+#	{
+#		if (defined $opt_f) {
+#			print "\n *** Error: Bad flash type $opt_f specified\n\n";
+#		}
+#		else {
+#			print "\n *** Error: Flash type unspecified\n\n";
+#		}
+#		usage();
+#		exit 1;
+#	}
+#
+
+}
+
+#if(defined $opt_d)
+#{
+#	system("echo \"DDR3LIB = $opt_d\" >> include/config.mk");
+#	print "\n *** DDR3LIB = v$opt_d *********************************\n\n";
+#}
+
+# Build !
+print "\n**** [Building U-BOOT]\t*****\n\n";
+if (system("make -j6 -s")) {
+	print "\nError: Build failed\n\n";
+	exit 1;
+}
+
+print "\n**** [Creating Image]\t*****\n\n";
+unless ($board eq "armada8021-pxp") 
+{
+	exit 0;
+
+	if (system("./tools/marvell/doimage -T uart -D 0 -E 0 -G ./tools/marvell/bin_hdr/bin_hdr.uart.bin u-boot.bin u-boot-$flash_name-uart.bin")) {
+		print "\nError: doimage failed creating UART image \n\n";
+		exit 1;
+	}
+	if(system("./tools/marvell/doimage -T $img_type -D 0x0 -E 0x0 $img_opts -G ./tools/marvell/bin_hdr/bin_hdr.bin u-boot.bin u-boot-$flash_name.bin")) {
+		print "\nError: doimage failed creating image\n\n";
+		exit 1;
+	}	
+} else {
+
+	# Create palladium compatible hex file #
+	if(bin2hex()) {
+		print "\nError: failed creating palladium image\n\n";
+		exit 1;
+	}
+}
+
+if(defined $opt_o)
+{
+	print "\n**** [Copying output] *****\n\n";
+
+	system("mkdir -p $opt_o/");
+	system("mkdir -p $opt_o/bin_hdr");
+
+	# Copy images
+	system("cp u-boot-$flash_name.bin $opt_o/u-boot.bin");
+	system("cp u-boot-$flash_name.bin      $opt_o/");
+	system("cp u-boot-$flash_name-uart.bin $opt_o/");
+
+	# Copy meta data
+	system("cp u-boot $opt_o/u-boot-$flash_name");
+	system("cp u-boot.srec $opt_o/u-boot-$flash_name.srec");
+
+	# Copy bin header images 
+	system("cp tools/marvell/bin_hdr/bin_hdr.bin $opt_o/bin_hdr/");
+	system("cp tools/marvell/bin_hdr/bin_hdr.elf $opt_o/bin_hdr/");
+	system("cp tools/marvell/bin_hdr/bin_hdr.dis $opt_o/bin_hdr/");
+	system("cp tools/marvell/bin_hdr/bin_hdr.srec $opt_o/bin_hdr/");
+}
+
+exit 0;
-- 
1.9.1

