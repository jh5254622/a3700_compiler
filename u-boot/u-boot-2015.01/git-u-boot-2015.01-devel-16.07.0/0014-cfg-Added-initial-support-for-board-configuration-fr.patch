From af59a1bb183cd3ccad50002561bbfe4d09f11342 Mon Sep 17 00:00:00 2001
From: Yehuda Yitschak <yehuday@marvell.com>
Date: Thu, 27 Feb 2014 09:19:23 +0200
Subject: [PATCH 0014/1240] cfg: Added initial support for board configuration
 framework

Change-Id: I7ecf8e4c6a6dda6d508f019e5784d383791a1a95
Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
---
 board/mvebu/armada8k/board-info.c |  29 ++++
 board/mvebu/armada8k/board-info.h |   2 +-
 board/mvebu/common/Makefile       |   1 +
 board/mvebu/common/board-common.c |  27 +++-
 board/mvebu/common/board.h        |   7 +-
 board/mvebu/common/config.c       | 158 ++++++++++++++++++++++
 board/mvebu/common/config.h       |  58 ++++++++
 common/mvebu/Makefile             |   1 +
 common/mvebu/cmd_config.c         | 272 ++++++++++++++++++++++++++++++++++++++
 9 files changed, 551 insertions(+), 4 deletions(-)
 create mode 100644 board/mvebu/common/config.c
 create mode 100644 board/mvebu/common/config.h
 create mode 100644 common/mvebu/cmd_config.c

diff --git a/board/mvebu/armada8k/board-info.c b/board/mvebu/armada8k/board-info.c
index 2e6e5bf..ad2f895 100644
--- a/board/mvebu/armada8k/board-info.c
+++ b/board/mvebu/armada8k/board-info.c
@@ -51,6 +51,34 @@ struct sar_data a8k_sar = {
 	.sar_lookup   = a8k_sar_lookup
 };
 
+/* Define all board configuration variables */
+/* Assuming their location is equal on all boards */
+struct cfg_var a8k_cfg_lookup[MAX_CFG] = {
+	[BOARD_ID_CFG] = {0, 0, 3, 4,
+		{{ARMADA_8021_DB_ID, "DB-8021", VAR_IS_DEFUALT},
+		 {ARMADA_8021_RD_ID, "RD-8021", 0},
+		 {ARMADA_8022_DB_ID, "DB-8022", 0},
+		 {ARMADA_8022_RD_ID, "RD-8022", 0} },
+	},
+	[SERDES_0_CFG] = {1, 0, 3, 2,
+		{{0x0, "pcie 0", VAR_IS_DEFUALT},
+		 {0x1, "sata 0", 0} },
+	},
+	[SERDES_1_CFG] = {1, 3, 3, 3,
+		{{0x0, "pcie 1", 0},
+		 {0x1, "sata 1", VAR_IS_DEFUALT},
+		 {0x2, "usb3 1", 0} },
+	}
+};
+
+/* Define general SAR information */
+struct cfg_data a8k_cfg = {
+	.chip_addr    = 0x55,
+	.cfg_lookup   = a8k_cfg_lookup
+};
+
+
+
 struct mvebu_board_info *a8k_board_lookup[MAX_BOARD_ID] = {
 	[ARMADA_8021_DB_ID] = &a8021_db_info,
 	[ARMADA_8021_RD_ID] = &a8021_rd_info
@@ -61,5 +89,6 @@ struct mvebu_board_family a8k_board_family = {
 	.board_cnt = MAX_BOARD_ID,
 	.boards_info = a8k_board_lookup,
 	.sar = &a8k_sar,
+	.cfg = &a8k_cfg,
 };
 
diff --git a/board/mvebu/armada8k/board-info.h b/board/mvebu/armada8k/board-info.h
index 58ca3e2..be7a7bf 100644
--- a/board/mvebu/armada8k/board-info.h
+++ b/board/mvebu/armada8k/board-info.h
@@ -24,7 +24,7 @@
 #include "../common/sar.h"
 
 enum a8k_board_types {
-	ARMADA_8021_DB_ID,
+	ARMADA_8021_DB_ID = 0,
 	ARMADA_8021_RD_ID,
 	ARMADA_8022_DB_ID,
 	ARMADA_8022_RD_ID,
diff --git a/board/mvebu/common/Makefile b/board/mvebu/common/Makefile
index 1d7d6f3..1ce6390 100644
--- a/board/mvebu/common/Makefile
+++ b/board/mvebu/common/Makefile
@@ -19,3 +19,4 @@
 
 obj-y	+= board-common.o
 obj-y	+= sar.o
+obj-y	+= config.o
diff --git a/board/mvebu/common/board-common.c b/board/mvebu/common/board-common.c
index 6c229d8..5a62243 100644
--- a/board/mvebu/common/board-common.c
+++ b/board/mvebu/common/board-common.c
@@ -76,13 +76,36 @@ int common_board_init(struct mvebu_board_family *board_family)
 
 struct sar_data *board_get_sar(void)
 {
-	return brd->sar;
+	if (brd->curr_board->configurable &&
+	    brd->curr_board->config_data->sar_cnt)
+		return brd->sar;
+	else
+		return NULL;
 }
 
 struct sar_var *board_get_sar_table(void)
 {
-	if (brd->sar)
+	if (brd->curr_board->configurable &&
+	    brd->curr_board->config_data->sar_cnt)
 		return brd->sar->sar_lookup;
 	else
 		return NULL;
 }
+
+struct cfg_data *board_get_cfg(void)
+{
+	if (brd->curr_board->configurable &&
+	    brd->curr_board->config_data->cfg_cnt)
+		return brd->cfg;
+	else
+		return NULL;
+}
+
+struct cfg_var *board_get_cfg_table(void)
+{
+	if (brd->curr_board->configurable &&
+	    brd->curr_board->config_data->cfg_cnt)
+		return brd->cfg->cfg_lookup;
+	else
+		return NULL;
+}
diff --git a/board/mvebu/common/board.h b/board/mvebu/common/board.h
index f1e8db5..6c38d9e 100644
--- a/board/mvebu/common/board.h
+++ b/board/mvebu/common/board.h
@@ -25,6 +25,7 @@
 #include <asm/arch-mvebu/unit-info.h>
 #include <linux/compiler.h>
 #include "sar.h"
+#include "config.h"
 
 #define MAX_BOARD_NAME		16
 
@@ -39,9 +40,10 @@ struct mvebu_board_config {
 	int sar_cnt;
 	enum sar_variables supported_sar[MAX_SAR];
 	struct sar_var *sar_override;
+	int cfg_cnt;
+	enum cfg_variables supported_cfg[MAX_SAR];
 };
 
-
 /*
  * mvebu_board_info - Describes board specific features
  *
@@ -82,11 +84,14 @@ struct mvebu_board_family {
 	struct mvebu_board_info *curr_board;
 	struct mvebu_board_info **boards_info;
 	struct sar_data *sar;
+	struct cfg_data *cfg;
 };
 
 
 int common_board_init(struct mvebu_board_family *board_family);
 struct sar_data *board_get_sar(void);
 struct sar_var  *board_get_sar_table(void);
+struct cfg_data *board_get_cfg(void);
+struct cfg_var  *board_get_cfg_table(void);
 
 #endif /* _BOARD_H_ */
diff --git a/board/mvebu/common/config.c b/board/mvebu/common/config.c
new file mode 100644
index 0000000..1b8c494
--- /dev/null
+++ b/board/mvebu/common/config.c
@@ -0,0 +1,158 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) Marvell International Ltd. and its affiliates
+ * ***************************************************************************
+ * Marvell GPL License Option
+ * If you received this File from Marvell, you may opt to use, redistribute
+ * and/or modify this File in accordance with the terms and conditions of the
+ * General Public License Version 2, June 1991 (the "GPL License"), a copy of
+ * which is available along with the File in the license.txt file or by writing
+ * to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 or on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+ *
+ * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE
+ * EXPRESSLY DISCLAIMED. The GPL License provides additional details about this
+ * warranty disclaimer.
+ * ***************************************************************************
+ */
+
+#define DEBUG
+
+#include <common.h>
+#include <errno.h>
+#include <asm/io.h>
+#include <asm/bitops.h>
+#include <linux/compiler.h>
+#include "board.h"
+#include "config.h"
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define I2C_DUMMY_BASE ((int)0x91000000)
+
+/* I2C interface commands */
+static int i2c_write_dummy(uchar chip, uint addr, int alen, uchar *buffer, int len)
+{
+	uintptr_t reg = (uintptr_t)(I2C_DUMMY_BASE) + addr;
+	writeb(*buffer, reg);
+	return 0;
+}
+
+static int i2c_read_dummy(uchar chip, uint addr, int alen, uchar *buffer, int len)
+{
+	uintptr_t reg = (uintptr_t)(I2C_DUMMY_BASE) + addr;
+	(*buffer) = (uchar)readb(reg);
+	return 0;
+}
+
+int cfg_is_var_active(int id)
+{
+	struct cfg_var *cfg_table = board_get_cfg_table();
+	return ((cfg_table[id].option_cnt > 0) ? 1 : 0);
+}
+
+struct var_opts *cfg_get_var_opts(int id, int *cnt)
+{
+	struct cfg_var *cfg_table = board_get_cfg_table();
+
+	(*cnt) = cfg_table[id].option_cnt;
+
+	return cfg_table[id].option_desc;
+}
+
+struct cfg_var *cfg_id_to_var(int id)
+{
+	struct cfg_var *cfg_table = board_get_cfg_table();
+	cfg_table += id;
+	return cfg_table;
+}
+
+int cfg_is_available(void)
+{
+	if (board_get_cfg_table() == NULL)
+		return 0;
+	else
+		return 1;
+}
+
+int cfg_write_var(int id, int val)
+{
+	struct cfg_data *cfg = board_get_cfg();
+	struct cfg_var *var = cfg_id_to_var(id);
+	uchar reg;
+	u32 var_mask = (1 << var->bit_length) - 1;
+
+	if (i2c_read_dummy(cfg->chip_addr, var->reg_offset, 1, &reg, 1))
+		return -1;
+
+	/* Update the bitfield inside the register */
+	val &= var_mask;
+	reg &= ~(var_mask << var->start_bit);
+	reg |= (val << var->start_bit);
+
+	/* Write the full cfg register back to i2c */
+	if (i2c_write_dummy(cfg->chip_addr, var->reg_offset, 1, &reg, 1))
+		return -1;
+
+	return 0;
+}
+
+int cfg_read_var(int id, int *val)
+{
+	struct cfg_data *cfg = board_get_cfg();
+	struct cfg_var *var = cfg_id_to_var(id);
+	uchar reg;
+	u32 var_mask = (1 << var->bit_length) - 1;
+
+	if (i2c_read_dummy(cfg->chip_addr, var->reg_offset, 1, &reg, 1))
+		return -1;
+
+	(*val) = (reg >> var->start_bit) & var_mask;
+
+	debug("var offet = %d len = %d val = 0x%x\n", var->start_bit, var->bit_length, (*val));
+
+	return 0;
+}
+
+int cfg_default_var(int id)
+{
+	struct cfg_var	*var = cfg_id_to_var(id);
+	struct var_opts *opts;
+	struct var_opts *dflt =	NULL;
+	int i;
+
+	opts = var->option_desc;
+	for (i = 0; i < var->option_cnt; i++, opts++) {
+		if (opts->flags & VAR_IS_DEFUALT)
+			dflt = opts;
+	}
+
+	if (dflt == NULL) {
+		printf("Error: Failed to find default option");
+		return 1;
+	}
+
+	if (cfg_write_var(id, dflt->value)) {
+		printf("Error: Failed to write default value");
+		return 1;
+	}
+
+	debug("Wrote default value 0x%x = %s\n", dflt->value, dflt->desc);
+	return 0;
+}
+
+int cfg_default_all(void)
+{
+	int id;
+	int ret = 0;
+
+	for (id = 0; id < MAX_CFG; id++) {
+		if (cfg_is_var_active(id))
+			ret |= cfg_default_var(id);
+	}
+
+	return ret;
+}
+
+
diff --git a/board/mvebu/common/config.h b/board/mvebu/common/config.h
new file mode 100644
index 0000000..523ce94
--- /dev/null
+++ b/board/mvebu/common/config.h
@@ -0,0 +1,58 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) Marvell International Ltd. and its affiliates
+ * ***************************************************************************
+ * Marvell GPL License Option
+ * If you received this File from Marvell, you may opt to use, redistribute
+ * and/or modify this File in accordance with the terms and conditions of the
+ * General Public License Version 2, June 1991 (the "GPL License"), a copy of
+ * which is available along with the File in the license.txt file or by writing
+ * to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 or on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+ *
+ * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE
+ * EXPRESSLY DISCLAIMED. The GPL License provides additional details about this
+ * warranty disclaimer.
+ * ***************************************************************************
+ */
+
+#ifndef _CONFIG_H_
+#define _CONFIG_H_
+
+#include <common.h>
+#include <asm/arch-mvebu/mvebu.h>
+#include <linux/compiler.h>
+#include "var.h"
+
+
+struct cfg_var {
+	u8 reg_offset;
+	u8 start_bit;
+	u8 bit_length;
+	u8 option_cnt;
+	struct var_opts option_desc[MAX_VAR_OPTIONS];
+};
+
+struct cfg_data {
+	u32	chip_addr;
+	struct cfg_var *cfg_lookup;
+};
+
+enum cfg_variables {
+	BOARD_ID_CFG = 0,
+	SERDES_0_CFG,
+	SERDES_1_CFG,
+	MAX_CFG
+};
+
+int  cfg_default_all(void);
+int  cfg_default_var(int id);
+int  cfg_write_var(int id, int val);
+int  cfg_read_var(int id, int *val);
+int  cfg_is_available(void);
+int  cfg_is_var_active(int id);
+
+struct var_opts *cfg_get_var_opts(int id, int *cnt);
+
+#endif /* _CONFIG_H_ */
diff --git a/common/mvebu/Makefile b/common/mvebu/Makefile
index 42c68df..f8b9222 100644
--- a/common/mvebu/Makefile
+++ b/common/mvebu/Makefile
@@ -19,3 +19,4 @@
 
 obj-y += cmd_misc.o
 obj-y += cmd_sar.o
+obj-y += cmd_config.o
diff --git a/common/mvebu/cmd_config.c b/common/mvebu/cmd_config.c
new file mode 100644
index 0000000..45157c5
--- /dev/null
+++ b/common/mvebu/cmd_config.c
@@ -0,0 +1,272 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) Marvell International Ltd. and its affiliates
+ * ***************************************************************************
+ * Marvell GPL License Option
+ * If you received this File from Marvell, you may opt to use, redistribute
+ * and/or modify this File in accordance with the terms and conditions of the
+ * General Public License Version 2, June 1991 (the "GPL License"), a copy of
+ * which is available along with the File in the license.txt file or by writing
+ * to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 or on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+ *
+ * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE
+ * EXPRESSLY DISCLAIMED. The GPL License provides additional details about this
+ * warranty disclaimer.
+ * ***************************************************************************
+ */
+
+#include <config.h>
+#include <common.h>
+#include <command.h>
+#include <vsprintf.h>
+#include <errno.h>
+
+#include "../../board/mvebu/common/config.h"
+
+
+struct var_desc cfg_desc_table[MAX_CFG] = {
+	[BOARD_ID_CFG] =	{ "board_id", "Board ID of current board"},
+	[SERDES_0_CFG] =	{ "serdes_0", "Configurations on SERDES lane 0"},
+	[SERDES_1_CFG] =	{ "serdes_1", "Configurations on SERDES lane 1"},
+};
+
+static int cmd_cfg_key_to_id(const char *key)
+{
+	int id = -1;
+
+	for (id = 0; id < MAX_CFG; id++) {
+		if (strcmp(key, cfg_desc_table[id].key) == 0)
+			return id;
+	}
+
+	if (id  == -1) {
+		printf("Satr: Error: Unknown key \"%s\"\n", key);
+		return -1;
+	}
+	if (cfg_is_var_active(id) == 0) {
+		printf("Satr: Error: Key \"%s\" is inactive on this board\n", key);
+		return -1;
+	}
+	return id;
+}
+
+static void cmd_cfg_list_var(int id, bool print_opts)
+{
+	int cnt;
+	struct var_opts *opts;
+
+	printf("%-10s %s\n", cfg_desc_table[id].key,
+	       cfg_desc_table[id].description);
+
+	if (print_opts) {
+		opts = cfg_get_var_opts(id, &cnt);
+		while (cnt--) {
+			printf("\t0x%-2x %s ", opts->value, opts->desc);
+			if (opts->flags & VAR_IS_DEFUALT)
+				printf("[Default]");
+			printf("\n");
+			opts++;
+		}
+	}
+}
+
+static int cmd_cfg_print_key(const char *key)
+{
+	int id = cmd_cfg_key_to_id(key);
+	struct var_opts *opts;
+	char *desc = NULL;
+	int val, ret, cnt;
+
+	if (id == -1)
+		return -EINVAL;
+
+	ret = cfg_read_var(id, &val);
+	if (ret)
+		return ret;
+
+	opts = cfg_get_var_opts(id, &cnt);
+	while (cnt--) {
+		if (opts->value == val)
+			desc = opts->desc;
+		opts++;
+	}
+
+	if (desc == NULL)
+		printf("%s = 0x%x  ERROR: UNKNOWN OPTION\n", key, val);
+	else
+		printf("%s = 0x%x  %s\n", key, val, desc);
+
+	return 0;
+}
+
+static void cmd_cfg_print_all(void)
+{
+	int id;
+
+	printf("\n");
+	for (id = 0; id < MAX_CFG; id++) {
+		if (cfg_is_var_active(id))
+			cmd_cfg_print_key(cfg_desc_table[id].key);
+	}
+	printf("\n");
+}
+
+static int cmd_cfg_write_key(const char *key, int val)
+{
+	int id = cmd_cfg_key_to_id(key);
+	struct var_opts *opts;
+	char *desc = NULL;
+	int cnt;
+
+	if (id == -1)
+		return -EINVAL;
+
+	opts = cfg_get_var_opts(id, &cnt);
+	while (cnt--) {
+		if (opts->value == val)
+			desc = opts->desc;
+		opts++;
+	}
+
+	if (desc == NULL) {
+		printf("ERROR: value 0x%x not supported for key %s\n", val, key);
+		printf("use \"SatR list %s\" to print supported values\n", key);
+	}
+
+	if (cfg_write_var(id, val))
+		return -1;
+
+	/* Display the updated variable */
+	cmd_cfg_print_key(key);
+
+	return 0;
+}
+
+static int cmd_cfg_default_all(void)
+{
+	int id;
+	int ret = 0;
+
+	cfg_default_all();
+
+	for (id = 0; id < MAX_CFG; id++) {
+		if (cfg_is_var_active(id))
+			cmd_cfg_print_key(cfg_desc_table[id].key);
+	}
+
+	return ret;
+}
+
+static int cmd_cfg_default_key(const char *key)
+{
+	int id = cmd_cfg_key_to_id(key);
+	int ret;
+
+	if (id == -1)
+		return -EINVAL;
+
+	ret = cfg_default_var(id);
+	if (ret)
+		return ret;
+
+	/* Display the updated variable */
+	cmd_cfg_print_key(key);
+
+	return 0;
+}
+
+static void cmd_cfg_list_all(void)
+{
+	int id;
+
+	printf("\n");
+	for (id = 0; id < MAX_CFG; id++) {
+		if (cfg_is_var_active(id))
+			cmd_cfg_list_var(id, 0);
+	}
+	printf("\n");
+}
+
+static int cmd_cfg_list_key(const char *key)
+{
+	int id = cmd_cfg_key_to_id(key);
+
+	if (id == -1)
+		return -EINVAL;
+
+	printf("\n");
+	cmd_cfg_list_var(id, 1);
+	printf("\n");
+
+	return 0;
+}
+
+int do_config_cmd(cmd_tbl_t *cmdtp, int flag, int argc,
+			char * const argv[])
+{
+	const char *cmd = argv[1];
+	const char *key = NULL;
+	int value = 0;
+
+	if (cfg_is_available() == 0) {
+		printf("Error: Config variables not available for this board\n");
+		return 1;
+	}
+
+	if ((strcmp(cmd, "write") == 0) && (argc < 4)) {
+		printf("Error: Please specify config key and value\n");
+		return 1;
+	}
+
+	if (argc > 2)
+		key = argv[2];
+	if (argc > 3)
+		value = (int)simple_strtoul(argv[3], NULL, 16);
+
+	if (strcmp(cmd, "list") == 0) {
+		if (argc < 3) {
+			cmd_cfg_list_all();
+		} else {
+			if (cmd_cfg_list_key(key))
+				return -EINVAL;
+		}
+	} else if (strcmp(cmd, "default") == 0) {
+		if (argc < 3) {
+			cmd_cfg_default_all();
+		} else {
+			if (cmd_cfg_default_key(key))
+				return -EINVAL;
+		}
+	} else if (strcmp(cmd, "read") == 0) {
+		if (argc < 3) {
+			cmd_cfg_print_all();
+		} else {
+			if (cmd_cfg_print_key(key))
+				return -EINVAL;
+		}
+	} else if (strcmp(cmd, "write") == 0) {
+		if (cmd_cfg_write_key(key, value))
+			return -EINVAL;
+	} else {
+		printf("ERROR: unknown command to config: \"%s\"\n", cmd);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+U_BOOT_CMD(
+	config,    6,     1,      do_config_cmd,
+	"config - Modify SOC and board configuration\n",
+	"\n"
+	"Modify SOC and board configuration\n"
+	"\tlist		- Display all availble config variables\n"
+	"\tlist <x>	- Display options for config variable x\n"
+	"\tdefault	- Set all config variable to default value\n"
+	"\tdefault <x>	- Set config variable x default value\n"
+	"\tread		- Read all config variables\n"
+	"\tread <x>	- Read config variable x\n"
+	"\twrite <x> <y>- Write y to config variable x\n"
+);
-- 
1.9.1

