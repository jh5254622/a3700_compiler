From 5be4b7d769d42bf43dfa928e7a560b257415bb70 Mon Sep 17 00:00:00 2001
From: Yehuda Yitschak <yehuday@marvell.com>
Date: Thu, 12 Jun 2014 10:55:43 +0300
Subject: [PATCH 0038/1240] cmd: Added support for ir command

	- Adopted code from previous U-BOOT versions
	- Fixed coding style
	- removed old U-BOOT API's and defines

Change-Id: I802b630b7d70b3db100678cb60a5c0d78774ed2b
Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8501
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 common/mvebu/cmd_misc.c        | 91 ++++++++++++++++++++++++++++++++++++++++++
 include/configs/mvebu-common.h |  1 +
 2 files changed, 92 insertions(+)

diff --git a/common/mvebu/cmd_misc.c b/common/mvebu/cmd_misc.c
index c5585a8..66a1d86 100644
--- a/common/mvebu/cmd_misc.c
+++ b/common/mvebu/cmd_misc.c
@@ -21,6 +21,7 @@
 #include <common.h>
 #include <command.h>
 
+#include <asm/io.h>
 #include <asm/arch-mvebu/adec.h>
 #include <asm/arch-mvebu/unit-info.h>
 
@@ -59,3 +60,93 @@ U_BOOT_CMD(
 	"Display and modufy units in current setup\n"
 	"\tlist - Display current active units\n"
 );
+
+
+#ifdef CONFIG_CMD_MVEBU_IR
+int ir_cmd(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	u32 offset = 0x0;
+	u32 reg, tmp_val, residue;
+	char binary[40];
+	char cmd[40];
+	int i, j = 0;
+	int is_modified = 0;
+	u8 *regs_base = (u8 *)MVEBU_REGS_BASE;
+
+	if (argc == 2) {
+		offset = simple_strtoul(argv[1], NULL, 16);
+	} else {
+		printf("Usage:\n%s\n", cmdtp->usage);
+		return 0;
+	}
+
+	reg = readl(regs_base + offset);
+	tmp_val = reg;
+	printf("Internal register 0x%x value : 0x%x\n", offset, reg);
+	printf("\n    31      24        16         8         0");
+	printf("\n     |       |         |         |         |\nOLD: ");
+
+	/* Convert the value to binary string */
+	/* Be endianes safe so don't use shifts */
+	for (i = 31; i >= 0; i--) {
+		if (tmp_val > 0) {
+			residue = tmp_val % 2;
+			tmp_val = (tmp_val - residue) / 2;
+			if (residue == 0)
+				binary[i] = '0';
+			else
+				binary[i] = '1';
+		} else {
+			binary[i] = '0';
+		}
+	}
+
+	/* Print the binary string */
+	for (i = 0; i < 32; i++) {
+		printf("%c", binary[i]);
+		if ((((i+1) % 4) == 0) && (i > 1) && (i < 31))
+			printf("-");
+	}
+
+	readline("\nNEW: ");
+	strcpy(cmd, console_buffer);
+	if ((cmd[0] == '0') && (cmd[1] == 'x')) {
+		reg = simple_strtoul(cmd, NULL, 16);
+		is_modified = 1;
+	} else {
+		/* Read binary input */
+		for (i = 0; i < 40; i++) {
+			if (cmd[i] == '\0')
+				break;
+			if (i == 4 || i == 9 || i == 14 || i == 19 || i == 24 || i == 29 || i == 34)
+				continue;
+			if (cmd[i] == '1') {
+				reg = reg | (0x80000000 >> j);
+				is_modified = 1;
+			} else if (cmd[i] == '0') {
+				reg = reg & (~(0x80000000 >> j));
+				is_modified = 1;
+			}
+			j++;
+		}
+	}
+
+	/* Update the register value if modified */
+	if (is_modified == 1) {
+		writel(reg, regs_base + offset);
+		printf("\nNew value = 0x%x\n\n", readl(regs_base + offset));
+	}
+	return 0;
+}
+
+U_BOOT_CMD(
+	ir,      2,     1,      ir_cmd,
+	"ir	- Reading and changing internal register values.\n",
+	" Address - offset inside internal registers space\n"
+	"\tDisplays the contents of the internal register in 2 forms, hex and binary.\n"
+	"\tIt's possible to change the value by writing a hex value beginning with 0x\n"
+	"\tor by writing 0 or 1 in the required place.\n"
+	"\tPressing enter without any value keeps the value unchanged.\n"
+);
+#endif
+
diff --git a/include/configs/mvebu-common.h b/include/configs/mvebu-common.h
index a37983f..1e0172b 100644
--- a/include/configs/mvebu-common.h
+++ b/include/configs/mvebu-common.h
@@ -124,6 +124,7 @@
 /* MVEBU Generic commands */
 #define CONFIG_CMD_MVEBU_MAP
 #define CONFIG_CMD_MVEBU_MPP
+#define CONFIG_CMD_MVEBU_IR
 
 
 /* No flash setup */
-- 
1.9.1

