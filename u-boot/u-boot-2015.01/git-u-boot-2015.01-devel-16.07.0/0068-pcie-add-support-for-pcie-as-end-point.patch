From 20c43016e6c5e97df6ff7095c862224e18c29026 Mon Sep 17 00:00:00 2001
From: Yehuda Yitschak <yehuday@marvell.com>
Date: Wed, 27 Aug 2014 14:23:19 +0300
Subject: [PATCH 0068/1240] pcie: add support for pcie as end point

	In case a PCI host is defined as end point, do not register
	a PCI host controller and just end point capabilities in the
	CFG space

Change-Id: I792680afef6b70b71ced4d497634fb72b6baf688
Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/11340
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/include/asm/arch-mvebu/driver_interface.h |  2 +-
 board/mvebu/common/pcie_init.c                     | 12 ++++++++-
 drivers/pci/pci_mvebu.c                            | 29 +++++++++++++++++++++-
 include/configs/mvebu-common.h                     |  1 +
 4 files changed, 41 insertions(+), 3 deletions(-)

diff --git a/arch/arm/include/asm/arch-mvebu/driver_interface.h b/arch/arm/include/asm/arch-mvebu/driver_interface.h
index cbffe72..182586a 100644
--- a/arch/arm/include/asm/arch-mvebu/driver_interface.h
+++ b/arch/arm/include/asm/arch-mvebu/driver_interface.h
@@ -19,4 +19,4 @@
 
 struct spi_slave *mvebu_spi_setup_slave(unsigned int bus, unsigned int cs,
 		unsigned int max_hz, unsigned int mode, u32 cpu_clk);
-void mvebu_pcie_init_board(int max_hosts, u16 active_mask);
+void mvebu_pcie_init_board(int max_hosts, u16 active_mask, u16 ep_mask);
diff --git a/board/mvebu/common/pcie_init.c b/board/mvebu/common/pcie_init.c
index 194a7eb..b8f1061 100644
--- a/board/mvebu/common/pcie_init.c
+++ b/board/mvebu/common/pcie_init.c
@@ -27,6 +27,16 @@ void pci_init_board(void)
 {
 	int host_cnt = unit_info_get_count(PCIE_UNIT_ID);
 	u16 active_mask = unit_info_get_mask(PCIE_UNIT_ID);
+	int ep_mask = 0;
 
-	mvebu_pcie_init_board(host_cnt, active_mask);
+#ifdef CONFIG_MVEBU_PCI_EP
+	/*
+	 * Currently set all hosts as EP. In case we want to support
+	 * mixed mode (RC & EP hosts) we need to define a way to
+	 * select it per port
+	 */
+	ep_mask = active_mask;
+#endif
+
+	mvebu_pcie_init_board(host_cnt, active_mask, ep_mask);
 }
diff --git a/drivers/pci/pci_mvebu.c b/drivers/pci/pci_mvebu.c
index 5b31b5d..f75598b 100644
--- a/drivers/pci/pci_mvebu.c
+++ b/drivers/pci/pci_mvebu.c
@@ -40,6 +40,11 @@
 #define PCIE_DEV_ID_OFF(x)		(MVEBU_PCIE_BASE(x) + 0x0)
 #define PCIE_CMD_OFF(x)			(MVEBU_PCIE_BASE(x) + 0x4)
 #define PCIE_DEV_REV_OFF(x)		(MVEBU_PCIE_BASE(x) + 0x8)
+#define PCIE_CAP_OFF(x)			(MVEBU_PCIE_BASE(x) + 0x60)
+#define PCIE_CAP_DEV_TYPE_MASK		(0xF << 20)
+#define PCIE_CAP_DEV_TYPE_EP		(0x1 << 20)
+#define PCIE_CAP_DEV_TYPE_RC		(0x4 << 20)
+
 #define PCIE_BAR_LO_OFF(x, n)		(MVEBU_PCIE_BASE(x) + (0x10 + (0x8 * n)))
 #define PCIE_BAR_HI_OFF(x, n)		(MVEBU_PCIE_BASE(x) + (0x14 + (0x8 * n)))
 #define PCIE_BAR_CTRL_OFF(x, n)		(MVEBU_PCIE_BASE(x) + (0x1800 + (0x4 * n)))
@@ -337,7 +342,23 @@ static int mvebu_pcie_check_link(int hid)
 	return readl(PCIE_STAT_OFF(hid)) &  PCIE_STAT_LINK;
 }
 
-void mvebu_pcie_init_board(int max_hosts, u16 active_mask)
+static void mvebu_pcie_set_endpoint(int hid)
+{
+	u32 capability;
+
+	/* Check the LTSSM state machine if something is connected */
+	capability = readl(PCIE_CAP_OFF(hid));
+	capability &= ~PCIE_CAP_DEV_TYPE_MASK;
+	capability |= PCIE_CAP_DEV_TYPE_EP;
+	writel(capability, PCIE_CAP_OFF(hid));
+
+	/* Open DRAM access for master */
+	mvebu_pcie_setup_mapping(hid);
+
+	printf("PCIE-%d: End point mode\n", hid);
+}
+
+void mvebu_pcie_init_board(int max_hosts, u16 active_mask, u16 ep_mask)
 {
 	int host_id;
 	int first_busno = 0;
@@ -348,6 +369,12 @@ void mvebu_pcie_init_board(int max_hosts, u16 active_mask)
 		if ((active_mask & (1 << host_id)) == 0)
 			continue;
 
+		/* Define host controller as endpoint */
+		if (ep_mask & (1 << host_id)) {
+			mvebu_pcie_set_endpoint(host_id);
+			continue;
+		}
+
 		/* Don't register host if link is down */
 		if (mvebu_pcie_check_link(host_id))
 			continue;
diff --git a/include/configs/mvebu-common.h b/include/configs/mvebu-common.h
index 03aab8e..1cec6cb 100644
--- a/include/configs/mvebu-common.h
+++ b/include/configs/mvebu-common.h
@@ -235,6 +235,7 @@
 	#define CONFIG_PCI
 	#define CONFIG_CMD_PCI
 	#define CONFIG_PCI_PNP  /* Enable plug-and-play */
+	/*#define CONFIG_MVEBU_PCI_EP*/ /* Set PCI host as end point */
 
 	/* Enable PCIE NIC for devel boards */
 	#ifdef CONFIG_MVEBU_DEVEL_BOARD
-- 
1.9.1

