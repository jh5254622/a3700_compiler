From 2f68ac85db258e01d272c454870b12cfeb93f5a7 Mon Sep 17 00:00:00 2001
From: Yehuda Yitschak <yehuday@marvell.com>
Date: Tue, 3 Mar 2015 09:37:27 +0200
Subject: [PATCH 0130/1240] scripts: added different binary width support to
 bin2phex

Change-Id: If95e895430925adc162feec58e466d1d347958e0
Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/17199
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
---
 scripts/bin2phex.pl | 45 ++++++++++++++++++++++++++++++++++-----------
 1 file changed, 34 insertions(+), 11 deletions(-)

diff --git a/scripts/bin2phex.pl b/scripts/bin2phex.pl
index 36cd5ca..18c52f6 100755
--- a/scripts/bin2phex.pl
+++ b/scripts/bin2phex.pl
@@ -2,14 +2,14 @@
 
 sub bin2hex
 {
-	my ($in_file, $out_file, $base_addr) = @_;
+	my ($in_file, $out_file, $base_addr, $width) = @_;
 
 	# Generate a HEX dump from the binary using GCC
 	system ("\${CROSS_COMPILE}objcopy -O verilog -I binary $in_file /tmp/image.tmp");
 
 	# Convert base address to 16 byte resolution
 	my $addr = sprintf("%d", hex($base_addr));
-	$addr = $addr / 16;
+	$addr = $addr / $width;
 
 	unless(open $src, "</tmp/image.tmp")
 	{
@@ -28,19 +28,27 @@ sub bin2hex
 	# Add address to each line
 	foreach my $line (<$src>)
 	{
-		# Create address line
-		my $addr_str = sprintf("@%07x",$addr);
 
 		# Remove spaces line endings and ^M
 		$line =~ s/\r//;
 		$line =~ s/ //g;
 		chomp($line);
 
-		print $dst "$addr_str\n";
-		print $dst reverse split /(..)/, $line;
-		print $dst "\n";
+		my $loops = 16 / $width;
+		my $byte = 0;
 
-		$addr++;
+		while ($byte < $loops) {
+			# Create address line
+			my $addr_str = sprintf("@%07x",$addr);
+			print $dst "$addr_str\n";
+
+			my $bytes = substr($line, (2 * $byte), (2 * $width));
+			print $dst reverse split /(..)/, $bytes;
+			print $dst "\n";
+
+			$addr++;
+			$byte += $width;
+		}
 	}
 
 	close($dst);
@@ -63,6 +71,8 @@ sub usage
 	print "\t-i\tInput file in binary format\n";
 	print "\t-o\tOutput file in Palladium HEX format\n";
 	print "\t-b\tBase address of the image in hex\n";
+	print "\t-w\tByte width of output file upto 16.\n";
+	print "\t  \tMust be power of 2 (1,2,4,8...). Default = 16\n";
 	print "\n";
 	print "Environment Variables:\n";
 	print "\tCROSS_COMPILE     Cross compiler to build U-BOOT\n";
@@ -74,9 +84,9 @@ use strict;
 use warnings;
 use Getopt::Std;
 
-use vars qw($opt_o $opt_b $opt_h $opt_i);
+use vars qw($opt_o $opt_b $opt_h $opt_i $opt_w);
 
-getopt('o:i:b');
+getopt('o:i:b:w');
 
 if ($opt_h)
 {
@@ -106,6 +116,19 @@ unless ($opt_b) {
 	exit 1;
 }
 
+# default width is 16 bytes
+if ($opt_w) {
+	unless (($opt_w == 1) or ($opt_w == 2) or
+		($opt_w == 4) or ($opt_w == 8) or
+		($opt_w == 16)) {
+		printf "\nError: Width \"$opt_w\" is not a be power of 2\n\n";
+		usage();
+		exit 1;
+	}
+} else {
+	$opt_w = 16;
+}
+
 my $cross = $ENV{'CROSS_COMPILE'};
 if(!defined $cross){
 	printf "\nError: Please set environment variable CROSS_COMPILE\n\n";
@@ -113,7 +136,7 @@ if(!defined $cross){
 	exit 1;
 }
 
-if(bin2hex($opt_i, $opt_o, $opt_b)) {
+if(bin2hex($opt_i, $opt_o, $opt_b, $opt_w)) {
 	printf "\nError: Failed converting image\n\n";
 	exit 1;
 }
-- 
1.9.1

