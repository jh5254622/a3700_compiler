From 35917471c9b47bdd419a08894702b35c539433e8 Mon Sep 17 00:00:00 2001
From: Hanna Hawa <hannah@marvell.com>
Date: Sun, 8 Mar 2015 16:14:42 +0200
Subject: [PATCH 0135/1240] ddr: added static DRAM initialization code for MK6,
 and DUNIT

	- This initialization can used in the SPL to initialize DDR controller

Change-Id: Ia50594826514c0de0ecb92dcc62c6d4a9b88d9ca
Signed-off-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/17299
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
---
 drivers/ddr/Makefile        |   2 +
 drivers/ddr/ddr_dunit.c     | 186 +++++++++++++++++++++++++++++++++++++
 drivers/ddr/ddr_mckinley6.c | 219 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 407 insertions(+)
 create mode 100644 drivers/ddr/Makefile
 create mode 100644 drivers/ddr/ddr_dunit.c
 create mode 100644 drivers/ddr/ddr_mckinley6.c

diff --git a/drivers/ddr/Makefile b/drivers/ddr/Makefile
new file mode 100644
index 0000000..126f194
--- /dev/null
+++ b/drivers/ddr/Makefile
@@ -0,0 +1,2 @@
+obj-$(CONFIG_TARGET_ARMADA_38X) += ddr_dunit.o
+obj-$(CONFIG_TARGET_ARMADA_8K) += ddr_mckinley6.o
\ No newline at end of file
diff --git a/drivers/ddr/ddr_dunit.c b/drivers/ddr/ddr_dunit.c
new file mode 100644
index 0000000..c05e472
--- /dev/null
+++ b/drivers/ddr/ddr_dunit.c
@@ -0,0 +1,186 @@
+/*
+* ***************************************************************************
+* Copyright (C) 2015 Marvell International Ltd.
+* ***************************************************************************
+* This program is free software: you can redistribute it and/or modify it
+* under the terms of the GNU General Public License as published by the Free
+* Software Foundation, either version 2 of the License, or any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program.  If not, see <http://www.gnu.org/licenses/>.
+* ***************************************************************************
+*/
+
+#include <common.h>
+#include <asm/io.h>
+
+void static_dram_init(void)
+{
+	u32 reg;
+
+	writel(0x7B004a28, 0xD0001400);
+	udelay(2000);
+	writel(0x36301820, 0xD0001404);
+	udelay(2000);
+	writel(0x43149997, 0xD0001408);
+	udelay(2000);
+	writel(0x38411bc7, 0xD000140C);
+	udelay(2000);
+	writel(0x14300000, 0xD0001410);
+	udelay(2000);
+	writel(0x00000700, 0xD0001414);
+	udelay(2000);
+	writel(0x0060f3ff, 0xD0001424);
+	udelay(2000);
+	writel(0x000F8830, 0xD0001428);
+	udelay(2000);
+	writel(0x28c50f8 , 0xD000142C);
+	udelay(2000);
+	writel(0x0000c671, 0xD000147C);
+	udelay(2000);
+	writel(0x00030000, 0xD0001494);
+	udelay(2000);
+	writel(0x00000300, 0xD000149C);
+	udelay(2000);
+	writel(0x00000000, 0xD00014a8);
+	udelay(2000);
+	writel(0xbd09000d, 0xD00014cc);
+	udelay(2000);
+	writel(0x00000000, 0xD0001474);
+	udelay(2000);
+	writel(0x00000009, 0xD0001538);
+	udelay(2000);
+	writel(0x0000000c, 0xD000153C);
+	udelay(2000);
+	writel(0xFFFFFFF1, 0xD0001504);
+	udelay(2000);
+	writel(0xFFFFFFE5, 0xD000150c);
+	udelay(2000);
+	writel(0x00000000, 0xD0001514);
+	udelay(2000);
+	writel(0x0       , 0xD000151c);
+	udelay(2000);
+	writel(0x00000650, 0xD00015D0);
+	udelay(2000);
+	writel(0x00000046, 0xD00015D4);
+	udelay(2000);
+	writel(0x00000010, 0xD00015D8);
+	udelay(2000);
+	writel(0x00000000, 0xD00015DC);
+	udelay(2000);
+	writel(0x23      , 0xD00015E0);
+	udelay(2000);
+	writel(0x00203c18, 0xD00015E4);
+	udelay(2000);
+	writel(0xf8000019, 0xD00015EC);
+	udelay(2000);
+
+	writel(0xe8243dfe, 0xD00016A0);
+	udelay(2000);
+	writel(0xe8280434, 0xD00016A0);
+	udelay(2000);
+
+	writel(0x281020da, 0xD00016A0);
+	udelay(2000);
+	writel(0xe8260cb2, 0xD00016A0);
+	udelay(2000);
+	writel(0xe8290000, 0xD00016A0);
+	udelay(2000);
+	writel(0xf810001f, 0xD00016A0);
+	udelay(2000);
+
+	writel(0xC0005847, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0xC0406049, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0xC080704d, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0xC0C0a85b, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0xC002008d, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0xC0420084, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0xC082009f, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0xC0c20099, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0xC003000F, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0xC043000f, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0xC083000f, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0xC0C3000f, 0xD00016A0);
+	udelay(2000);
+	reg = readl(0xD00016A0);
+	while ((reg & (1<<31)) > 0)
+		reg = readl(0xD00016A0);
+
+	writel(0x00000001, 0xD0001480);
+	udelay(2000000);
+
+	writel(0x80100008, 0xD00015B0);
+	udelay(2000);
+	writel(0x80100002, 0xD00015B0);
+	udelay(2000);
+	writel(0x80100040, 0xD00015B0);
+	udelay(2000);
+	writel(0x11,       0xD0018000);
+	udelay(2000);
+	writel(0x0,        0xD00200e8);
+	udelay(2000);
+	writel(0x0FFFFFE1, 0xD0020184);
+	udelay(2000);
+	writel(0xfffdffff, 0xD00182e4);
+	udelay(2000);
+}
diff --git a/drivers/ddr/ddr_mckinley6.c b/drivers/ddr/ddr_mckinley6.c
new file mode 100644
index 0000000..35ce3db
--- /dev/null
+++ b/drivers/ddr/ddr_mckinley6.c
@@ -0,0 +1,219 @@
+/*
+* ***************************************************************************
+* Copyright (C) 2015 Marvell International Ltd.
+* ***************************************************************************
+* This program is free software: you can redistribute it and/or modify it
+* under the terms of the GNU General Public License as published by the Free
+* Software Foundation, either version 2 of the License, or any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program.  If not, see <http://www.gnu.org/licenses/>.
+* ***************************************************************************
+*/
+
+#include <common.h>
+#include <asm/io.h>
+
+void static_dram_init(void)
+{
+	u32 reg;
+
+	writel(0x7fbfdfef, 0xf0020340);
+	writel(0x000000aa, 0xf0020344);
+	writel(0x00200000, 0xf0020310);
+	writel(0x00200000, 0xf0020314);
+	writel(0x00200000, 0xf0020318);
+	writel(0x00200000, 0xf002031c);
+	writel(0x000e0001, 0xf0020200);
+	writel(0x00000000, 0xf0020204);
+	writel(0x400e0001, 0xf0020208);
+	writel(0x00000000, 0xf002020c);
+	writel(0x800e0001, 0xf0020210);
+	writel(0x00000000, 0xf0020214);
+	writel(0xc00e0001, 0xf0020218);
+	writel(0x00000000, 0xf002021c);
+	writel(0x05000632, 0xf0020220);
+	writel(0x05000632, 0xf0020224);
+	writel(0x05000632, 0xf0020228);
+	writel(0x05000632, 0xf002022c);
+	writel(0x00030400, 0xf0020044);
+	writel(0x00006000, 0xf00202c0);
+	writel(0x00000020, 0xf00202c4);
+	writel(0x00000001, 0xf0020048);
+	writel(0x00010200, 0xf0020180);
+	writel(0x000000ff, 0xf0020050);
+	writel(0x00000002, 0xf002004c);
+	writel(0x00000480, 0xf0020054);
+	writel(0x0000080a, 0xf0020300);
+	writel(0x00000032, 0xf0020380);
+	writel(0x00000032, 0xf0020384);
+	writel(0x09600050, 0xf0020388);
+	writel(0x00000200, 0xf002038c);
+	writel(0x00400100, 0xf0020390);
+	writel(0x00f00618, 0xf0020394);
+	writel(0x00f80200, 0xf0020398);
+	writel(0x00120808, 0xf002039c);
+	writel(0x00050514, 0xf00203a0);
+	writel(0x00000001, 0xf00203a4);
+	writel(0x00000c04, 0xf00203a8);
+	writel(0x18260a1c, 0xf00203ac);
+	writel(0x0a0c060a, 0xf00203b0);
+	writel(0x04040606, 0xf00203b4);
+	writel(0x00000606, 0xf00203b8);
+	writel(0x02020404, 0xf00203bc);
+	writel(0x00000000, 0xf00203c0);
+	writel(0x00000000, 0xf00203c4);
+	writel(0x000e000e, 0xf0020064);
+	writel(0x10077779, 0xf0020804);
+	writel(0x1ff00770, 0xf0020808);
+	writel(0x3f03fc77, 0xf002080c);
+	writel(0x00000000, 0xf0020828);
+	writel(0x03800000, 0xf0020830);
+	writel(0x00300000, 0xf0020834);
+	writel(0x00100100, 0xf0020810);
+	writel(0x00000400, 0xf0020840);
+	writel(0x81000001, 0xf00208c0);
+	writel(0x00000000, 0xf00208d0);
+	writel(0x00000000, 0xf00208d4);
+	writel(0x00000000, 0xf00208d8);
+	writel(0x00000000, 0xf00208dc);
+	writel(0x00000000, 0xf00208e0);
+	writel(0x00000000, 0xf00208e4);
+	writel(0x00000000, 0xf00208e8);
+	writel(0x00000000, 0xf00208ec);
+	writel(0x00000000, 0xf00208f0);
+	writel(0x00000000, 0xf00208f4);
+	writel(0x00000000, 0xf00208f8);
+	writel(0x00000000, 0xf00208fc);
+	writel(0x00000000, 0xf0020900);
+	writel(0x00000000, 0xf0020904);
+	writel(0x00000000, 0xf0020908);
+	writel(0x00000000, 0xf002090c);
+	writel(0x00000000, 0xf0020910);
+	writel(0x00000000, 0xf0020914);
+	writel(0x00000000, 0xf0020918);
+	writel(0x00000000, 0xf002091c);
+	writel(0x00000000, 0xf0020920);
+	writel(0x00000000, 0xf0020924);
+	writel(0x00000000, 0xf0020928);
+	writel(0x00000000, 0xf002092c);
+	writel(0x00000000, 0xf0020930);
+	writel(0x00000000, 0xf0020934);
+	writel(0x00000000, 0xf0020938);
+	writel(0x00000000, 0xf002093c);
+	writel(0x00000000, 0xf0020940);
+	writel(0x00000000, 0xf0020944);
+	writel(0x00000000, 0xf0020948);
+	writel(0x00000000, 0xf002094c);
+	writel(0x00000000, 0xf0020950);
+	writel(0x00000000, 0xf0020954);
+	writel(0x00000000, 0xf0020958);
+	writel(0x00000000, 0xf002095c);
+	writel(0x00000000, 0xf0020890);
+	writel(0x00000000, 0xf0020894);
+	writel(0x00000000, 0xf0020898);
+	writel(0x00000000, 0xf002089c);
+	writel(0x00000000, 0xf00208a0);
+	writel(0x00000000, 0xf00208a4);
+	writel(0x00000000, 0xf00208a8);
+	writel(0x00000000, 0xf00208ac);
+	writel(0x00000000, 0xf00208b0);
+	writel(0x00004040, 0xf0020800);
+	writel(0x00080200, 0xf0020814);
+	writel(0x00000003, 0xf0020838);
+	writel(0x00000020, 0xf002083c);
+	writel(0x0000010a, 0xf0020980);
+	writel(0x0000010a, 0xf0020d80);
+	writel(0x0000010a, 0xf0020984);
+	writel(0x0000010a, 0xf0020d84);
+	writel(0x0000010a, 0xf0020988);
+	writel(0x0000010a, 0xf0020d88);
+	writel(0x0000010a, 0xf002098c);
+	writel(0x0000010a, 0xf0020d8c);
+	writel(0x0000010a, 0xf0020990);
+	writel(0x0000010a, 0xf0020d90);
+	writel(0x0000010a, 0xf0020994);
+	writel(0x0000010a, 0xf0020d94);
+	writel(0x0000010a, 0xf0020998);
+	writel(0x0000010a, 0xf0020d98);
+	writel(0x0000010a, 0xf002099c);
+	writel(0x0000010a, 0xf0020d9c);
+	writel(0x0000010a, 0xf00209a0);
+	writel(0x0000010a, 0xf0020da0);
+	writel(0x0000010a, 0xf00209a4);
+	writel(0x0000010a, 0xf0020da4);
+	writel(0x0000010a, 0xf00209a8);
+	writel(0x0000010a, 0xf0020da8);
+	writel(0x0000010a, 0xf00209ac);
+	writel(0x0000010a, 0xf0020dac);
+	writel(0x0000010a, 0xf00209b0);
+	writel(0x0000010a, 0xf0020db0);
+	writel(0x0000010a, 0xf00209b4);
+	writel(0x0000010a, 0xf0020db4);
+	writel(0x0000010a, 0xf00209b8);
+	writel(0x0000010a, 0xf0020db8);
+	writel(0x0000010a, 0xf00209bc);
+	writel(0x0000010a, 0xf0020dbc);
+	writel(0x0000010a, 0xf00209c0);
+	writel(0x0000010a, 0xf0020dc0);
+	writel(0x0000010a, 0xf00209c4);
+	writel(0x0000010a, 0xf0020dc4);
+	writel(0x0000010a, 0xf00209c8);
+	writel(0x0000010a, 0xf0020dc8);
+	writel(0x0000010a, 0xf00209cc);
+	writel(0x0000010a, 0xf0020dcc);
+	writel(0x0000010a, 0xf00209d0);
+	writel(0x0000010a, 0xf0020dd0);
+	writel(0x0000010a, 0xf00209d4);
+	writel(0x0000010a, 0xf0020dd4);
+	writel(0x0000010a, 0xf00209d8);
+	writel(0x0000010a, 0xf0020dd8);
+	writel(0x0000010a, 0xf00209dc);
+	writel(0x0000010a, 0xf0020ddc);
+	writel(0x0000010a, 0xf00209e0);
+	writel(0x0000010a, 0xf0020de0);
+	writel(0x0000010a, 0xf00209e4);
+	writel(0x0000010a, 0xf0020de4);
+	writel(0x0000010a, 0xf00209e8);
+	writel(0x0000010a, 0xf0020de8);
+	writel(0x0000010a, 0xf00209ec);
+	writel(0x0000010a, 0xf0020dec);
+	writel(0x0000010a, 0xf00209f0);
+	writel(0x0000010a, 0xf0020df0);
+	writel(0x0000010a, 0xf00209f4);
+	writel(0x0000010a, 0xf0020df4);
+	writel(0x0000010a, 0xf00209f8);
+	writel(0x0000010a, 0xf0020df8);
+	writel(0x0000010a, 0xf00209fc);
+	writel(0x0000010a, 0xf0020dfc);
+	writel(0x0000010a, 0xf0020a00);
+	writel(0x0000010a, 0xf0020e00);
+	writel(0x0000010a, 0xf0020a04);
+	writel(0x0000010a, 0xf0020e04);
+	writel(0x0000010a, 0xf0020a08);
+	writel(0x0000010a, 0xf0020e08);
+	writel(0x0000010a, 0xf0020a0c);
+	writel(0x0000010a, 0xf0020e0c);
+	writel(0x08080000, 0xf0020850);
+	writel(0x08080000, 0xf0020854);
+	writel(0x08080000, 0xf0020858);
+	writel(0x08080000, 0xf002085c);
+	writel(0x08080000, 0xf0020860);
+	writel(0x08080000, 0xf0020864);
+	writel(0x08080000, 0xf0020868);
+	writel(0x08080000, 0xf002086c);
+	writel(0x08080000, 0xf0020870);
+	writel(0x20000000, 0xf0020820);
+	writel(0x40000000, 0xf0020820);
+	writel(0x80000000, 0xf0020820);
+	writel(0x1f000001, 0xf0020020);
+
+	reg = readl(0xf0020008);
+	while (reg != 0x00001111)
+		reg = readl(0xf0020008);
+}
-- 
1.9.1

