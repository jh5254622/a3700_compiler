From 7c8bd00c9619eed54c34644001c913650f1675b1 Mon Sep 17 00:00:00 2001
From: Ahmad Abbas <ahmada@marvell.com>
Date: Tue, 14 Apr 2015 19:48:58 +0300
Subject: [PATCH 0180/1240] a38x:spi-eth: added support for eth-spi interface
 in uboot

	added support for the enc28j60 in u-boot which enables receiving
        ethernet packets using spi interface. changes include:
        - enc28j60 initialization call in case it was configured to work.
	- added a cs clock polarity bit map in the dts file that
	  indicates if the clock should idle high or low using each cs

	in order for the interface to work we need to configure the mpps
	to work with cs 1 and add  "#define CONFIG_ENC28J60" in the
	configuration file

Change-Id: I995059f3254c2fbdff64cb9c16b7d27409f85336
Signed-off-by: Ahmad Abbas <ahmada@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/18303
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/dts/armada-385-db.dts | 2 ++
 board/mvebu/common/eth_init.c  | 6 ++++++
 drivers/spi/mvebu_spi.c        | 8 +++++---
 3 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/arch/arm/dts/armada-385-db.dts b/arch/arm/dts/armada-385-db.dts
index 0083bb1..204bda2 100644
--- a/arch/arm/dts/armada-385-db.dts
+++ b/arch/arm/dts/armada-385-db.dts
@@ -52,6 +52,8 @@
 				spi-max-frequency = <20971520>;
 				clock = <&tclk>;
 				status = "okay";
+				cpol-cs-bitmap = <1>; /*bit i is set if the
+							cs-i SCK idles high */
 			};
 
 			spi1: spi@10680 {
diff --git a/board/mvebu/common/eth_init.c b/board/mvebu/common/eth_init.c
index cf2569c..b159186 100644
--- a/board/mvebu/common/eth_init.c
+++ b/board/mvebu/common/eth_init.c
@@ -20,6 +20,7 @@
 #include <common.h>
 #include <errno.h>
 #include <netdev.h>
+#include <spi.h>
 #include <asm/arch-mvebu/unit-info.h>
 #include <asm/arch-mvebu/driver_interface.h>
 
@@ -33,6 +34,11 @@ int board_eth_init(bd_t *bis)
 	e1000_initialize(bis);
 #endif
 
+#ifdef CONFIG_ENC28J60
+	printf("init enc28j60:\n");
+	enc28j60_initialize(0, 1, 1000, SPI_MODE_0);
+#endif
+
 #ifdef CONFIG_EEPRO100
 	eepro100_initialize(bis);
 #endif
diff --git a/drivers/spi/mvebu_spi.c b/drivers/spi/mvebu_spi.c
index ca176eb..87d66ac 100644
--- a/drivers/spi/mvebu_spi.c
+++ b/drivers/spi/mvebu_spi.c
@@ -154,7 +154,7 @@ struct spi_slave *spi_setup_slave(unsigned int bus, unsigned int cs,
 	struct spi_slave *slave;
 	u32 ctrl_reg, clock = -1;
 	int node_list[CONFIG_MAX_SPI_NUM], node;
-	u32 i, count;
+	u32 i, count, cpol = -1;
 
 	count = fdtdec_find_aliases_for_id(gd->fdt_blob, "spi",
 			COMPAT_MVEBU_SPI, node_list, CONFIG_MAX_SPI_NUM);
@@ -170,6 +170,7 @@ struct spi_slave *spi_setup_slave(unsigned int bus, unsigned int cs,
 			spi_bus.base_reg = fdt_get_regs_offs(gd->fdt_blob, node, "reg");
 			spi_bus.max_freq = fdtdec_get_int(gd->fdt_blob, node, "spi-max-frequency", CONFIG_MIN_SPI_CLK);
 			clock = soc_clock_get(gd->fdt_blob, node);
+			cpol = (1 << cs) & fdtdec_get_int(gd->fdt_blob, node, "cpol-cs-bitmap", (1 << cs));
 		}
 	}
 
@@ -192,14 +193,15 @@ struct spi_slave *spi_setup_slave(unsigned int bus, unsigned int cs,
 	/* Verify that the CS is deactivate */
 	spi_cs_deactivate(slave);
 
-	mv_spi_cs_set(slave->bus, 0);
+	mv_spi_cs_set(slave->bus, cs);
 
 	mv_spi_baud_rate_set(slave->bus, clock, spi_bus.max_freq);
 
 	/* Set the SPI interface parameters */
 	ctrl_reg = readl(spi_bus.base_reg + SPI_IF_CONFIG_REG);
 	ctrl_reg &= ~(SPI_CPOL_MASK | SPI_CPHA_MASK | SPI_TXLSBF_MASK | SPI_RXLSBF_MASK);
-	ctrl_reg |= SPI_CPOL_MASK;
+	if (cpol)
+		ctrl_reg |= SPI_CPOL_MASK;
 	ctrl_reg |= SPI_CPHA_MASK;
 	writel(ctrl_reg, spi_bus.base_reg + SPI_IF_CONFIG_REG);
 
-- 
1.9.1

