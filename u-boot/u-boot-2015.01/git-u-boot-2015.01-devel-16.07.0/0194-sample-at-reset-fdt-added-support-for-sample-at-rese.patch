From 490185f2f52606aab7737a1713f45e7d45b2ed86 Mon Sep 17 00:00:00 2001
From: Hanna Hawa <hannah@marvell.com>
Date: Tue, 9 Jun 2015 15:03:17 +0300
Subject: [PATCH 0194/1240] sample at reset: fdt: added support for sample at
 reset command in FDT

	- Added support for sample at reset command in Device Tree blob
	- The U-Boot initialize the struct of the sample at reset command while booting.
	- Move all structs to FDT blob
	- Added DT binding for sample at reset

Change-Id: Ia0959cfe86933a738daaa955e5e9a4695f85ea15
Signed-off-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/19929
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
---
 arch/arm/dts/armada-385-db.dts              |  33 +++++++
 board/mvebu/armada38x/board-info.c          |  26 +-----
 board/mvebu/armada8k/board-info.c           |  25 +-----
 board/mvebu/armadalp/board-info.c           |  26 +-----
 board/mvebu/common/devel-board.c            |  21 ++---
 board/mvebu/common/sar.c                    | 134 +++++++++++++++++++++++-----
 board/mvebu/common/sar.h                    |  35 ++++----
 doc/device-tree-bindings/README.mvebu       |   3 +
 doc/device-tree-bindings/misc/mvebu-sar.txt |  57 ++++++++++++
 include/fdtdec.h                            |   1 +
 lib/fdtdec.c                                |   1 +
 11 files changed, 237 insertions(+), 125 deletions(-)
 create mode 100644 doc/device-tree-bindings/misc/mvebu-sar.txt

diff --git a/arch/arm/dts/armada-385-db.dts b/arch/arm/dts/armada-385-db.dts
index 7e7ecd6..5b45cf0 100644
--- a/arch/arm/dts/armada-385-db.dts
+++ b/arch/arm/dts/armada-385-db.dts
@@ -79,4 +79,37 @@
 			};
 		};
 	};
+
+	sar {
+		compatible = "marvell,sample-at-reset";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		reg = <0x40 0x44 0x48>;
+		chip_count = <3>;
+		bit_width = <5>;
+
+		cpufreq {
+			key = "cpufreq";
+			description = "CPU frequency";
+			start-bit = <0>;
+			bit-length = <4>;
+			option-cnt = <2>;
+			options = "0x0", "1800/900",
+				"0x1", "1600/800";
+			default = <0x1>;
+			status = "okay";
+		};
+		bootsrc {
+			key = "bootsrc";
+			description = "Boot source options";
+			start-bit = <4>;
+			bit-length = <4>;
+			option-cnt = <3>;
+			options = "0x0", "NAND",
+				"0x1", "SPI",
+				"0x2", "NOR";
+			default = <0x1>;
+			status = "okay";
+		};
+	};
 };
diff --git a/board/mvebu/armada38x/board-info.c b/board/mvebu/armada38x/board-info.c
index 5aeca7a..9733f07 100644
--- a/board/mvebu/armada38x/board-info.c
+++ b/board/mvebu/armada38x/board-info.c
@@ -24,32 +24,8 @@
 
 #define SATR_EEPROM0_ADDR	0x22
 
-/* Define all SAR variables available for SOC */
-/* Assuming their location is equal on all boards */
-struct sar_var a38x_sar_lookup[MAX_SAR] = {
-	[CPUS_NUM_SAR] = {0, 2, 3, 0,
-		{{0x0, "Single CPU", 0},
-		 {0x2, "Dual CPU", 0},
-		 {0x3, "Quad CPU", VAR_IS_DEFUALT} },
-	},
-	[FREQ_SAR] = {2, 5, 2, 0,
-		{{0x0, "800 / 400 / 400"},
-		 {0x5, "1200 / 600 / 600"} },
-	},
-	[BOOT_SRC_SAR] = {7, 2, 3, 0,
-		{{0x0, "NAND boot", 0},
-		 {0x2, "SPI boot", VAR_IS_DEFUALT},
-		 {0x3, "NOR boot", 0} },
-	}
-};
-
 /* Define general SAR information */
-struct sar_data a38x_sar = {
-	.chip_addr    = {0x4c, 0x4d, 0x4e, 0x4f},
-	.chip_count   = 4,
-	.bit_width    = 5,
-	.sar_lookup   = a38x_sar_lookup
-};
+struct sar_data a38x_sar;
 
 /* Define all board configuration variables */
 /* Assuming their location is equal on all boards */
diff --git a/board/mvebu/armada8k/board-info.c b/board/mvebu/armada8k/board-info.c
index c00f625..c06db04 100644
--- a/board/mvebu/armada8k/board-info.c
+++ b/board/mvebu/armada8k/board-info.c
@@ -25,31 +25,8 @@
 #define SATR_EEPROM0_ADDR	0x22
 
 /* Define all SAR variables available for SOC */
-/* Assuming their location is equal on all boards */
-struct sar_var a8k_sar_lookup[MAX_SAR] = {
-	[CPUS_NUM_SAR] = {0, 2, 3, 0,
-		{{0x0, "Single CPU", 0},
-		 {0x2, "Dual CPU", 0},
-		 {0x3, "Quad CPU", VAR_IS_DEFUALT} },
-	},
-	[FREQ_SAR] = {2, 5, 2, 0,
-		{{0x0, "800 / 400 / 400"},
-		 {0x5, "1200 / 600 / 600"} },
-	},
-	[BOOT_SRC_SAR] = {7, 2, 3, 0,
-		{{0x0, "NAND boot", 0},
-		 {0x2, "SPI boot", VAR_IS_DEFUALT},
-		 {0x3, "NOR boot", 0} },
-	}
-};
-
 /* Define general SAR information */
-struct sar_data a8k_sar = {
-	.chip_addr    = {0x4c, 0x4d, 0x4e, 0x4f},
-	.chip_count   = 4,
-	.bit_width    = 5,
-	.sar_lookup   = a8k_sar_lookup
-};
+struct sar_data a8k_sar;
 
 /* Define all board configuration variables */
 /* Assuming their location is equal on all boards */
diff --git a/board/mvebu/armadalp/board-info.c b/board/mvebu/armadalp/board-info.c
index e3a2bd1..afc296c 100644
--- a/board/mvebu/armadalp/board-info.c
+++ b/board/mvebu/armadalp/board-info.c
@@ -24,32 +24,8 @@
 #define SATR_EEPROM0_ADDR	0x22
 
 /* Define all SAR variables available for SOC */
-/* Assuming their location is equal on all boards */
-struct sar_var armadalp_sar_lookup[MAX_SAR] = {
-	/* the following entries are temporary examples only -  referenced from A38x */
-	[CPUS_NUM_SAR] = {0, 2, 3, 0,
-		{{0x0, "Single CPU", 0},
-		 {0x2, "Dual CPU", 0},
-		 {0x3, "Quad CPU", VAR_IS_DEFUALT} },
-	},
-	[FREQ_SAR] = {2, 5, 2, 0,
-		{{0x0, "800 / 400 / 400"},
-		 {0x5, "1200 / 600 / 600"} },
-	},
-	[BOOT_SRC_SAR] = {7, 2, 3, 0,
-		{{0x0, "NAND boot", 0},
-		 {0x2, "SPI boot", VAR_IS_DEFUALT},
-		 {0x3, "NOR boot", 0} },
-	}
-};
-
 /* Define general SAR information */
-struct sar_data armadalp_sar = {
-	.chip_addr    = {0x4c, 0x4d, 0x4e, 0x4f},
-	.chip_count   = 4,
-	.bit_width    = 5,
-	.sar_lookup   = armadalp_sar_lookup
-};
+struct sar_data armadalp_sar;
 
 /* Define all board configuration variables */
 /* Assuming their location is equal on all boards */
diff --git a/board/mvebu/common/devel-board.c b/board/mvebu/common/devel-board.c
index b244735..812bb50 100644
--- a/board/mvebu/common/devel-board.c
+++ b/board/mvebu/common/devel-board.c
@@ -24,30 +24,25 @@
 #include <asm/arch-mvebu/soc.h>
 #include "devel-board.h"
 
+#include "sar.h"
+
 int mvebu_devel_board_init(struct mvebu_board_family *brd_fam)
 {
 	struct mvebu_board_info *brd = brd_fam->curr_board;
-	int sar_id, cfg_id, idx;
+	int cfg_id, idx;
 
 	/* Update SAR and CFG for board */
 	if (brd->configurable) {
 		struct mvebu_board_config *brd_cfg = brd->config_data;
 
-		/* Deactivate all SAR entries */
-		for (sar_id = 0; sar_id < MAX_SAR; sar_id++)
-			brd_fam->sar->sar_lookup[sar_id].active = 0;
-
-		/* Activate board entries */
-		for (idx = 0; idx < brd_cfg->sar_cnt; idx++)
-			brd_fam->sar->sar_lookup[brd_cfg->active_sar[idx]].active = 1;
-
 		/* Deactivate all CFG entries */
 		for (cfg_id = 0; cfg_id < MAX_CFG; cfg_id++)
-			brd_fam->sar->sar_lookup[cfg_id].active = 0;
-
+			brd_fam->cfg->cfg_lookup[cfg_id].active = 0;
 		/* Activate board entries */
-		for (idx = 0; idx < brd_cfg->cfg_cnt; idx++)
-			brd_fam->sar->sar_lookup[brd_cfg->active_cfg[idx]].active = 1;
+		for (idx = 0; idx < brd_cfg->sar_cnt; idx++)
+			brd_fam->cfg->cfg_lookup[brd_cfg->active_sar[idx]].active = 1;
+		/* Initialize sample at reset structs for the SatR command */
+		sar_init();
 	}
 
 	/* Update MPP configurations */
diff --git a/board/mvebu/common/sar.c b/board/mvebu/common/sar.c
index 0239555..a9e4dc7 100644
--- a/board/mvebu/common/sar.c
+++ b/board/mvebu/common/sar.c
@@ -27,35 +27,25 @@
 #include "devel-board.h"
 #include "sar.h"
 
+#include <fdtdec.h>
+#include <asm/arch-mvebu/fdt.h>
+#include <malloc.h>
+
 DECLARE_GLOBAL_DATA_PTR;
 
-struct var_desc sar_desc_table[MAX_SAR] = {
-	[CPUS_NUM_SAR] =	{ "cpusnum", "Number of active CPUs"},
-	[CPU0_ENDIANES_SAR] =	{ "cpuend", "CPU endianes mode"},
-	[FREQ_SAR] =		{ "freq", "SOC frequency configiuration (CPU/ Fabric/ DDR)"},
-	[CPU_FREQ_SAR] =	{ "cpufreq", "CPU Frequency"},
-	[FAB_REQ_SAR] =		{ "fabfreq", "Fabric (L2) frequency"},
-	[BOOT_SRC_SAR] =	{ "bootsrc", "Boot device source"},
-	[BOOT_WIDTH_SAR] =	{ "bootwidth", "Width of boot device read"},
-	[PEX_MODE_SAR] =	{ "pexmode", "Pex configuration"},
-	[L2_SIZE_SAR] =		{ "l2size", "Size of L2 cache"},
-	[DRAM_ECC_SAR] =	{ "dramecc", "Enables DRAM ECC"},
-	[DRAM_BUS_WIDTH_SAR] =	{ "dramwidth", "DRAM bus width"}
-};
-
-#define I2C_DUMMY_BASE ((int)0x91000000)
+#define I2C_DUMMY_BASE ((int)0x3000000)
 
 /* I2C interface commands */
 static int i2c_write_dummy(uchar chip, uint addr, int alen, uchar *buffer, int len)
 {
-	uintptr_t reg = (uintptr_t)(I2C_DUMMY_BASE) + addr;
+	uintptr_t reg = (uintptr_t)(I2C_DUMMY_BASE) + chip;
 	writeb(*buffer, reg);
 	return 0;
 }
 
 static int i2c_read_dummy(uchar chip, uint addr, int alen, uchar *buffer, int len)
 {
-	uintptr_t reg = (uintptr_t)(I2C_DUMMY_BASE) + addr;
+	uintptr_t reg = (uintptr_t)(I2C_DUMMY_BASE) + chip;
 	(*buffer) = (uchar)readb(reg);
 	return 0;
 }
@@ -172,10 +162,11 @@ static int sar_default_var(struct sar_var *var)
 
 int sar_get_key_id(const char *key)
 {
+	struct sar_var *sar_table = board_get_sar_table();
 	int id;
 
 	for (id = 0; id < MAX_SAR; id++) {
-		if (strcmp(key, sar_desc_table[id].key) == 0)
+		if (strcmp(key, sar_table[id].key) == 0)
 			return id;
 	}
 	return -1;
@@ -232,9 +223,9 @@ void sar_print_var(int id, bool print_opts)
 {
 	int cnt;
 	struct var_opts *opts;
+	struct sar_var *sar_table = board_get_sar_table();
 
-	printf("%-10s %s\n", sar_desc_table[id].key,
-	       sar_desc_table[id].description);
+	printf("%-10s %s\n", sar_table[id].key, sar_table[id].desc);
 
 	if (print_opts) {
 		opts = sar_get_var_opts(id, &cnt);
@@ -329,6 +320,7 @@ int  sar_write_key(const char *key, int val)
 	if (desc == NULL) {
 		printf("ERROR: value 0x%x not supported for key %s\n", val, key);
 		printf("use \"SatR list %s\" to print supported values\n", key);
+		return -1;
 	}
 
 	if (sar_write_var(var, val))
@@ -347,10 +339,10 @@ int sar_defualt_all(void)
 	int ret = 0;
 
 	for (id = 0; id < MAX_SAR; id++) {
-		var = sar_id_to_var(id);
 		if (sar_is_var_active(id)) {
+			var = sar_id_to_var(id);
 			ret |= sar_default_var(var);
-			sar_print_key(sar_desc_table[id].key);
+			sar_print_key(var->key);
 		}
 	}
 
@@ -377,3 +369,101 @@ int  sar_default_key(const char *key)
 	return 0;
 }
 
+static void sar_dump(void)
+{
+#ifdef DEBUG
+	struct sar_data *sar = board_get_sar();
+	int i, id;
+	printf("Sample at reset Dumper:\n");
+	printf("\tSatR had %d chip addresses: ", sar->chip_count);
+	for (i = 0; i < sar->chip_count; i++)
+		printf("0x%x ", sar->chip_addr[i]);
+	printf("\n\tBit width for the I2C chip is: 0x%x\n", sar->bit_width);
+	printf("\tAll SatR variables thet available:\n");
+	for (i = 0; i < MAX_SAR; i++) {
+		if (sar->sar_lookup[i].active == 0)
+			continue;
+		printf("\t\tID = %d, ", i);
+		printf("Key = %s, ", sar->sar_lookup[i].key);
+		printf("Desc. = %s\n", sar->sar_lookup[i].desc);
+		printf("\t\tStart bit = 0x%x, ", sar->sar_lookup[i].start_bit);
+		printf("Bit length = %d\n", sar->sar_lookup[i].bit_length);
+		printf("\t\tThis variable had %d options:\n", sar->sar_lookup[i].option_cnt);
+		for (id = 0; id < sar->sar_lookup[i].option_cnt; id++) {
+			printf("\t\t\tValue = 0x%x, ", sar->sar_lookup[i].option_desc[id].value);
+			printf("Desc. = %s, ", sar->sar_lookup[i].option_desc[id].desc);
+			printf("Is Default = %d\n", sar->sar_lookup[i].option_desc[id].flags);
+		}
+	}
+#endif
+}
+
+void sar_init(void)
+{
+	int i, var_default;
+	int node, var, id, len;
+	const char *str;
+	struct sar_data *sar = board_get_sar();
+
+	debug_enter();
+	/* Get sar node from the FDT blob */
+	node = fdt_node_offset_by_compatible(gd->fdt_blob, -1, fdtdec_get_compatible(COMPAT_MVEBU_SAR));
+	if (node < 0) {
+		debug("No sar node found in FDT blob\n");
+		return;
+	}
+
+	/* Get the bit width of the sapmple at reset i2c register */
+	sar->bit_width = fdtdec_get_int(gd->fdt_blob, node, "bit_width", 1);
+	/* Get the address count of sample at reset i2c */
+	sar->chip_count = fdtdec_get_int(gd->fdt_blob, node, "chip_count", 1);
+	/* get the address in array */
+	if (fdtdec_get_int_array(gd->fdt_blob, node, "reg", sar->chip_addr, sar->chip_count) != 0) {
+		error("No sample at reset addresses found in FDT blob\n");
+		return;
+	}
+	/* Get the fisrt variable in sample at reset */
+	var = fdt_first_subnode(gd->fdt_blob, node);
+	if (!var) {
+		error("No sample at reset variables found in FDT\n");
+		return;
+	}
+	id = 0;
+	/* Find the variables under sample at reset node */
+	do {
+		/* if the variable is disabled skip it */
+		if (!fdtdec_get_is_enabled(gd->fdt_blob, var))
+			continue;
+		/* Get the key of the var option */
+		fdt_get_string(gd->fdt_blob, var, "key", (const char **)&sar->sar_lookup[id].key);
+		/* Get the descrition of the var */
+		fdt_get_string(gd->fdt_blob, var, "description", (const char **)&sar->sar_lookup[id].desc);
+		/* set the different options of the var */
+		sar->sar_lookup[id].active = 1;
+		sar->sar_lookup[id].start_bit = fdtdec_get_int(gd->fdt_blob, var, "start-bit", 0);
+		sar->sar_lookup[id].bit_length = fdtdec_get_int(gd->fdt_blob, var, "bit-length", 0);
+		sar->sar_lookup[id].option_cnt = fdtdec_get_int(gd->fdt_blob, var, "option-cnt", 0);
+		/* Get the options list */
+		len = fdt_count_strings(gd->fdt_blob, var, "options");
+		if ((len < 0) || (sar->sar_lookup[id].option_cnt*2 != len)) {
+			error("%s: failed to parse the \"options\" property", __func__);
+			return;
+		}
+		var_default = fdtdec_get_int(gd->fdt_blob, var, "default", 0);
+		/* Fill the struct with the options from the FDT */
+		for (i = 0; i < len; i += 2) {
+			fdt_get_string_index(gd->fdt_blob, var, "options", i, &str);
+			sar->sar_lookup[id].option_desc[i/2].value = simple_strtoul(str, NULL, 16);
+			fdt_get_string_index(gd->fdt_blob, var, "options", i + 1, (const char **)
+					&sar->sar_lookup[id].option_desc[i/2].desc);
+			if (sar->sar_lookup[id].option_desc[i/2].value == var_default)
+				sar->sar_lookup[id].option_desc[i/2].flags = var_default;
+		}
+		/* Get the offset of the next subnode */
+		var = fdt_next_subnode(gd->fdt_blob, var);
+		id++;
+	} while (var > 0);
+
+	sar_dump();
+	debug_exit();
+}
diff --git a/board/mvebu/common/sar.h b/board/mvebu/common/sar.h
index 72233da..0c8fbf2 100644
--- a/board/mvebu/common/sar.h
+++ b/board/mvebu/common/sar.h
@@ -26,21 +26,7 @@
 #include "var.h"
 
 #define MAX_SAR_CHIPS	4
-
-struct sar_var {
-	u8 start_bit;
-	u8 bit_length;
-	u8 option_cnt;
-	u8 active;
-	struct var_opts option_desc[MAX_VAR_OPTIONS];
-};
-
-struct sar_data {
-	u32	chip_addr[MAX_SAR_CHIPS];
-	u8	chip_count;
-	u8	bit_width;
-	struct sar_var *sar_lookup;
-};
+#define MAX_SAR 8
 
 enum sar_variables {
 	CPUS_NUM_SAR = 0,
@@ -54,7 +40,23 @@ enum sar_variables {
 	L2_SIZE_SAR,
 	DRAM_ECC_SAR,
 	DRAM_BUS_WIDTH_SAR,
-	MAX_SAR
+};
+
+struct sar_var {
+	u8 start_bit;
+	u8 bit_length;
+	u8 option_cnt;
+	u8 active;
+	char *desc;
+	char *key;
+	struct var_opts option_desc[MAX_VAR_OPTIONS];
+};
+
+struct sar_data {
+	u32	chip_addr[MAX_SAR_CHIPS];
+	u8	chip_count;
+	u8	bit_width;
+	struct sar_var sar_lookup[MAX_SAR];
 };
 
 int  sar_default_key(const char *key);
@@ -64,5 +66,6 @@ int  sar_print_key(const char *key);
 void sar_list_keys(void);
 int  sar_list_key_opts(const char *key);
 int  sar_is_available(void);
+void sar_init(void);
 
 #endif /* _SAR_H_ */
diff --git a/doc/device-tree-bindings/README.mvebu b/doc/device-tree-bindings/README.mvebu
index fe8f4bc..dc6083a 100644
--- a/doc/device-tree-bindings/README.mvebu
+++ b/doc/device-tree-bindings/README.mvebu
@@ -46,3 +46,6 @@ Group Ltd.
 				Specify the clock interface, check doc/device-tree-bindings/clock/mvebu-clock.txt
 			2.1.3 /soc/internal-regs/i2c/ node;
 				Specify the I2C interface, check doc/device-tree-bindings/i2c/mvebu-i2c.txt
+3) /sar/ node:
+	Specify the sample at reset database, check
+	doc/device-tree-bindings/misc/mvebu-sar.txt
diff --git a/doc/device-tree-bindings/misc/mvebu-sar.txt b/doc/device-tree-bindings/misc/mvebu-sar.txt
new file mode 100644
index 0000000..7e9cfc4
--- /dev/null
+++ b/doc/device-tree-bindings/misc/mvebu-sar.txt
@@ -0,0 +1,57 @@
+Marvell SAR bindings
+====================
+
+The SAR node include describtion about the sample at reset command, and all the options that the
+board support.
+
+The SAR node requires the following properties:
+	- compatible = "marvell,sample-at-reset";
+	- chip_count: The number of the Sample at reset I2C chips
+	- reg: The addresses list of the Sample at reset I2C chips
+	- bit_width: The bit width in every I2C chip of the Sample at reset
+	- The options of the sample at reset discribed with the child nodes of sar node:
+		for example CPU frequency: /sar/cpufreq/
+		The option node requires the following proporties:
+		- key: The key name of the option, should be the same as subnode name
+		- description : The describtion of the option
+		- start-bit: Start bit in the I2C chip from the start of the first I2C chip
+				for example: 6 means the 1st bit in the 2nd chip (if bit width=5)
+		- bit-length: Bit length of the option in the I2C chip
+		- option-cnt: The count of the options in this sample at reset node
+		- options: Describe the options list by setting the "value", "describtion of the value"
+		- default: What is the value of default options
+		- status: Set if the Sample at reset option is enabled/disabled
+
+Example:
+sar {
+	compatible = "marvell,sample-at-reset";
+	#address-cells = <1>;
+	#size-cells = <0>;
+	reg = <0x4c 0x4d 0x4e>;
+	chip_count = <3>;
+	bit_width = <5>;
+
+	cpufreq {
+		key = "cpufreq";
+		description = "CPU frequency";
+		start-bit = <0>;
+		bit-length = <4>;
+		option-cnt = <2>;
+		options = "0x0", "1800/900",
+			  "0x1", "1600/800";
+		default = <0x1>;
+		status = "okay";
+	};
+	bootsrc {
+		key = "bootsrc";
+		description = "Boot source options";
+		start-bit = <5>;
+		bit-length = <4>;
+		option-cnt = <3>;
+		options = "0x0", "NAND",
+			  "0x1", "SPI",
+			  "0x2", "NOR";
+		default = <0x1>;
+		status = "okay";
+	};
+};
diff --git a/include/fdtdec.h b/include/fdtdec.h
index f70fa2f..b92e584 100644
--- a/include/fdtdec.h
+++ b/include/fdtdec.h
@@ -125,6 +125,7 @@ enum fdt_compat_id {
 	COMPAT_MVEBU_UART,
 	COMPAT_MVEBU_TCLOCK,
 	COMPAT_MVEBU_I2C,
+	COMPAT_MVEBU_SAR,
 
 	COMPAT_COUNT,
 };
diff --git a/lib/fdtdec.c b/lib/fdtdec.c
index f8d01b0..1ff117b 100644
--- a/lib/fdtdec.c
+++ b/lib/fdtdec.c
@@ -87,6 +87,7 @@ static const char * const compat_names[COMPAT_COUNT] = {
 	COMPAT(MVEBU_UART, "marvell,armadalp-uart"),
 	COMPAT(MVEBU_TCLOCK, "marvell,tclk"),
 	COMPAT(MVEBU_I2C, "marvell,mvebu-i2c"),
+	COMPAT(MVEBU_SAR, "marvell,sample-at-reset"),
 };
 
 const char *fdtdec_get_compatible(enum fdt_compat_id id)
-- 
1.9.1

