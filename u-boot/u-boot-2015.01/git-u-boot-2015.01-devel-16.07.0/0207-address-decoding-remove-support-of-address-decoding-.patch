From 1eb3098efd5af85b90f4f07610e3b0849c094a64 Mon Sep 17 00:00:00 2001
From: Hanna Hawa <hannah@marvell.com>
Date: Sun, 21 Jun 2015 11:26:48 +0300
Subject: [PATCH 0207/1240] address decoding: remove support of address
 decoding, preparing for new driver

- This patch remove support of address decoding, to prepare for adding new
  drivers
- This patch may break compilation/load of the u-boot

Change-Id: Ic8e934577e3b85c6ea8b4be40a98f612321ac2a4
Signed-off-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/20307
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
---
 arch/arm/cpu/armv7/armada38x/tables.c  |  13 --
 arch/arm/cpu/armv7/armadalp/tables.c   |  11 --
 arch/arm/cpu/armv8/armada8k/tables.c   |  15 --
 arch/arm/cpu/mvebu-common/Makefile     |   5 -
 arch/arm/cpu/mvebu-common/adec_ccu.c   | 247 ---------------------------------
 arch/arm/cpu/mvebu-common/adec_mbus.c  | 217 -----------------------------
 arch/arm/cpu/mvebu-common/soc-init.c   |   2 -
 arch/arm/include/asm/arch-mvebu/adec.h |  40 ------
 arch/arm/include/asm/arch-mvebu/soc.h  |   3 -
 common/mvebu/cmd_misc.c                |   3 +-
 10 files changed, 1 insertion(+), 555 deletions(-)
 delete mode 100644 arch/arm/cpu/mvebu-common/adec_ccu.c
 delete mode 100644 arch/arm/cpu/mvebu-common/adec_mbus.c
 delete mode 100644 arch/arm/include/asm/arch-mvebu/adec.h

diff --git a/arch/arm/cpu/armv7/armada38x/tables.c b/arch/arm/cpu/armv7/armada38x/tables.c
index a460e2c..2d1b734 100644
--- a/arch/arm/cpu/armv7/armada38x/tables.c
+++ b/arch/arm/cpu/armv7/armada38x/tables.c
@@ -20,19 +20,9 @@
 #include <common.h>
 #include <asm/io.h>
 #include <asm/arch/regs-base.h>
-#include <asm/arch-mvebu/adec.h>
 #include <asm/arch-mvebu/unit-info.h>
 #include <asm/arch-mvebu/soc.h>
 
-struct adec_win memory_map[] = {
-	{PEX_0_TARGET_ID,	MVEBU_PCIE_MEM_BASE(0),	MVEBU_PCIE_MEM_SIZE(0), PCI_0_MEM_ATTR, 1, 1},
-	{PEX_1_3_TARGET_ID,	MVEBU_PCIE_MEM_BASE(1),	MVEBU_PCIE_MEM_SIZE(1), PCI_1_MEM_ATTR, 1, 1},
-	{PEX_1_3_TARGET_ID,	MVEBU_PCIE_MEM_BASE(2),	MVEBU_PCIE_MEM_SIZE(2), PCI_2_MEM_ATTR, 1, 1},
-	{PEX_1_3_TARGET_ID,	MVEBU_PCIE_MEM_BASE(3),	MVEBU_PCIE_MEM_SIZE(3), PCI_3_MEM_ATTR, 1, 1},
-	{DEV_TARGET_ID,		NOR_CS_BASE,		NOR_CS_SIZE,	 BOOT_CS_ATTR,   0, 1},
-	{TBL_TERM, TBL_TERM, TBL_TERM, TBL_TERM, TBL_TERM, TBL_TERM},
-};
-
 /* List the maximum amount of units for all devices and boards */
 u16 base_unit_mask_table[MAX_UNIT_ID] = {
 	[PCIE_UNIT_ID]		=  cnt_to_mask(4),
@@ -64,21 +54,18 @@ struct mvebu_soc_info a38x_soc_info[] = {
 		.name = "MV-6280",
 		.id = 0x6820,
 		.unit_disable = armada6280_unit_disable,
-		.memory_map = memory_map
 	},
 	/* Armda 385 */
 	{
 		.name = "MV-6285",
 		.id = 0x6825,
 		.unit_disable = armada6285_unit_disable,
-		.memory_map = memory_map
 	},
 	/* Armda 388 */
 	{
 		.name = "MV-6288",
 		.id = 0x6828,
 		.unit_disable = armada6280_unit_disable,
-		.memory_map = memory_map
 	},
 	/* Delimiter */
 	{.id = 0}
diff --git a/arch/arm/cpu/armv7/armadalp/tables.c b/arch/arm/cpu/armv7/armadalp/tables.c
index bdef3bf..71f3ed7 100644
--- a/arch/arm/cpu/armv7/armadalp/tables.c
+++ b/arch/arm/cpu/armv7/armadalp/tables.c
@@ -19,18 +19,9 @@
 #include <common.h>
 #include <asm/io.h>
 #include <asm/arch/regs-base.h>
-#include <asm/arch-mvebu/adec.h>
 #include <asm/arch-mvebu/unit-info.h>
 #include <asm/arch-mvebu/soc.h>
 
-struct adec_win memory_map[] = {
-#ifndef CONFIG_PALLADIUM
-	{PEX_0_TARGET_ID,	MVEBU_PCIE_MEM_BASE(0),	MVEBU_PCIE_MEM_SIZE(0), PCI_0_MEM_ATTR, 1, 1},
-	{DEV_TARGET_ID,		NOR_CS_BASE,		NOR_CS_SIZE,	 BOOT_CS_ATTR,   0, 1},
-#endif
-	{TBL_TERM, TBL_TERM, TBL_TERM, TBL_TERM, TBL_TERM, TBL_TERM},
-};
-
 /* List the maximum amount of units for all devices and boards */
 u16 base_unit_mask_table[MAX_UNIT_ID] = {
 	/* the following entries are temporary examples only -  referenced from A38x */
@@ -62,14 +53,12 @@ struct mvebu_soc_info armadalp_soc_info[] = {
 		.name = "MV-ARMADALP_A", /* temp SOC name and SOC ID */
 		.id = 0x9991,
 		.unit_disable = armadalp_A_unit_disable,
-		.memory_map = memory_map
 	},
 	/* Armada LP B */
 	{
 		.name = "MV-ARMADALP_B", /* temp SOC name and SOC ID */
 		.id = 0x9992,
 		.unit_disable = armadalp_B_unit_disable,
-		.memory_map = memory_map
 	},
 	/* Delimiter */
 	{.id = 0}
diff --git a/arch/arm/cpu/armv8/armada8k/tables.c b/arch/arm/cpu/armv8/armada8k/tables.c
index 8e20bc7..8e14bf4 100644
--- a/arch/arm/cpu/armv8/armada8k/tables.c
+++ b/arch/arm/cpu/armv8/armada8k/tables.c
@@ -19,22 +19,9 @@
 
 #include <common.h>
 #include <asm/io.h>
-#include <asm/arch-mvebu/adec.h>
 #include <asm/arch-mvebu/unit-info.h>
 #include <asm/arch-mvebu/soc.h>
 
-struct adec_win memory_map[] = {
-#ifndef CONFIG_PALLADIUM
-	{DRAM_0_TID,	DRAM_0_BASE_ADDR,	DRAM_0_SIZE,	ADEC_AP_WIN,	1},
-	{IO_0_TID,	IO_0_BASE_ADDR,		IO_0_SIZE,	ADEC_AP_WIN,	1},
-	{PEX0_TID,	PEX_BASE_ADDR(0),	PEX_SIZE(0),	ADEC_IOB_WIN,	1},
-	{PEX1_TID,	PEX_BASE_ADDR(1),	PEX_SIZE(1),	ADEC_IOB_WIN,	1},
-	{NSS_TID,	NSS_BASE_ADDR,		NSS_SIZE,	ADEC_IOB_WIN,	1},
-#endif
-	/* Delimiter */
-	{INVALID_TID,	0x0,			0x0,		0x0,		0},
-};
-
 /* List the maximum amount of units for all devices and boards */
 u16 base_unit_mask_table[MAX_UNIT_ID] = {
 	[PCIE_UNIT_ID]		=  cnt_to_mask(3),
@@ -67,14 +54,12 @@ struct mvebu_soc_info a8k_soc_info[] = {
 		.name = "MV-8021",
 		.id = 8021,
 		.unit_disable = armada8021_unit_disable,
-		.memory_map = memory_map
 	},
 	/* Armda 8022 */
 	{
 		.name = "MV-8022",
 		.id = 8022,
 		.unit_disable = armada8022_unit_disable,
-		.memory_map = memory_map
 	},
 	/* Delimiter */
 	{.id = 0}
diff --git a/arch/arm/cpu/mvebu-common/Makefile b/arch/arm/cpu/mvebu-common/Makefile
index bd18a6b..7449646 100644
--- a/arch/arm/cpu/mvebu-common/Makefile
+++ b/arch/arm/cpu/mvebu-common/Makefile
@@ -27,8 +27,3 @@ obj-$(CONFIG_MVEBU_TIMER) += timer_mvebu.o
 obj-$(CONFIG_GENERIC_TIMER) += generic_timer.o
 obj-$(CONFIG_MVEBU_CA9) += platform.o
 obj-$(CONFIG_SPL_BUILD) += spl.o
-ifeq "$(CONFIG_MVEBU_CA9)"  "y"
-obj-$(CONFIG_ADEC) += adec_mbus.o
-else
-obj-$(CONFIG_ADEC) += adec_ccu.o
-endif
diff --git a/arch/arm/cpu/mvebu-common/adec_ccu.c b/arch/arm/cpu/mvebu-common/adec_ccu.c
deleted file mode 100644
index 3d2daad..0000000
--- a/arch/arm/cpu/mvebu-common/adec_ccu.c
+++ /dev/null
@@ -1,247 +0,0 @@
-/*
- * ***************************************************************************
- * Copyright (C) Marvell International Ltd. and its affiliates
- * ***************************************************************************
- * Marvell GPL License Option
- * If you received this File from Marvell, you may opt to use, redistribute
- * and/or modify this File in accordance with the terms and conditions of the
- * General Public License Version 2, June 1991 (the "GPL License"), a copy of
- * which is available along with the File in the license.txt file or by writing
- * to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- * MA 02111-1307 or on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
- *
- * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE
- * EXPRESSLY DISCLAIMED. The GPL License provides additional details about this
- * warranty disclaimer.
- * ***************************************************************************
- */
-
-/* #define DEBUG */
-/* #define DEBUG_REG */
-
-#include <common.h>
-#include <asm/system.h>
-#include <asm/io.h>
-#include <asm/arch-mvebu/mvebu.h>
-#include <asm/arch-mvebu/adec.h>
-
-DECLARE_GLOBAL_DATA_PTR;
-
-static void adec_win_check(struct adec_win *win, u32 win_num)
-{
-	/* check if address is aligned to the size */
-	if (IS_NOT_ALIGN(win->base_addr, win->win_size)) {
-		win->base_addr = ALIGN_UP(win->base_addr, win->win_size);
-		error("Window %d: base address unaligned to window size\n", win_num);
-		printf("Align up the base address to 0x%lx\n", win->base_addr);
-	}
-	/* size parameter validity check */
-	if (IS_NOT_ALIGN(win->win_size, CR_WIN_SIZE_ALIGNMENT)) {
-		win->win_size = ALIGN_UP(win->win_size, CR_WIN_SIZE_ALIGNMENT);
-		error("Window %d: window size unaligned to 0x%x\n", win_num, CR_WIN_SIZE_ALIGNMENT);
-		printf("Aligning size to 0x%lx\n", win->win_size);
-	}
-}
-
-static void adec_enable_rfu_win(struct adec_win *win, u32 win_id)
-{
-	u32 alr, ahr;
-	uintptr_t end_addr;
-
-	end_addr = (win->base_addr + win->win_size - 1);
-	alr = (u32)((win->base_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
-	alr |= WIN_ENABLE_BIT;
-	writel(alr, RFU_WIN_ALR_OFFSET(win_id));
-
-	/* there's no ahr for bootrom window */
-	if (win_id == BOOTROM_RFU_WINDOW_NUM)
-		return;
-
-	ahr = (u32)((end_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
-	writel(ahr, RFU_WIN_AHR_OFFSET(win_id));
-}
-
-static void adec_enable_iob_win(struct adec_win *win, u32 win_id)
-{
-	u32 iob_win_reg;
-	u32 alr, ahr;
-	uintptr_t end_addr;
-
-	iob_win_reg = WIN_ENABLE_BIT;
-	iob_win_reg |= (win->target_id & IOB_TARGET_ID_MASK) << IOB_TARGET_ID_OFFSET;
-	writel(iob_win_reg, IOB_WIN_CR_OFFSET(win_id));
-
-	end_addr = (win->base_addr + win->win_size - 1);
-	alr = (u32)((win->base_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
-	ahr = (u32)((end_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
-
-	writel(alr, IOB_WIN_ALR_OFFSET(win_id));
-	writel(ahr, IOB_WIN_AHR_OFFSET(win_id));
-}
-
-static void adec_enable_ap_win(struct adec_win *win, u32 win_id)
-{
-	u32 ap_win_reg;
-	u32 alr, ahr;
-	uintptr_t end_addr;
-
-	ap_win_reg = WIN_ENABLE_BIT;
-	ap_win_reg |= (win->target_id & AP_TARGET_ID_MASK) << AP_TARGET_ID_OFFSET;
-	writel(ap_win_reg, AP_WIN_CR_OFFSET(win_id));
-
-	end_addr = (win->base_addr + win->win_size - 1);
-	alr = (u32)((win->base_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
-	ahr = (u32)((end_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
-
-	writel(alr, AP_WIN_ALR_OFFSET(win_id));
-	writel(ahr, AP_WIN_AHR_OFFSET(win_id));
-}
-
-int adec_remap(phys_addr_t input, phys_addr_t output)
-{
-	return 0;
-}
-
-void adec_dump(void)
-{
-	u32 win_id;
-	u32 win_cr;
-	u32 alr, ahr;
-	u8 target_id;
-	uintptr_t start, end;
-
-	/* Dump all AP windows */
-	printf("id target  start              end\n");
-	printf("----------------------------------------------\n");
-	for (win_id = 0; win_id < MAX_AP_WINDOWS; win_id++) {
-		win_cr = readl(AP_WIN_CR_OFFSET(win_id));
-		if (win_cr & WIN_ENABLE_BIT) {
-			target_id = (win_cr >> AP_TARGET_ID_OFFSET) & AP_TARGET_ID_MASK;
-			alr = readl(AP_WIN_ALR_OFFSET(win_id));
-			ahr = readl(AP_WIN_AHR_OFFSET(win_id));
-			start = (uintptr_t)(alr << ADDRESS_SHIFT);
-			end = (uintptr_t)((ahr + 0x10) << ADDRESS_SHIFT);
-			printf("%02d %02d      0x%016lx 0x%016lx\n", win_id, target_id, start, end);
-		}
-	}
-	/* Dump all RFU windows */
-	for (win_id = 0; win_id < MAX_RFU_WINDOWS; win_id++) {
-		alr = readl(RFU_WIN_ALR_OFFSET(win_id));
-		if (alr & WIN_ENABLE_BIT) {
-			alr = readl(RFU_WIN_ALR_OFFSET(win_id));
-			ahr = readl(RFU_WIN_AHR_OFFSET(win_id));
-			start = (uintptr_t)(alr << ADDRESS_SHIFT);
-			end = (uintptr_t)((ahr + 0x10) << ADDRESS_SHIFT);
-			printf("%02d         0x%016lx 0x%016lx\n", win_id, start, end);
-		}
-	}
-	/* Dump all IOB windows */
-	for (win_id = 0; win_id < MAX_IOB_WINDOWS; win_id++) {
-		win_cr = readl(IOB_WIN_CR_OFFSET(win_id));
-		if (win_cr & WIN_ENABLE_BIT) {
-			target_id = (win_cr >> IOB_TARGET_ID_OFFSET) & IOB_TARGET_ID_MASK;
-			alr = readl(IOB_WIN_ALR_OFFSET(win_id));
-			ahr = readl(IOB_WIN_AHR_OFFSET(win_id));
-			start = (uintptr_t)(alr << ADDRESS_SHIFT);
-			end = (uintptr_t)((ahr + 0x10) << ADDRESS_SHIFT);
-			printf("%02d %02d      0x%016lx 0x%016lx\n", win_id, target_id, start, end);
-		}
-	}
-	printf("\nnote: unmapped addresses will go to GCR\n");
-	return;
-}
-
-int adec_init(struct adec_win *windows)
-{
-	u32 win_id;
-	u32 win_reg, target_id;
-
-	debug("Initializing CCU Address decoding\n");
-
-	/* disable all RFU windows */
-	for (win_id = 0; win_id < MAX_RFU_WINDOWS; win_id++) {
-		win_reg = readl(RFU_WIN_ALR_OFFSET(win_id));
-		win_reg &= ~WIN_ENABLE_BIT;
-		writel(win_reg, RFU_WIN_ALR_OFFSET(win_id));
-	}
-
-	/* disable all AP windows */
-	for (win_id = 0; win_id < MAX_AP_WINDOWS; win_id++) {
-		win_reg = readl(AP_WIN_CR_OFFSET(win_id));
-		target_id = (win_reg >> AP_TARGET_ID_OFFSET) & AP_TARGET_ID_MASK;
-		/* disable all the windows except DRAM and CFG_SPACE windows */
-		if (target_id == DRAM_0_TID || target_id == DRAM_1_TID || target_id == CFG_REG_TID)
-			continue;
-		win_reg &= ~WIN_ENABLE_BIT;
-		writel(win_reg, AP_WIN_CR_OFFSET(win_id));
-
-		win_reg = ~AP_WIN_ENA_READ_SECURE;
-		win_reg |= ~AP_WIN_ENA_WRITE_SECURE;
-		writel(win_reg, AP_WIN_SCR_OFFSET(win_id));
-	}
-
-	/* disable all IOB windows, start from win_id = 1 because can't disable internal register window */
-	for (win_id = 1; win_id < MAX_IOB_WINDOWS; win_id++) {
-		win_reg = readl(IOB_WIN_CR_OFFSET(win_id));
-		win_reg &= ~WIN_ENABLE_BIT;
-		writel(win_reg, IOB_WIN_CR_OFFSET(win_id));
-
-		win_reg = ~IOB_WIN_ENA_CTRL_WRITE_SECURE;
-		win_reg |= ~IOB_WIN_ENA_CTRL_READ_SECURE;
-		win_reg |= ~IOB_WIN_ENA_WRITE_SECURE;
-		win_reg |= ~IOB_WIN_ENA_READ_SECURE;
-		writel(win_reg, IOB_WIN_SCR_OFFSET(win_id));
-	}
-
-	for (win_id = 0; windows[win_id].target_id != INVALID_TID; win_id++) {
-		if (windows[win_id].enabled) {
-			adec_win_check(&windows[win_id], win_id);
-			switch (windows[win_id].win_type) {
-			case ADEC_IOB_WIN:
-				adec_enable_iob_win(&windows[win_id], win_id);
-				break;
-			case ADEC_AP_WIN:
-				adec_enable_ap_win(&windows[win_id], win_id);
-				break;
-			case ADEC_RFU_WIN:
-				adec_enable_rfu_win(&windows[win_id], win_id);
-				break;
-			default:
-				error("Window %d: Bad window type %d\n", win_id, windows[win_id].win_type);
-			}
-		}
-	}
-
-	debug("Done CCU Address decoding Initializing\n");
-
-	return 0;
-}
-
-int dram_init(void)
-{
-#ifdef CONFIG_PALLADIUM
-	gd->ram_size = 0x20000000;
-#else
-	u32 alr, ahr;
-	u32 target_id, ctrl;
-	u32 win;
-
-	for (win = 0; win < MAX_AP_WINDOWS; win++) {
-		ctrl = readl(AP_WIN_CR_OFFSET(win));
-		target_id = (ctrl >> AP_TARGET_ID_OFFSET) & AP_TARGET_ID_MASK;
-
-		if (target_id == DRAM_0_TID) {
-			alr = readl(AP_WIN_ALR_OFFSET(win)) << ADDRESS_SHIFT;
-			ahr = readl(AP_WIN_AHR_OFFSET(win)) << ADDRESS_SHIFT;
-			gd->ram_size = ahr - alr + 1;
-			gd->bd->bi_dram[0].size = gd->ram_size;
-			gd->bd->bi_dram[0].start = alr;
-
-			debug("DRAM base 0x%08x size 0x%x\n", alr, (uint)gd->ram_size);
-		}
-	}
-#endif
-
-	return 0;
-}
diff --git a/arch/arm/cpu/mvebu-common/adec_mbus.c b/arch/arm/cpu/mvebu-common/adec_mbus.c
deleted file mode 100644
index 4aa5134..0000000
--- a/arch/arm/cpu/mvebu-common/adec_mbus.c
+++ /dev/null
@@ -1,217 +0,0 @@
-/*
- * ***************************************************************************
- * Copyright (C) Marvell International Ltd. and its affiliates
- * ***************************************************************************
- * Marvell GPL License Option
- * If you received this File from Marvell, you may opt to use, redistribute
- * and/or modify this File in accordance with the terms and conditions of the
- * General Public License Version 2, June 1991 (the "GPL License"), a copy of
- * which is available along with the File in the license.txt file or by writing
- * to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- * MA 02111-1307 or on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
- *
- * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE
- * EXPRESSLY DISCLAIMED. The GPL License provides additional details about this
- * warranty disclaimer.
- * ***************************************************************************
- */
-
-/* #define DEBUG */
-/* #define DEBUG_REG */
-
-#include <common.h>
-#include <asm/system.h>
-#include <asm/io.h>
-#include <asm/arch/regs-base.h>
-#include <asm/arch/soc-info.h>
-#include <asm/arch-mvebu/mvebu.h>
-#include <asm/arch-mvebu/adec.h>
-
-void __iomem *mbus_adec_base;
-
-DECLARE_GLOBAL_DATA_PTR;
-
-static void adec_win_check(struct adec_win *win, u32 win_num)
-{
-	/* check if address is aligned to the size */
-	if (IS_NOT_ALIGN(win->base_addr, win->win_size)) {
-		win->base_addr = ALIGN_UP(win->base_addr, win->win_size);
-		error("Window %d: base address unaligned to size\n", win_num);
-		printf("Align up base address to 0x%lx\n", win->base_addr);
-	}
-	/* size parameter validity check */
-	if (IS_NOT_ALIGN(win->win_size, MBUS_CR_WIN_SIZE_ALIGNMENT)) {
-		win->win_size = ALIGN_UP(win->win_size, MBUS_CR_WIN_SIZE_ALIGNMENT);
-		error("Window %d: window size unaligned to 0x%x\n", win_num, MBUS_CR_WIN_SIZE_ALIGNMENT);
-		printf("Align up the size to 0x%lx\n", win->win_size);
-	}
-}
-
-static void adec_win_set(struct adec_win *win, u32 win_num)
-{
-	u32 base_reg, ctrl_reg, size_to_reg, remap_low;
-
-	base_reg = (win->base_addr & MBUS_BR_BASE_MASK);
-	size_to_reg = (win->win_size / MBUS_CR_WIN_SIZE_ALIGNMENT) - 1;
-
-	ctrl_reg = (size_to_reg << MBUS_CR_WIN_SIZE_OFFS);
-	ctrl_reg |= MBUS_CR_WIN_ENABLE;
-	ctrl_reg |= win->attribute << MBUS_CR_WIN_ATTR_OFFS;
-	ctrl_reg |= win->target << MBUS_CR_WIN_TARGET_OFFS;
-
-	writel(ctrl_reg, mbus_adec_base + MBUS_WIN_CTRL_REG(win_num));
-	writel(base_reg, mbus_adec_base + MBUS_WIN_BASE_REG(win_num));
-
-	if (win->remapped) {
-		remap_low = win->base_addr & MBUS_RLR_REMAP_LOW_MASK;
-		writel(remap_low, mbus_adec_base + MBUS_WIN_REMAP_LOW_REG(win_num));
-		writel(0x0, mbus_adec_base + MBUS_WIN_REMAP_HIGH_REG(win_num));
-	}
-	return;
-}
-
-void adec_dump(void)
-{
-	int win_id;
-	u32 mbus_win_cr, mbus_win_br;
-	u32 target_id, size, attribute;
-
-	printf("id    target    start       end         attribute\n");
-	printf("-------------------------------------------------\n");
-
-	/* Dump all AP windows */
-	for (win_id = 0; win_id < MAX_MBUS_WINS; win_id++) {
-		mbus_win_cr = readl(mbus_adec_base + MBUS_WIN_CTRL_REG(win_id));
-		if (mbus_win_cr & MBUS_CR_WIN_ENABLE) {
-			target_id = (mbus_win_cr & MBUS_CR_WIN_TARGET_MASK) >> MBUS_CR_WIN_TARGET_OFFS;
-			attribute = (mbus_win_cr & MBUS_CR_WIN_ATTR_MASK) >> MBUS_CR_WIN_ATTR_OFFS;
-			size = (mbus_win_cr & MBUS_CR_WIN_SIZE_MASK) >> MBUS_CR_WIN_SIZE_OFFS;
-			mbus_win_br = readl(mbus_adec_base + MBUS_WIN_BASE_REG(win_id));
-			size = (size + 1) * MBUS_CR_WIN_SIZE_ALIGNMENT;
-			printf("%02d    0x%02x      0x%08x  0x%08x  0x%02x\n",
-			       win_id, target_id, mbus_win_br, mbus_win_br + size, attribute);
-		}
-	}
-	mbus_win_br = readl(mbus_adec_base + MBUS_WIN_INTEREG_REG);
-	printf("%02d    0x%02x      0x%08x  0x%08x  0x%02x\n",
-	       INTERNAL_REG_WIN_NUM, INVALID_TARGET_ID, mbus_win_br, mbus_win_br + MVEBU_REGS_SIZE, 0xFF);
-
-	return;
-}
-
-int adec_remap(phys_addr_t input, phys_addr_t output)
-{
-	int win;
-	u32 ctrl, base;
-
-	for (win = 0; win < MAX_MBUS_WINS; win++) {
-		ctrl = readl(mbus_adec_base + MBUS_WIN_CTRL_REG(win));
-		base = readl(mbus_adec_base + MBUS_WIN_BASE_REG(win));
-
-		if ((ctrl & MBUS_CR_WIN_ENABLE) && (base == input)) {
-			if (win >= MAX_MBUS_REMAP_WINS) {
-				printf("Window %d with base addres 0x%08x is not remapable\n",
-				       win, (uint)base);
-				return 1;
-			}
-			writel(output & MBUS_RLR_REMAP_LOW_MASK, mbus_adec_base + MBUS_WIN_REMAP_LOW_REG(win));
-			writel(0x0, mbus_adec_base + MBUS_WIN_REMAP_HIGH_REG(win));
-			return 0;
-		}
-	}
-
-	printf("Couldn't find XBAR window with base address 0x%08x\n", (uint)input);
-	return 0;
-}
-
-int adec_init(struct adec_win *windows)
-{
-	u32 win_id, index, mbus_win;
-
-	debug("Initializing MBUS address decoding\n");
-	mbus_adec_base = (void *)MVEBU_ADEC_BASE;
-
-	/* disable all windows */
-	for (win_id = 0; win_id < MAX_MBUS_WINS; win_id++) {
-		mbus_win = readl(mbus_adec_base + MBUS_WIN_CTRL_REG(win_id));
-		mbus_win &= ~MBUS_CR_WIN_ENABLE;
-		writel(mbus_win, mbus_adec_base + MBUS_WIN_CTRL_REG(win_id));
-	}
-
-	/* enable the remapped windows first, the remap windows is at the first 8 windows */
-	for (index = 0, win_id = 0; windows[index].enabled != TBL_TERM; index++) {
-		if ((windows[index].win_size == 0) ||
-		    (windows[index].enabled == 0) ||
-		    (windows[index].remapped == 0))
-			continue;
-
-		adec_win_check(&windows[index], win_id);
-		debug("set window %d: target %d, base = 0x%lx, size = 0x%lx, attribute = 0x%x, remapped\n",
-		      win_id, windows[index].target, windows[index].base_addr,
-			windows[index].win_size, windows[index].attribute);
-
-		adec_win_set(&windows[index], win_id);
-		win_id++;
-	}
-	/* enable the rest of the windows */
-	for (index = 0; windows[index].enabled != TBL_TERM; index++) {
-		if ((windows[index].win_size == 0) ||
-		    (windows[index].enabled == 0) ||
-		    (windows[index].remapped))
-			continue;
-
-		adec_win_check(&windows[index], win_id);
-		debug("set window %d: target = %d, base = 0x%lx, size = 0x%lx, attribute = 0x%x\n",
-		      win_id, windows[index].target, windows[index].base_addr,
-		      windows[index].win_size, windows[index].attribute);
-
-		adec_win_set(&windows[index], win_id);
-		win_id++;
-	}
-
-	debug("Done MBUS address decoding initializing\n");
-
-	return 0;
-}
-
-int dram_init(void)
-{
-#ifdef CONFIG_PALLADIUM
-	/* NO DRAM init sequence in Pallaidum, so set static DRAM size of 256MB */
-	gd->bd->bi_dram[0].start = 0;
-	gd->bd->bi_dram[0].size = 0x10000000;
-	gd->ram_size = gd->bd->bi_dram[0].size;
-#else
-	int cs;
-	u32 ctrl, size, base;
-
-	gd->ram_size = 0;
-	/*
-	* We assume the DDR training code has configured
-	* The SDRAM adec windows so we pull our info from there
-	*/
-
-	for (cs = 0; cs < CONFIG_NR_DRAM_BANKS; cs++) {
-		ctrl = readl(MBUS_SDRAM_CTRL_REG(cs));
-		if (ctrl & MBUS_CR_WIN_ENABLE) {
-			base = readl(MBUS_SDRAM_BASE_REG(cs));
-			size = (ctrl & MBUS_SDRAM_SIZE_MASK) + MBUS_SDRAM_SIZE_ALIGN;
-			gd->bd->bi_dram[cs].start = base;
-			gd->bd->bi_dram[cs].size = size;
-
-			gd->ram_size += size;
-
-			debug("DRAM bank %d base 0x%08x size 0x%x\n", cs, base, size);
-		}
-	}
-
-	if (gd->ram_size == 0) {
-		error("No DRAM banks detected");
-		return 1;
-	}
-#endif
-
-	return 0;
-}
-
diff --git a/arch/arm/cpu/mvebu-common/soc-init.c b/arch/arm/cpu/mvebu-common/soc-init.c
index b9d1a42..7b54d80 100644
--- a/arch/arm/cpu/mvebu-common/soc-init.c
+++ b/arch/arm/cpu/mvebu-common/soc-init.c
@@ -24,7 +24,6 @@
 #include <asm/bitops.h>
 #include <asm/arch-mvebu/mvebu.h>
 #include <asm/arch-mvebu/unit-info.h>
-#include <asm/arch-mvebu/adec.h>
 #include <asm/arch-mvebu/soc.h>
 #include <asm/arch-mvebu/tables.h>
 
@@ -92,7 +91,6 @@ int mvebu_soc_init()
 
 #ifndef CONFIG_PALLADIUM
 	/* Initialize physical memory map */
-	adec_init(soc->memory_map);
 #endif
 
 	/* Soc specific init */
diff --git a/arch/arm/include/asm/arch-mvebu/adec.h b/arch/arm/include/asm/arch-mvebu/adec.h
deleted file mode 100644
index c8bc811..0000000
--- a/arch/arm/include/asm/arch-mvebu/adec.h
+++ /dev/null
@@ -1,40 +0,0 @@
-/*
- * ***************************************************************************
- * Copyright (C) Marvell International Ltd. and its affiliates
- * ***************************************************************************
- * Marvell GPL License Option
- * If you received this File from Marvell, you may opt to use, redistribute
- * and/or modify this File in accordance with the terms and conditions of the
- * General Public License Version 2, June 1991 (the "GPL License"), a copy of
- * which is available along with the File in the license.txt file or by writing
- * to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- * MA 02111-1307 or on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
- *
- * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE
- * EXPRESSLY DISCLAIMED. The GPL License provides additional details about this
- * warranty disclaimer.
- * ***************************************************************************
- */
-
-#ifndef _ADEC_H_
-#define _ADEC_H_
-
-#ifdef CONFIG_MVEBU_CA9
-#include <asm/arch-mvebu/adec_mbus.h>
-#else
-#include <asm/arch-mvebu/adec_ccu.h>
-#endif
-
-/* Macro for testing alignment. Positive if number is NOT aligned */
-#define IS_NOT_ALIGN(number, align)	((number) & ((align) - 1))
-
-/* Macro for alignment up. For example, ALIGN_UP(0x0330, 0x20) = 0x0340 */
-#define ALIGN_UP(number, align) (((number) & ((align) - 1)) ? \
-		(((number) + (align)) & ~((align)-1)) : (number))
-
-void adec_dump(void);
-int adec_init(struct adec_win *windows);
-int adec_remap(phys_addr_t input, phys_addr_t output);
-
-#endif /* _ADEC_H_ */
diff --git a/arch/arm/include/asm/arch-mvebu/soc.h b/arch/arm/include/asm/arch-mvebu/soc.h
index da7dbe7..06865d4 100644
--- a/arch/arm/include/asm/arch-mvebu/soc.h
+++ b/arch/arm/include/asm/arch-mvebu/soc.h
@@ -21,7 +21,6 @@
 #define _SOC_H_
 
 #include <asm/arch-mvebu/unit-info.h>
-#include <asm/arch-mvebu/adec.h>
 #include <asm/arch/soc-info.h>
 
 #define MAX_SOC_NAME	32
@@ -32,7 +31,6 @@ struct mvebu_soc_info {
 	char	name[MAX_SOC_NAME];
 	int	id;
 	u16	*unit_disable;
-	struct adec_win *memory_map;
 };
 
 struct mvebu_soc_family {
@@ -48,7 +46,6 @@ struct mvebu_soc_family {
 	u32 mpp_mask[MAX_MPP_REGS];
 };
 
-
 int common_soc_init(struct mvebu_soc_family *soc_family_info);
 
 /* API required from all SOCs */
diff --git a/common/mvebu/cmd_misc.c b/common/mvebu/cmd_misc.c
index a3d274f..8de5c85 100644
--- a/common/mvebu/cmd_misc.c
+++ b/common/mvebu/cmd_misc.c
@@ -23,13 +23,11 @@
 #include <cli.h>
 
 #include <asm/io.h>
-#include <asm/arch-mvebu/adec.h>
 #include <asm/arch-mvebu/unit-info.h>
 
 int do_map_cmd(cmd_tbl_t *cmdtp, int flag, int argc,
 			char * const argv[])
 {
-	adec_dump();
 	return 0;
 }
 
@@ -58,6 +56,7 @@ int do_remap_cmd(cmd_tbl_t *cmdtp, int flag, int argc,
 		printf("Error: Failed to remap 0x%08x->0x%08x\n", (uint)input, (uint)output);
 		return 1;
 	}
+#endif
 
 	printf("Remapped address 0x%08x t0 0x%08x\n", (uint)input, (uint)output);
 	return 0;
-- 
1.9.1

