From b2e147d783de2a493e56ff7bb753c4863c21f57b Mon Sep 17 00:00:00 2001
From: Yehuda Yitschak <yehuday@marvell.com>
Date: Mon, 6 Jul 2015 10:15:38 +0300
Subject: [PATCH 0237/1240] bin2phex: removed dependency on compiler

Change-Id: I088f1ec5bdf9f1e1ffd340881e78d24edf053bb9
Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/21066
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Kostya Porotchkin <kostap@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 scripts/bin2phex.pl | 65 ++++++++++++++++++++---------------------------------
 1 file changed, 24 insertions(+), 41 deletions(-)

diff --git a/scripts/bin2phex.pl b/scripts/bin2phex.pl
index 18c52f6..cc56cb2 100755
--- a/scripts/bin2phex.pl
+++ b/scripts/bin2phex.pl
@@ -4,60 +4,53 @@ sub bin2hex
 {
 	my ($in_file, $out_file, $base_addr, $width) = @_;
 
-	# Generate a HEX dump from the binary using GCC
-	system ("\${CROSS_COMPILE}objcopy -O verilog -I binary $in_file /tmp/image.tmp");
-
 	# Convert base address to 16 byte resolution
 	my $addr = sprintf("%d", hex($base_addr));
 	$addr = $addr / $width;
 
-	unless(open $src, "</tmp/image.tmp")
+	unless(open ($src, "<$in_file"))
 	{
 		print ("Failed to open input file $in_file\n");
 		goto ERROR;
 	}
+	binmode($src);
+
 	unless(open $dst, ">$out_file")
 	{
 		print ("Failed to open output file $out_file\n");
 		goto ERROR;
 	}
 
-	# Move away the first line which containes an address
-	my $tmp = <$src>;
-
-	# Add address to each line
-	foreach my $line (<$src>)
+	my @bin;
+	while (<$src>)
 	{
+		my @bytes = split /..\K/, unpack "H*", $_;
+		push(@bin, @bytes);
+	}
 
-		# Remove spaces line endings and ^M
-		$line =~ s/\r//;
-		$line =~ s/ //g;
-		chomp($line);
-
-		my $loops = 16 / $width;
-		my $byte = 0;
-
-		while ($byte < $loops) {
-			# Create address line
-			my $addr_str = sprintf("@%07x",$addr);
-			print $dst "$addr_str\n";
-
-			my $bytes = substr($line, (2 * $byte), (2 * $width));
-			print $dst reverse split /(..)/, $bytes;
-			print $dst "\n";
-
-			$addr++;
-			$byte += $width;
+	my $size = scalar(@bin);
+	my $idx = 0;
+	while ($size > 0) {
+		# Print address line
+		my $addr_str = sprintf("@%07x",$addr);
+		print $dst "$addr_str\n";
+
+		$byte = 0;
+		while ($byte < $width) {
+			print $dst @bin[$idx + ($width - 1) - $byte];
+			$byte++;
 		}
+
+		print $dst "\n";
+		$addr++;
+		$idx += $width;
+		$size -= $width;
 	}
 
 	close($dst);
 	close($src);
 
-	`rm -rf /tmp/image.tmp`;
-
 	return 0;
-
 ERROR:
 	return 1;
 }
@@ -74,9 +67,6 @@ sub usage
 	print "\t-w\tByte width of output file upto 16.\n";
 	print "\t  \tMust be power of 2 (1,2,4,8...). Default = 16\n";
 	print "\n";
-	print "Environment Variables:\n";
-	print "\tCROSS_COMPILE     Cross compiler to build U-BOOT\n";
-	print "\n";
 }
 
 # Main
@@ -129,13 +119,6 @@ if ($opt_w) {
 	$opt_w = 16;
 }
 
-my $cross = $ENV{'CROSS_COMPILE'};
-if(!defined $cross){
-	printf "\nError: Please set environment variable CROSS_COMPILE\n\n";
-	usage();
-	exit 1;
-}
-
 if(bin2hex($opt_i, $opt_o, $opt_b, $opt_w)) {
 	printf "\nError: Failed converting image\n\n";
 	exit 1;
-- 
1.9.1

