From 16809f854f34ee3a5eead4c3a93b5127b113c0aa Mon Sep 17 00:00:00 2001
From: Yehuda Yitschak <yehuday@marvell.com>
Date: Tue, 28 Jul 2015 11:02:00 +0300
Subject: [PATCH 0277/1240] mpp: removed mpp.c file under mvebu_common

this file is a left over from previous mpp implementation

Change-Id: If76a0dfea2e671efc094e098cea4719c555b7924
Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/22253
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/cpu/mvebu-common/mpp.c | 197 ----------------------------------------
 1 file changed, 197 deletions(-)
 delete mode 100644 arch/arm/cpu/mvebu-common/mpp.c

diff --git a/arch/arm/cpu/mvebu-common/mpp.c b/arch/arm/cpu/mvebu-common/mpp.c
deleted file mode 100644
index 3332501..0000000
--- a/arch/arm/cpu/mvebu-common/mpp.c
+++ /dev/null
@@ -1,197 +0,0 @@
-/*
- * ***************************************************************************
- * Copyright (C) 2015 Marvell International Ltd.
- * ***************************************************************************
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License as published by the Free
- * Software Foundation, either version 2 of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * ***************************************************************************
- */
-
-#include <config.h>
-#include <common.h>
-#include <asm/system.h>
-#include <asm/bitops.h>
-#include <asm/io.h>
-#include <asm/arch-mvebu/mpp.h>
-#include <asm/arch-mvebu/soc.h>
-
-char **mpp_get_desc_table(void)
-{
-	return soc_get_mpp_desc_table();
-}
-
-static void set_field(int mpp_id, int value, u32 *base_ptr)
-{
-	int reg_offset;
-	int field_offset;
-	u32 reg, mask;
-
-	/* Calculate register address and bit in register */
-	reg_offset   = 4 * (mpp_id >> (MPP_FIELD_BITS));
-	field_offset = (MPP_BIT_CNT) * (mpp_id & MPP_FIELD_MASK);
-	mask = ~(MPP_VAL_MASK << field_offset);
-
-	/* Clip value to bit resolution */
-	value &= MPP_VAL_MASK;
-
-	reg = readl(base_ptr + reg_offset);
-	reg = (reg & mask) | (value << field_offset);
-	writel(reg, base_ptr + reg_offset);
-}
-
-static u8 get_field(int mpp_id, u32 *base_ptr)
-{
-	u32 reg_offset;
-	int field_offset;
-	u32 reg;
-	u8 value;
-
-	/* Calculate register address and bit in register */
-	reg_offset   = mpp_id >> (MPP_FIELD_BITS);
-	field_offset = (MPP_BIT_CNT) * (mpp_id & MPP_FIELD_MASK);
-
-	reg = readl(base_ptr + reg_offset);
-	value = (reg >> field_offset) & MPP_VAL_MASK;
-
-	return value;
-}
-
-void mpp_set_pin(int mpp_id, int value)
-{
-	if (value > MAX_MPP_OPTS)
-		printf("Warning: MPP value %d > max value %d\n", value, MAX_MPP_OPTS);
-
-	/* Set the new MPP to HW registers */
-	set_field(mpp_id, value, (u32 *)MPP_REGS_BASE);
-}
-
-u8 mpp_get_pin(int mpp_id)
-{
-	u8 value;
-
-	/* Calculate register address and bit in register */
-	value = get_field(mpp_id, (u32 *)MPP_REGS_BASE);
-
-	if (value > MAX_MPP_OPTS)
-		printf("Warning: MPP value %d > max value %d\n", value, MAX_MPP_OPTS);
-
-	return value;
-}
-
-void mpp_set_reg(u32 *mpp_reg, int first_reg, int last_reg)
-{
-	int reg;
-	u32 *base = (u32 *)MPP_REGS_BASE;
-
-	for (reg = first_reg; reg < last_reg; reg++, mpp_reg++)
-		writel(*mpp_reg, base + reg);
-}
-
-void mpp_set_and_update(u32 *mpp_reg)
-{
-	int i;
-	u32 *update_mask = soc_get_mpp_update_mask();
-	u32 *update_val = soc_get_mpp_update_val();
-	u32 *protect_mask = soc_get_mpp_protect_mask();
-	u32 *base = (u32 *)MPP_REGS_BASE;
-
-	for (i = 0; i < MAX_MPP_REGS; i++) {
-		/* Disable modifying protected MPPs */
-		update_mask[i] &= ~protect_mask[i];
-		update_val[i]  &= ~protect_mask[i];
-
-		/* Make sure the mask and val are synced */
-		update_val[i] &= update_mask[i];
-
-		/* Now update the required MPP fields */
-		mpp_reg[i] &= ~update_mask[i];
-		mpp_reg[i] |= update_val[i];
-
-		debug("Set mpp reg 0x%08x\n", mpp_reg[i]);
-
-		/* Write to register */
-		if (soc_get_id() == CONFIG_ARMADA_8K_SOC_ID)
-			writel(mpp_reg[i], base - i);
-		else
-			writel(mpp_reg[i], base + i);
-	}
-}
-
-int mpp_is_bus_enabled(struct mpp_bus *bus)
-{
-	int bus_alt;
-	int pin;
-	int bus_active = 0;
-
-	for (bus_alt = 0; bus_alt < bus->bus_cnt; bus_alt++) {
-		for (pin = 0; pin < bus->pin_cnt; pin++) {
-			u8 id = bus->pin_data[bus_alt][pin].id;
-			u8 val = bus->pin_data[bus_alt][pin].val;
-			if (mpp_get_pin(id) != val)
-				break;
-		}
-		if (pin == bus->pin_cnt) {
-			bus_active = 1;
-			break;
-		}
-	}
-
-	return bus_active;
-}
-
-int mpp_is_bus_valid(struct mpp_bus *bus)
-{
-	int valid = (bus->pin_cnt > 0);
-	return valid;
-}
-
-int mpp_enable_bus(u32 *mpp_reg, int bus_id, int bus_alt)
-{
-	int i, reg_offset, field_offset, value;
-	u32 mask;
-	struct mpp_pin *pin;
-	struct mpp_bus *bus = soc_get_mpp_bus(bus_id);
-	u32 *update_mask = soc_get_mpp_update_mask();
-
-	debug("Enabling MPP bus %s\n", bus->name);
-
-	if (bus_alt < (bus->bus_cnt - 1)) {
-		error("Bus alternative %d doesn't exist for bus %s\n", bus_alt, bus->name);
-		return 1;
-	}
-
-	/* Check if someone already modified one of the pins */
-	for (i = 0; i < bus->pin_cnt; i++) {
-		pin = &bus->pin_data[bus_alt][i];
-		if (get_field(pin->id, update_mask) == MPP_VAL_MASK) {
-			error("Pin %d of Bus %s already modified\n", pin->id, bus->name);
-			return 1;
-		}
-	}
-
-	/* Update the mask and value */
-	for (i = 0; i < bus->pin_cnt; i++) {
-		pin = &bus->pin_data[bus_alt][i];
-		debug("Setting [pin, val] = [%d, 0x%x]\n", pin->id, pin->val);
-
-		value =  MPP_VAL_MASK & pin->val;
-		/* Calculate register address and bit in register */
-		reg_offset   = pin->id >> (MPP_FIELD_BITS);
-		field_offset = (MPP_BIT_CNT) * (pin->id & MPP_FIELD_MASK);
-		mask = ~(MPP_VAL_MASK << field_offset);
-
-		mpp_reg[reg_offset] = (mpp_reg[reg_offset] & mask) | (value << field_offset);
-	}
-
-	return 0;
-}
-
-- 
1.9.1

