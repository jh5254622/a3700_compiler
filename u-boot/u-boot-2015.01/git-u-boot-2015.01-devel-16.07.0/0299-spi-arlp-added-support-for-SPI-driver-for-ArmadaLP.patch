From 450ad0521ebe87e8a208f5f9c210ac52814ac2cf Mon Sep 17 00:00:00 2001
From: Jing Hua <jinghua@marvell.com>
Date: Thu, 4 Jun 2015 16:09:26 +0800
Subject: [PATCH 0299/1240] spi: arlp: added support for SPI driver for
 ArmadaLP

	1. Added support for SPI driver for ArmadaLP under drivers/spi.
	2. Added SPI node in ArmadaLP device tree file.
	3. SPI driver got the base address from the driver tree.
	4. This driver has been tested in Palladium.

Change-Id: Ide16f23497f30b418610c46bd4c252feabe1d9a5
Signed-off-by: Jing Hua <jinghua@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/19806
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/dts/armada-lp-db.dts                   |   3 +
 arch/arm/dts/armada-lp-palladium.dts            |   3 +
 arch/arm/dts/armada-lp.dtsi                     |  10 +-
 configs/mvebu_armadalp_defconfig                |   4 +-
 configs/mvebu_armadalp_palladium_defconfig      |   2 +
 doc/device-tree-bindings/spi/mvebu-spi-arlp.txt |  22 ++
 drivers/spi/Makefile                            |   8 +-
 drivers/spi/mvebu_spi_arlp.c                    | 481 ++++++++++++++++++++++++
 include/configs/armadalp.h                      |  12 +-
 include/fdtdec.h                                |   1 +
 lib/fdtdec.c                                    |   1 +
 11 files changed, 543 insertions(+), 4 deletions(-)
 create mode 100644 doc/device-tree-bindings/spi/mvebu-spi-arlp.txt
 create mode 100644 drivers/spi/mvebu_spi_arlp.c

diff --git a/arch/arm/dts/armada-lp-db.dts b/arch/arm/dts/armada-lp-db.dts
index 31bb042..aea446a 100644
--- a/arch/arm/dts/armada-lp-db.dts
+++ b/arch/arm/dts/armada-lp-db.dts
@@ -12,6 +12,9 @@
 			serial: serial@12000 {
 				status = "okay";
 			};
+			spi0: spi@10600 {
+				status = "okay";
+			};
 		};
 	};
 };
diff --git a/arch/arm/dts/armada-lp-palladium.dts b/arch/arm/dts/armada-lp-palladium.dts
index 741dfec..d9c2e72 100644
--- a/arch/arm/dts/armada-lp-palladium.dts
+++ b/arch/arm/dts/armada-lp-palladium.dts
@@ -14,6 +14,9 @@
 				baudrate = <300>;
 				status = "okay";
 			};
+			spi0: spi@10600 {
+				status = "okay";
+			};
 		};
 	};
 };
diff --git a/arch/arm/dts/armada-lp.dtsi b/arch/arm/dts/armada-lp.dtsi
index 3261942..0f4addd 100644
--- a/arch/arm/dts/armada-lp.dtsi
+++ b/arch/arm/dts/armada-lp.dtsi
@@ -25,6 +25,14 @@
 				baudrate = <115200>;
 				status = "disabled";
 			};
-		};
+			spi0: spi@10600 {
+				compatible = "marvell,armadalp-spi";
+				reg = <0x10600 0x50>;
+				#clock-cells = <0>;
+				clock-frequency = <160000>;
+				spi-max-frequency = <40000>;
+				status = "disabled";
+			};
+};
 	};
 };
diff --git a/configs/mvebu_armadalp_defconfig b/configs/mvebu_armadalp_defconfig
index b7bf483..f49d210 100644
--- a/configs/mvebu_armadalp_defconfig
+++ b/configs/mvebu_armadalp_defconfig
@@ -3,7 +3,9 @@ CONFIG_SPL=y
 +S:CONFIG_TARGET_ARMADA_LP=y
 +S:CONFIG_DEVEL_BOARD=y
 +S:CONFIG_MVEBU_UART_ARLP=y
+CONFIG_MVEBU_SPI=y
 CONFIG_CMD_BDI=y
+CONFIG_CMD_SPI=y
 CONFIG_CMD_BOOTD=y
 CONFIG_CMD_RUN=y
 CONFIG_CMD_EDITENV=y
@@ -11,4 +13,4 @@ CONFIG_CMD_SAVEENV=y
 CONFIG_CMD_MEMORY=y
 +S:CONFIG_OF_CONTROL=y
 +S:CONFIG_OF_EMBED=y
-+S:CONFIG_DEFAULT_DEVICE_TREE="armada-lp-db"
\ No newline at end of file
++S:CONFIG_DEFAULT_DEVICE_TREE="armada-lp-db"
diff --git a/configs/mvebu_armadalp_palladium_defconfig b/configs/mvebu_armadalp_palladium_defconfig
index f55f170..4d53393 100644
--- a/configs/mvebu_armadalp_palladium_defconfig
+++ b/configs/mvebu_armadalp_palladium_defconfig
@@ -3,7 +3,9 @@ CONFIG_SPL=y
 +S:CONFIG_TARGET_ARMADA_LP=y
 +S:CONFIG_DEVEL_BOARD=y
 +S:CONFIG_MVEBU_UART_ARLP=y
+CONFIG_MVEBU_SPI=y
 CONFIG_CMD_BDI=y
+CONFIG_CMD_SPI=y
 CONFIG_CMD_BOOTD=y
 CONFIG_CMD_RUN=y
 CONFIG_CMD_EDITENV=y
diff --git a/doc/device-tree-bindings/spi/mvebu-spi-arlp.txt b/doc/device-tree-bindings/spi/mvebu-spi-arlp.txt
new file mode 100644
index 0000000..389b5d9
--- /dev/null
+++ b/doc/device-tree-bindings/spi/mvebu-spi-arlp.txt
@@ -0,0 +1,22 @@
+Marvell ArmadaLP SPI bindings
+====================
+
+This SPI driver supports Marvell ArmadaLP SoC, which implements the SPI core operations.
+The node name is spi0 to show that it's SPI-0, for SPI-1 should be spi1.
+
+The SPI node for ArmadaLP requires the following properties:
+	- compatible
+		should be "marvell,armadalp-spi".
+	- reg: the base address of the SPI unit.
+	- spi-max-frequency: SPI max bus frequency.
+	- clock-frequency: the input clock for the SPI interface.
+
+Example for SPI-0 node:
+	spi0: spi@10600 {
+		compatible = "marvell,armadalp-spi";
+		reg = <0x10600 0x50>;
+		#clock-cells = <0>;
+		clock-frequency = <160000>;
+		spi-max-frequency = <40000>;
+		status = "disabled";
+	};
diff --git a/drivers/spi/Makefile b/drivers/spi/Makefile
index 2351d61..08485e8 100644
--- a/drivers/spi/Makefile
+++ b/drivers/spi/Makefile
@@ -32,7 +32,13 @@ obj-$(CONFIG_EXYNOS_SPI) += exynos_spi.o
 obj-$(CONFIG_FTSSP010_SPI) += ftssp010_spi.o
 obj-$(CONFIG_ICH_SPI) +=  ich.o
 obj-$(CONFIG_KIRKWOOD_SPI) += kirkwood_spi.o
-obj-$(CONFIG_MVEBU_SPI) += mvebu_spi.o
+ifdef CONFIG_MVEBU_SPI
+ifdef CONFIG_MVEBU_SPI_ARLP
+obj-y += mvebu_spi_arlp.o
+else
+obj-y += mvebu_spi.o
+endif
+endif
 obj-$(CONFIG_MPC52XX_SPI) += mpc52xx_spi.o
 obj-$(CONFIG_MPC8XXX_SPI) += mpc8xxx_spi.o
 obj-$(CONFIG_MXC_SPI) += mxc_spi.o
diff --git a/drivers/spi/mvebu_spi_arlp.c b/drivers/spi/mvebu_spi_arlp.c
new file mode 100644
index 0000000..533baac
--- /dev/null
+++ b/drivers/spi/mvebu_spi_arlp.c
@@ -0,0 +1,481 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#include <common.h>
+#include <malloc.h>
+#include <spi.h>
+#include <asm-generic/errno.h>
+#include <asm/io.h>
+#include <fdtdec.h>
+#include <asm/arch-mvebu/fdt.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+/* to use global variables before u-boot relocation, initialize it to something !=0 */
+unsigned long mvebu_spi_reg_base = 100;
+#define MVEBU_SPI_BASE         mvebu_spi_reg_base
+
+unsigned int mvebu_spi_input_clock = 0;
+unsigned int mvebu_spi_max_freq = 0;
+
+#define CONFIG_MAX_SPI_NUM	8
+#define CONFIG_MAX_SPI_CS_NUM	4
+
+#define SPI_TIMEOUT		10000
+
+#define MVEBU_SPI_ARLP_CTRL_OFFSET         0x00
+#define MVEBU_SPI_ARLP_CONF_OFFSET         0x04
+#define MVEBU_SPI_ARLP_DOUT_OFFSET         0x08
+#define MVEBU_SPI_ARLP_DIN_OFFSET          0x0c
+
+#define MVEBU_SPI_ARLP_CTRL_ADDR           (MVEBU_SPI_BASE + MVEBU_SPI_ARLP_CTRL_OFFSET)
+#define MVEBU_SPI_ARLP_CONF_ADDR           (MVEBU_SPI_BASE + MVEBU_SPI_ARLP_CONF_OFFSET)
+#define MVEBU_SPI_ARLP_DOUT_ADDR           (MVEBU_SPI_BASE + MVEBU_SPI_ARLP_DOUT_OFFSET)
+#define MVEBU_SPI_ARLP_DIN_ADDR            (MVEBU_SPI_BASE + MVEBU_SPI_ARLP_DIN_OFFSET)
+
+#define MVEBU_SPI_ARLP_XFER_RDY				(1 << 1)
+#define MVEBU_SPI_ARLP_FIFO_FLUSH			(1 << 9)
+#define MVEBU_SPI_ARLP_BYTE_LEN				(1 << 5)
+#define MVEBU_SPI_ARLP_BYTE_CLK_PHA			(1 << 6)
+#define MVEBU_SPI_ARLP_CLK_POL				(1 << 7)
+#define MVEBU_SPI_ARLP_FIFO_EN				(1 << 17)
+#define MVEBU_SPI_ARLP_SPI_EN_0				(1 << 16)
+#define MVEBU_SPI_ARLP_CLK_PRESCALE_BIT			0
+#define MVEBU_SPI_ARLP_CLK_PRESCALE_MASK		(0x1F << MVEBU_SPI_ARLP_CLK_PRESCALE_BIT)
+
+/**
+ * if_spi_flags_is_set() - poll a register to check if certain flags is set
+ *
+ * This function is almost simply checking the value of a register,
+ * just more time are allowed. This is useful when you want to wait
+ * and make sure that a transfer is done. However, this brings a new
+ * problem that a misuse of this function can make it too long for
+ * each transfer. So make sure to only invoke this routine one time,
+ * do not add while(timeout--) around it, since there is already a
+ * --timeout inside.
+ *
+ * Input:
+ *	reg: register address that need to be checked.
+ *	flags: bits that need to be checked if they are set to 1.
+ *	timeout: how many times we need to check before return.
+ * Return:	0 - the flags are not set
+ *		1 - the flags are set
+ */
+int if_spi_flags_is_set(unsigned long reg, u16 flags, u32 timeout)
+{
+	while (!(readl(reg) & flags)) {
+		if (--timeout == 0)
+			return 0;
+	}
+	return 1;
+}
+
+/**
+ * poll_spi_xfer_ready() - poll xfer ready flag
+ *
+ * When Ready bit on CONTROL register is set, it means one transfer is
+ * done and SPI module (in legacy mode) is ready for the next
+ * transfer.
+ *
+ * See also:	poll_spi_flag_set()
+ *
+ * Return:	0 - xfer flags is not set
+ *		1 - xfer flags is set
+ */
+static inline int poll_spi_xfer_ready(void)
+{
+	unsigned int timeout = SPI_TIMEOUT;
+
+	return if_spi_flags_is_set(MVEBU_SPI_ARLP_CTRL_ADDR, MVEBU_SPI_ARLP_XFER_RDY, timeout);
+}
+
+/**
+ * spi_set_legacy() - set SPI unit to be working in legacy mode
+ *
+ * Legacy mode means use only DO pin (I/O 1) for Data Out, and
+ * DI pin (I/O 0) for Data In.
+ * Non-legacy mode means both DO and DI pin coud be used for
+ * read or write.
+ *
+ * Return:	0 - configuration has been done.
+ *		1 - error
+ */
+int spi_set_legacy(void)
+{
+	unsigned int val_conf;
+
+	/* Always shift 1 byte at a time */
+	val_conf = readl(MVEBU_SPI_ARLP_CONF_ADDR);
+	val_conf = val_conf & (~MVEBU_SPI_ARLP_BYTE_LEN);
+
+	/* Set legacy mode */
+	val_conf = val_conf & (~MVEBU_SPI_ARLP_BYTE_CLK_PHA);
+
+	/* Set CPOL = 0 */
+	val_conf = val_conf & (~MVEBU_SPI_ARLP_CLK_POL);
+
+	/* Set Prescaler */
+	val_conf = val_conf & (~MVEBU_SPI_ARLP_CLK_PRESCALE_MASK);
+
+	/* calculate Prescaler = (spi_input_freq / spi_max_freq) */
+	val_conf = val_conf | (mvebu_spi_input_clock / mvebu_spi_max_freq);
+
+	writel(val_conf, MVEBU_SPI_ARLP_CONF_ADDR);
+
+	return 0;
+}
+
+/**
+ * spi_legacy_shift_byte() - triggers the real SPI transfer
+ * @bytelen:	Indicate how many bytes to transfer.
+ * @dout:	Buffer address of what to send.
+ * @din:	Buffer address of where to receive.
+ *
+ * This function triggers the real SPI transfer in legacy mode. It
+ * will shift out char buffer from @dout, and shift in char buffer to
+ * @din, if necessary.
+ *
+ * This function assumes that only one byte is shifted at one time.
+ * However, it is not its responisbility to set the transfer type to
+ * one-byte. Also, it does not guarantee that it will work if transfer
+ * type becomes two-byte. See spi_set_legacy() for details.
+ *
+ * In legacy mode, simply write to the SPI_DOUT register will trigger
+ * the transfer.
+ *
+ * If @dout == NULL, which means no actual data needs to be sent out,
+ * then the function will shift out 0x00 in order to shift in data.
+ * The XFER_RDY flag is checked every time before accessing SPI_DOUT
+ * and SPI_DIN register.
+ *
+ * The number of transfers to be triggerred is decided by @bytelen.
+ *
+ * Return:	0 - cool
+ *		-ETIMEDOUT - XFER_RDY flag timeout
+ */
+int spi_legacy_shift_byte(unsigned int bytelen, const void *dout, void *din)
+{
+	const u8 *dout_8;
+	u8 *din_8;
+
+	/* Use 0x00 as dummy dout */
+	const u8 dummy_dout = 0x0;
+	u32 pending_dout = 0x0;
+
+	/* dout_8: pointer of current dout */
+	dout_8 = dout;
+	/* din_8: pointer of current din */
+	din_8 = din;
+
+	while (bytelen) {
+		if (!poll_spi_xfer_ready())
+			return -ETIMEDOUT;
+
+		if (dout)
+			pending_dout = (u32)*dout_8;
+		else
+			pending_dout = (u32)dummy_dout;
+
+		/* Trigger the xfer */
+		writel(pending_dout, MVEBU_SPI_ARLP_DOUT_ADDR);
+
+		if (din) {
+			if (!poll_spi_xfer_ready())
+				return -ETIMEDOUT;
+
+			/* Read what is transferred in */
+			*din_8 = (u8)readl(MVEBU_SPI_ARLP_DIN_ADDR);
+		}
+
+		/* Don't increment the current pointer if NULL */
+		if (dout)
+			dout_8++;
+		if (din)
+			din_8++;
+
+		bytelen--;
+	}
+
+	return 0;
+}
+
+
+/**
+ * spi_init() - API implementation
+ *
+ * This function does nothing, all the hardware configuration
+ * will be done in spi_setup_slave, but it is required by SPI skeleton.
+ *
+ */
+void spi_init(void)
+{
+	/* do nothing */
+}
+
+/**
+ * spi_setup_slave() - API implementation
+ *
+ * This function does not really touch the hardware.
+ *
+ * See also:	doc/driver-model/UDM-spi.txt
+ *
+ * Return:	0 - cool
+ */
+struct spi_slave *spi_setup_slave(unsigned int bus, unsigned int cs,
+				unsigned int max_hz, unsigned int mode)
+{
+	struct spi_slave *slave;
+	u32 timeout = SPI_TIMEOUT;
+	u32 data;
+
+
+	int node_list[CONFIG_MAX_SPI_NUM], node;
+	u32 i, count;
+
+	/* get reg_base from FDT */
+	count = fdtdec_find_aliases_for_id(gd->fdt_blob, "spi",
+					COMPAT_MVEBU_ARLP_SPI, node_list, CONFIG_MAX_SPI_NUM);
+
+	/* in FDT file, there should be only one "spi" node that are enabled,
+	* which has the 'reg' attribute for register base of SPI unit */
+	for (i = 0; i < count ; i++) {
+		node = node_list[i];
+
+		if (node <= 0)
+			continue;
+
+		mvebu_spi_reg_base = (unsigned long)fdt_get_regs_offs(gd->fdt_blob, node, "reg");
+		mvebu_spi_max_freq = fdtdec_get_int(gd->fdt_blob, node, "spi-max-frequency", 0);
+		mvebu_spi_input_clock = fdtdec_get_int(gd->fdt_blob, node, "clock-frequency", 0);
+		break;
+	}
+
+	if (mvebu_spi_reg_base == 100) {
+		error("spi_reg_base: %lx still has Init value 100, failed to get right value\n", mvebu_spi_reg_base);
+		return NULL;
+	}
+
+	if (mvebu_spi_max_freq == 0 || mvebu_spi_input_clock == 0) {
+		error("%max_freq: %x, input_clock: %x, failed to get right SPI clock configuration\n",
+		      mvebu_spi_max_freq, mvebu_spi_input_clock);
+		return NULL;
+	}
+
+	if (!spi_cs_is_valid(bus, cs)) {
+		error("%s: (bus %i, cs %i) not valid\n", __func__, bus, cs);
+		return NULL;
+	}
+
+	slave = calloc(1, sizeof(struct spi_slave));
+	if (!slave)
+		return NULL;
+
+	slave->bus = bus;
+	slave->cs = cs;
+
+	/* flush read/write FIFO */
+	data = readl(MVEBU_SPI_ARLP_CONF_ADDR);
+	writel((data | MVEBU_SPI_ARLP_FIFO_FLUSH), MVEBU_SPI_ARLP_CONF_ADDR);
+
+	do {
+		data = readl(MVEBU_SPI_ARLP_CONF_ADDR);
+		if (timeout-- == 0)
+			return NULL;
+	} while (data & MVEBU_SPI_ARLP_FIFO_FLUSH);
+
+	/* set SPI polarity
+	 * 0: Serial interface clock is low when inactive
+	 * 1: Serial interface clock is high when inactive
+	 */
+	if (mode & SPI_CPOL)
+		data |= MVEBU_SPI_ARLP_CLK_POL;
+
+	/* disable FIFO mode */
+	data &= ~MVEBU_SPI_ARLP_FIFO_EN;
+	writel(data, MVEBU_SPI_ARLP_CONF_ADDR);
+
+	return slave;
+}
+
+/**
+ * spi_free_slave() - API implementation
+ *
+ * This function does not really touch the hardware.
+ * only free the memory of slave structure.
+ *
+ * See also:	doc/driver-model/UDM-spi.txt
+ *
+ * Return:	0 - cool
+ */
+void spi_free_slave(struct spi_slave *slave)
+{
+	free(slave);
+}
+
+/**
+ * spi_claim_bus() - API implementation
+ *
+ * According to `doc/driver-model/UDM-spi.txt`, this should do `all
+ * the hardware settings'.
+ *
+ * This function should setup speed, mode, etc. In newer API beginning
+ * Oct 2014, these setups will be converted to separate functions.
+ * There is only one master on the bus, so do not need to claim or release.
+ * And all the hardware configurations have been done in setup_slave routine,
+ * so it is nothing here. But skeleton needs it, so have to keep it alive.
+ *
+ * Return:	0 - cool
+ */
+int spi_claim_bus(struct spi_slave *slave)
+{
+	return 0;
+}
+/**
+ * spi_release_bus() - API implementation
+ *
+ * There is only one master on the bus, so do not need to claim or release.
+ * And all the hardware configurations have been done in setup_slave routine,
+ * so it is nothing here. But skeleton needs it, so have to keep it alive.
+ *
+ */
+void spi_release_bus(struct spi_slave *slave)
+{
+}
+/**
+ * spi_cs_is_valid() - API implementation
+ *
+ * check if the bus and CS number is valid
+ *
+ * Input:
+ *	bus: bus number
+ *	cs: CS number
+ */
+int spi_cs_is_valid(unsigned int bus, unsigned int cs)
+{
+	/* we only have one bus, and 4 CS */
+	if (bus == 0 && cs < CONFIG_MAX_SPI_CS_NUM)
+		return 1;
+	else
+		return 0;
+}
+/**
+ * spi_cs_activate() - API implementation
+ *
+ * Active input CS number
+ *
+ * Input:
+ *	slave: structure for slave
+ */
+void spi_cs_activate(struct spi_slave *slave)
+{
+	u32 val_conf;
+
+	/* enable cs */
+	val_conf = readl(MVEBU_SPI_ARLP_CTRL_ADDR);
+	val_conf = val_conf | (MVEBU_SPI_ARLP_SPI_EN_0 << slave->cs);
+	writel(val_conf, MVEBU_SPI_ARLP_CTRL_ADDR);
+}
+/**
+ * spi_cs_activate() - API implementation
+ *
+ * Deactive input CS number
+ *
+ * Input:
+ *	slave: structure for slave
+ */
+void spi_cs_deactivate(struct spi_slave *slave)
+{
+	u32 val_conf;
+
+	/* disable cs */
+	val_conf = readl(MVEBU_SPI_ARLP_CTRL_ADDR);
+	val_conf = val_conf & (~(MVEBU_SPI_ARLP_SPI_EN_0 << slave->cs));
+	writel(val_conf, MVEBU_SPI_ARLP_CTRL_ADDR);
+}
+
+
+/**
+ * spi_xfer() - API function to start SPI transfer
+ *
+ * This interface is designed by U-Boot. Upper level drivers, such as
+ * sf.c use this API to do the real transfer work. The command sspi
+ * also uses this API directly.
+ *
+ * This function should send the content in *dout, write incoming data
+ * in *din, and return 0 if no issues.
+ *
+ * ArmadaLP SPI module supports two modes: legacy mode and non-legacy
+ * mode. You can choose to use Legacy mode or Non-Legacy mode at
+ * compilation. For details, please see the sub-routines.
+ *
+ * For either mode, the driver does not need to tweak the SPI clock
+ * one by one. Data is transferred either by one byte or two bytes.
+ * That is, the SPI module will generate 8 cycles or 16 cycles at a
+ * time. The driver should, however, guarantee that the SPI clock freq
+ * should not exceed the max value from slave device's datasheet. In
+ * this driver, this job is done in spi_setup_slave().
+ *
+ * Legacy mode is closer to the original way that SPI works. The SPI
+ * module will start transfer upon writing to Data Out register. To
+ * receive data, simply send out dummy bytes 0x00 and incoming data
+ * will be shifted in Data In register.
+ *
+ * Return:	0 if no issues
+ */
+int spi_xfer(struct spi_slave *slave, unsigned int bitlen, const void *dout,
+	     void *din, unsigned long flags)
+{
+	register unsigned int bytelen;
+	int ret;
+
+	/* bytelen = bitlen / 8 */
+	bytelen = bitlen >> 3;
+
+	if (dout && din)
+		debug("This is a duplex transfer.\n");
+
+	/* Activate CS */
+	if (flags & SPI_XFER_BEGIN) {
+		debug("SPI: activate cs.\n");
+		spi_cs_activate(slave);
+	}
+
+	/* Settings SPI controller to be working in legacy mode, which
+	  * means use only DO pin (I/O 1) for Data Out, and DI pin (I/O 0) for Data In.
+	  */
+	spi_set_legacy();
+
+	/* Send and/or receive */
+	if (dout || din) {
+		ret = spi_legacy_shift_byte(bytelen, dout, din);
+		if (ret)
+			return ret;
+	}
+
+	/* Deactivate CS */
+	if (flags & SPI_XFER_END) {
+		if (!poll_spi_xfer_ready())
+			return -ETIMEDOUT;
+
+		debug("SPI: deactivate cs.\n");
+		spi_cs_deactivate(slave);
+	}
+
+	return 0;
+}
+
diff --git a/include/configs/armadalp.h b/include/configs/armadalp.h
index 362c768..7e1ea15 100644
--- a/include/configs/armadalp.h
+++ b/include/configs/armadalp.h
@@ -59,6 +59,17 @@
 #define MV_DRAM_AUTO_SIZE
 #define CONFIG_SYS_DRAM_BANKS           1
 
+/* SPI flash for Palladium */
+#ifdef CONFIG_MVEBU_SPI
+
+#define CONFIG_MVEBU_SPI_ARLP
+
+#ifdef CONFIG_PALLADIUM
+#define CONFIG_SPI_FLASH_SPANSION
+#endif /* CONFIG_PALLADIUM */
+
+#endif /* CONFIG_MVEBU_SPI */
+
 /*
  * Include the generic MVEBU configuration file.
  * The generic file is affected by the defines above.
@@ -90,5 +101,4 @@
 					"fdt_high=0xa0000000\0"
 #endif /*CONFIG_PALLADIUM*/
 
-
 #endif /* __ARMADA_LP_H */
diff --git a/include/fdtdec.h b/include/fdtdec.h
index a837895..05ea9c4 100644
--- a/include/fdtdec.h
+++ b/include/fdtdec.h
@@ -122,6 +122,7 @@ enum fdt_compat_id {
 	COMPAT_INTEL_GMA,		/* Intel Graphics Media Accelerator */
 	COMPAT_AMS_AS3722,		/* AMS AS3722 PMIC */
 	COMPAT_MVEBU_SPI,
+	COMPAT_MVEBU_ARLP_SPI,
 	COMPAT_MVEBU_UART,
 	COMPAT_MVEBU_TCLOCK,
 	COMPAT_MVEBU_I2C,
diff --git a/lib/fdtdec.c b/lib/fdtdec.c
index fed8b86..df00b8b 100644
--- a/lib/fdtdec.c
+++ b/lib/fdtdec.c
@@ -84,6 +84,7 @@ static const char * const compat_names[COMPAT_COUNT] = {
 	COMPAT(INTEL_GMA, "intel,gma"),
 	COMPAT(AMS_AS3722, "ams,as3722"),
 	COMPAT(MVEBU_SPI, "marvell,orion-spi"),
+	COMPAT(MVEBU_ARLP_SPI, "marvell,armadalp-spi"),
 	COMPAT(MVEBU_UART, "marvell,armadalp-uart"),
 	COMPAT(MVEBU_TCLOCK, "marvell,tclk"),
 	COMPAT(MVEBU_I2C, "marvell,mvebu-i2c"),
-- 
1.9.1

