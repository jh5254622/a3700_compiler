From 763d1dd75943ea63d90b533d15cee97f70ed19d8 Mon Sep 17 00:00:00 2001
From: Hanna Hawa <hannah@marvell.com>
Date: Wed, 5 Aug 2015 14:45:45 +0300
Subject: [PATCH 0313/1240] thermal: added support for thermal sensor external
 unit

- Added driver for thermal sensor v2

Change-Id: Iae01cf7f6b7d82f6387de5265bdc1a3d1ecb531a
Signed-off-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/22551
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
---
 common/mvebu/Kconfig                               |   2 +-
 configs/mvebu_armada38x_defconfig                  |   3 +-
 .../thermal/mvebu-thermal-v2.txt                   |  34 ++++++
 drivers/thermal/Kconfig                            |  19 +++-
 drivers/thermal/Makefile                           |   1 +
 drivers/thermal/mvebu_thermal_28nm_v2.c            | 121 +++++++++++++++++++++
 include/fdtdec.h                                   |   1 +
 lib/fdtdec.c                                       |   1 +
 8 files changed, 179 insertions(+), 3 deletions(-)
 create mode 100644 doc/device-tree-bindings/thermal/mvebu-thermal-v2.txt
 create mode 100644 drivers/thermal/mvebu_thermal_28nm_v2.c

diff --git a/common/mvebu/Kconfig b/common/mvebu/Kconfig
index 8df1671..0846684 100644
--- a/common/mvebu/Kconfig
+++ b/common/mvebu/Kconfig
@@ -46,7 +46,7 @@ config CMD_MVEBU_MSS_BOOT
 
 config CMD_MVEBU_TSEN
 	bool "tsen"
-	depends on MVEBU_THERMAL_SENSOR_28NM
+	depends on MVEBU_THERMAL_SENSOR_28NM || MVEBU_THERMAL_SENSOR_28NM_V2
 	default n
 	help
 	  tsen - Display the SoC temperature
diff --git a/configs/mvebu_armada38x_defconfig b/configs/mvebu_armada38x_defconfig
index 3e64a7e0..5e13bc3 100644
--- a/configs/mvebu_armada38x_defconfig
+++ b/configs/mvebu_armada38x_defconfig
@@ -29,6 +29,7 @@ CONFIG_CMD_MISC=y
 CONFIG_CMD_TIMER=y
 CONFIG_CMD_MVEBU_MPP=y
 CONFIG_CMD_MVEBU_BUBT=y
+CONFIG_CMD_MVEBU_TSEN=y
 +S:CONFIG_OF_CONTROL=y
 +S:CONFIG_OF_EMBED=y
 +S:CONFIG_DEFAULT_DEVICE_TREE="armada-385-db"
@@ -36,5 +37,5 @@ CONFIG_MVEBU_MBUS=y
 +S:CONFIG_SYS_NS16550=y
 CONFIG_MVEBU_PINCTL=y
 +S:CONFIG_MVEBU_COMPHY_SUPPORT=y
-CONFIG_MVEBU_THERMAL_SENSOR_28NM=y
+CONFIG_MVEBU_THERMAL_SENSOR=y
 +S:CONFIG_MVEBU_SPL_DIFFRENT_BASE_ADDR=y
diff --git a/doc/device-tree-bindings/thermal/mvebu-thermal-v2.txt b/doc/device-tree-bindings/thermal/mvebu-thermal-v2.txt
new file mode 100644
index 0000000..70f8779
--- /dev/null
+++ b/doc/device-tree-bindings/thermal/mvebu-thermal-v2.txt
@@ -0,0 +1,34 @@
+Marvell Thermal Sensor V2 bindings
+=====================================
+
+The thermal node v2 include description about the Thermal Sensor External Unit.
+The thernal sensor v2 is an on chip temprature sensor that read the temprature of
+every core and return the average or the maximum between them.
+
+The thermal node requires the following properties:
+	- compatible
+		should be "marvell,thermal-sensor-v2"
+	- reg: the base address of thermal unit
+	- gain, offset: parameters of the temperature equation
+		the equation:
+		T(in celsius) = T(read value) * gain + offset
+	Note: in Tsen SPEC the default value of gain equal to 0.425
+		In the u-boot we can't calculate real number (no floating point)
+		need to set the gain and offset by multiply them by 1000
+		this will help for calculate the equation, see example below.
+
+Example of equation:
+T(in celsius) = T(read value) * 0.425 + 153.4
+Change to:
+T(in celsius) = (T(read value) * 425 + 153400) / 1000
+
+Example:
+	thermal: thermal@ {
+		compatible = "marvell,thermal-sensor-v2";
+		reg = <0x7F0084 0x12>;
+		gain = <425>;
+		offset = <153400>;
+		divisor = <1000>;
+		status = "okay";
+	};
+
diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index f8f63cd..125a689 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -1,6 +1,13 @@
+config MVEBU_THERMAL_SENSOR
+	bool "Thermal Sensor driver"
+	depends on !SPL_BUILD
+
+choice
+	prompt "Thermal Sensor select"
+	depends on MVEBU_THERMAL_SENSOR
+
 config MVEBU_THERMAL_SENSOR_28NM
 	bool "Enable Thermal Sensor 28NM driver"
-	default n
 	select CMD_MVEBU_TEMP
 	help
 	  Choose this option to add support for
@@ -8,3 +15,13 @@ config MVEBU_THERMAL_SENSOR_28NM
 	  This driver init the thermal sensor unit,
 	  and read the tempreture from the unit.
 
+config MVEBU_THERMAL_SENSOR_28NM_V2
+	bool "Enable Thermal Sensor 28NM V2 driver"
+	select CMD_MVEBU_TEMP
+	help
+	  Choose this option to add support for
+	  thermal sensor 28nm V2 driver.
+	  This driver init the External thermal sensor unit,
+	  and read the tempreture from the unit.
+
+endchoice
diff --git a/drivers/thermal/Makefile b/drivers/thermal/Makefile
index a6127ff..f3b62eb 100644
--- a/drivers/thermal/Makefile
+++ b/drivers/thermal/Makefile
@@ -8,3 +8,4 @@
 obj-$(CONFIG_DM_THERMAL) += thermal-uclass.o
 obj-$(CONFIG_IMX6_THERMAL) += imx_thermal.o
 obj-$(CONFIG_MVEBU_THERMAL_SENSOR_28NM) += mvebu_thermal_28nm.o
+obj-$(CONFIG_MVEBU_THERMAL_SENSOR_28NM_V2) += mvebu_thermal_28nm_v2.o
diff --git a/drivers/thermal/mvebu_thermal_28nm_v2.c b/drivers/thermal/mvebu_thermal_28nm_v2.c
new file mode 100644
index 0000000..c381bdb
--- /dev/null
+++ b/drivers/thermal/mvebu_thermal_28nm_v2.c
@@ -0,0 +1,121 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#define DEBUG
+
+#include <common.h>
+#include <asm/io.h>
+#include <fdtdec.h>
+#include <asm/arch-mvebu/mvebu.h>
+#include <asm/arch-mvebu/fdt.h>
+#include <asm/arch-mvebu/thermal.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+struct tsen_info {
+	void __iomem *regs_base;
+	u32 tsen_offset;
+	u32 tsen_gain;
+	u32 tsen_ready;
+};
+
+struct tsen_info __attribute__((section(".data")))tsen_config;
+struct tsen_info __attribute__((section(".data")))*tsen = &tsen_config;
+
+#define THERMAL_SEN_CTRL_LSB				0x0
+#define THERMAL_SEN_CTRL_LSB_STRT_OFFSET		1
+#define THERMAL_SEN_CTRL_LSB_STRT_MASK			(0x1 << THERMAL_SEN_CTRL_LSB_STRT_OFFSET)
+#define THERMAL_SEN_CTRL_LSB_RST_OFFSET			1
+#define THERMAL_SEN_CTRL_LSB_RST_MASK			(0x1 << THERMAL_SEN_CTRL_LSB_RST_OFFSET)
+#define THERMAL_SEN_CTRL_LSB_EN_OFFSET			2
+#define THERMAL_SEN_CTRL_LSB_EN_MASK			(0x1 << THERMAL_SEN_CTRL_LSB_EN_OFFSET)
+
+#define THERMAL_SEN_CTRL_STATS				0x8
+#define THERMAL_SEN_CTRL_STATS_VALID_OFFSET		16
+#define THERMAL_SEN_CTRL_STATS_VALID_MASK		(0x1 << THERMAL_SEN_CTRL_STATS_VALID_OFFSET)
+#define THERMAL_SEN_CTRL_STATS_TEMP_OUT_OFFSET		0
+#define THERMAL_SEN_CTRL_STATS_TEMP_OUT_MASK		(0x3FF << THERMAL_SEN_CTRL_STATS_TEMP_OUT_OFFSET)
+
+u32 mvebu_thermal_sensor_read(void)
+{
+	u32 reg;
+
+	if (!tsen->tsen_ready)
+		return 0;
+
+	reg = readl(tsen->regs_base + THERMAL_SEN_CTRL_STATS);
+	reg = ((reg & THERMAL_SEN_CTRL_STATS_TEMP_OUT_MASK) >> THERMAL_SEN_CTRL_STATS_TEMP_OUT_OFFSET);
+
+	return ((tsen->tsen_gain * reg) + tsen->tsen_offset) / 1000;
+}
+
+u32 mvebu_thermal_sensor_probe(void)
+{
+	const void *blob = gd->fdt_blob;
+	u32 node, reg;
+
+	debug_enter();
+	debug("Initializing thermal sensor V2 unit\n");
+	/* set flag to indicate that TSEN is not ready */
+	tsen->tsen_ready = 0;
+
+	/* Get thermal sensor node from the FDT blob */
+	node = fdt_node_offset_by_compatible(blob, -1, fdtdec_get_compatible(COMPAT_MVEBU_THERMAL_SENSOR_V2));
+	if (node == -1) {
+		debug("No thermal sensor node found in FDT blob\n");
+		return -1;
+	}
+	/* Get the base address */
+	tsen->regs_base = (void *)fdt_get_regs_offs(blob, node, "reg");
+	if (tsen->regs_base == NULL) {
+		debug("%s: missing reg field for thermal sensor node", __func__);
+		return -1;
+	}
+	tsen->tsen_gain = fdtdec_get_int(blob, node, "gain", -1);
+	if (tsen->tsen_gain == -1) {
+		debug("%s: missing gain field for thermal sensor node", __func__);
+		return -1;
+	}
+	tsen->tsen_offset = fdtdec_get_int(blob, node, "offset", -1);
+	if (tsen->tsen_offset == -1) {
+		debug("%s: missing offset field for thermal sensor node", __func__);
+		return -1;
+	}
+
+	/* Initialize thermal sensor hardware reset once */
+	reg = readl(tsen->regs_base + THERMAL_SEN_CTRL_LSB);
+	reg &= ~THERMAL_SEN_CTRL_LSB_RST_OFFSET; /* De-assert TSEN_RESET */
+	reg |= THERMAL_SEN_CTRL_LSB_EN_MASK; /* Set TSEN_EN to 1 */
+	reg |= THERMAL_SEN_CTRL_LSB_STRT_MASK; /* Set TSEN_START to 1 */
+	writel(reg, tsen->regs_base + THERMAL_SEN_CTRL_LSB);
+
+	udelay(10); /* wait 10 ms and check if the TSEN is ready */
+	reg = readl(tsen->regs_base + THERMAL_SEN_CTRL_STATS);
+	if ((reg & THERMAL_SEN_CTRL_STATS_VALID_MASK) == 0) {
+		error("%s: thermal sensor is not ready\n", __func__);
+		return -1;
+	}
+
+	/* TSEN is ready to use */
+	tsen->tsen_ready = 1;
+
+	debug("Done thermal sensor V2 initializing unit\n");
+	debug_exit();
+
+	return 0;
+}
diff --git a/include/fdtdec.h b/include/fdtdec.h
index 5dc8ff3..33f0559 100644
--- a/include/fdtdec.h
+++ b/include/fdtdec.h
@@ -139,6 +139,7 @@ enum fdt_compat_id {
 	COMPAT_COMPHY_ARMADA_38X,
 	COMPAT_COMPHY_AP806,
 	COMPAT_MVEBU_THERMAL_SENSOR,
+	COMPAT_MVEBU_THERMAL_SENSOR_V2,
 
 	COMPAT_COUNT,
 };
diff --git a/lib/fdtdec.c b/lib/fdtdec.c
index 58fa145..0e091bd 100644
--- a/lib/fdtdec.c
+++ b/lib/fdtdec.c
@@ -101,6 +101,7 @@ static const char * const compat_names[COMPAT_COUNT] = {
 	COMPAT(COMPHY_ARMADA_38X, "marvell,comphy-armada38x"),
 	COMPAT(COMPAT_COMPHY_AP806, "marvell,comphy-ap806"),
 	COMPAT(MVEBU_THERMAL_SENSOR, "marvell,thermal-sensor"),
+	COMPAT(MVEBU_THERMAL_SENSOR_V2, "marvell,thermal-sensor-v2"),
 };
 
 const char *fdtdec_get_compatible(enum fdt_compat_id id)
-- 
1.9.1

