From c7eb3f3a3b851a81d262ff220f0508275751fd27 Mon Sep 17 00:00:00 2001
From: Neta Zur <neta@marvell.com>
Date: Tue, 11 Aug 2015 09:47:11 +0300
Subject: [PATCH 0314/1240] misc: flc: mvebu: add flc initial support

When flc is enable at spl stage, need to init ccu and rfu before the flc

Change-Id: I099055fd94900754124d32b61fb7ce05b7107056
Signed-off-by: Neta Zur <neta@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/22526
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
---
 arch/arm/cpu/mvebu-common/soc-init.c        |   8 +-
 arch/arm/cpu/mvebu-common/spl.c             |  20 +++
 arch/arm/include/asm/arch-mvebu/flc.h       |  26 ++++
 common/mvebu/cmd_misc.c                     |   6 +
 doc/device-tree-bindings/misc/mvebu-flc.txt |  40 +++++
 drivers/misc/Kconfig                        |  10 ++
 drivers/misc/Makefile                       |   1 +
 drivers/misc/mvebu_flc.c                    | 226 ++++++++++++++++++++++++++++
 include/fdtdec.h                            |   1 +
 lib/fdtdec.c                                |   1 +
 scripts/Makefile.spl                        |   1 +
 11 files changed, 339 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm/include/asm/arch-mvebu/flc.h
 create mode 100644 doc/device-tree-bindings/misc/mvebu-flc.txt
 create mode 100644 drivers/misc/mvebu_flc.c

diff --git a/arch/arm/cpu/mvebu-common/soc-init.c b/arch/arm/cpu/mvebu-common/soc-init.c
index ef2db9d..d19ab31 100644
--- a/arch/arm/cpu/mvebu-common/soc-init.c
+++ b/arch/arm/cpu/mvebu-common/soc-init.c
@@ -56,7 +56,8 @@ int soc_late_init(void) __attribute__((weak, alias("__soc_late_init")));
 int mvebu_soc_init()
 {
 	int ret;
-#if defined(CONFIG_MVEBU_CCU) || defined(CONFIG_MVEBU_RFU)
+
+#if defined(CONFIG_MVEBU_CCU) || defined(CONFIG_MVEBU_RFU) || defined(CONFIG_MVEBU_FLC)
 	/* ccu and rfu init support 2 modes:
 	   1. regular mode - init both sw structures and configure windows
 	   2. sw init - in case that the ccu and rfu were initialized at the SPL,
@@ -67,6 +68,11 @@ int mvebu_soc_init()
 
 	soc_init();
 
+#ifdef CONFIG_MVEBU_FLC
+	/* when FLC is enable, the ccu & rfu init already done at the SPL */
+	sw_init = true;
+#endif
+
 	/* Initialize physical memory map */
 #ifdef CONFIG_MVEBU_CCU
 	init_ccu(sw_init);
diff --git a/arch/arm/cpu/mvebu-common/spl.c b/arch/arm/cpu/mvebu-common/spl.c
index 63080da..44b2f87 100644
--- a/arch/arm/cpu/mvebu-common/spl.c
+++ b/arch/arm/cpu/mvebu-common/spl.c
@@ -26,6 +26,15 @@
 #ifdef CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT
 #include <asm/arch-mvebu/dram_over_pci.h>
 #endif
+#ifdef CONFIG_MVEBU_CCU
+#include <asm/arch-mvebu/ccu.h>
+#endif
+#ifdef CONFIG_MVEBU_RFU
+#include <asm/arch-mvebu/rfu.h>
+#endif
+#ifdef CONFIG_MVEBU_FLC
+#include <asm/arch-mvebu/flc.h>
+#endif
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -69,6 +78,17 @@ void board_init_f(ulong silent)
 #else
 	dram_over_pci_init(gd->fdt_blob);
 #endif /* CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT */
+
+#ifdef CONFIG_MVEBU_FLC
+#ifdef CONFIG_MVEBU_CCU
+	init_ccu(false);
+#endif
+#ifdef CONFIG_MVEBU_RFU
+	init_rfu(false);
+#endif
+	init_flc();
+#endif
+
 #ifdef CONFIG_MVEBU_SPL_MEMORY_TEST
 	if (run_memory_test())
 		printf("**** DRAM test failed ****\n");
diff --git a/arch/arm/include/asm/arch-mvebu/flc.h b/arch/arm/include/asm/arch-mvebu/flc.h
new file mode 100644
index 0000000..8616a0a
--- /dev/null
+++ b/arch/arm/include/asm/arch-mvebu/flc.h
@@ -0,0 +1,26 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#ifndef _FLC_H_
+#define _FLC_H_
+
+int init_flc(void);
+void dump_flc(void);
+
+#endif /* _FLC_H_ */
+
diff --git a/common/mvebu/cmd_misc.c b/common/mvebu/cmd_misc.c
index 7675412..c1e37e8 100644
--- a/common/mvebu/cmd_misc.c
+++ b/common/mvebu/cmd_misc.c
@@ -36,6 +36,9 @@
 #ifdef CONFIG_MVEBU_MBUS
 #include <asm/arch-mvebu/mbus.h>
 #endif
+#ifdef CONFIG_MVEBU_FLC
+#include <asm/arch-mvebu/flc.h>
+#endif
 
 int do_map_cmd(cmd_tbl_t *cmdtp, int flag, int argc,
 			char * const argv[])
@@ -52,6 +55,9 @@ int do_map_cmd(cmd_tbl_t *cmdtp, int flag, int argc,
 #ifdef CONFIG_MVEBU_MBUS
 	dump_mbus();
 #endif
+#ifdef CONFIG_MVEBU_FLC
+	dump_flc();
+#endif
 	return 0;
 }
 
diff --git a/doc/device-tree-bindings/misc/mvebu-flc.txt b/doc/device-tree-bindings/misc/mvebu-flc.txt
new file mode 100644
index 0000000..3deb8eb
--- /dev/null
+++ b/doc/device-tree-bindings/misc/mvebu-flc.txt
@@ -0,0 +1,40 @@
+Marvell FLC bindings
+=====================================
+
+Final Level Cache for the McKinley (MCK) Memory Controller is a unit that is embedded inside the
+memory controller. When the unit is enabled, it effectively turns the memory controller into a cache
+unit using DDR memory to cache data for it. An external memory device would be required to serve
+as main memory.
+
+The FLC node include description about the FLC memory mapping configuration.
+
+The FLC node requires the following properties:
+	- compatible
+		should be "marvell,mvebu-flc"
+	- reg: the base address of the FLC unit
+	- flc_ext_dev_map: entry that include the configuration of the FLC External Memory Device Map.
+	- flc_nc_map: (optional) entry that include the configuration of the FLC Non-Cacheable Memory Map.
+		The unit enables to define part of the DDR memory as Non-Cacheable memory, used as a regular
+		DDR memory.
+	  every mapping entry should have 4 parameters:
+	  - high base address of the window
+	  - low base address of the window
+	  - high size of the memory
+	  - low size of the memory
+	  The size must be a power of 2 between 8 MB to 1 TB
+
+Note: if the base address and size is more than 32bit, it divided into high and low,
+	Base example:
+		base address: 0x10f0000000 should divided into:
+		base address high: 0x10
+		base address low: 0xf0000000
+
+Example:
+Define FLC external memory of 8 GB, base address of the external memory 0x100000000
+Define FLC Non-Cacheable Memory - the first 8 MB of the DDR used as a regular DDR.
+flc {
+	compatible = "marvell,mvebu-flc";
+	reg = <0x20700 0x100>;
+	flc_ext_dev_map = <0x1 0x0 0x2 0x0>;
+	flc_nc_map = <0x0 0x0 0x0 0x800000>
+}
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 756571f..d138724 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -36,3 +36,13 @@ config MVEBU_MBUS
 	  for MBUS address decoding driver.
 	  This driver initialize the MBUS windows
 	  only.
+
+config MVEBU_FLC
+	bool "MBUS Final Level Cache driver"
+	depends on !MVEBU_SPL_DDR_OVER_PCI_SUPPORT
+	default n
+	help
+	  Choose this option to add support
+	  for Final Level Cache for the Marvell McKinley
+	  Memory Controller driver.
+	  This driver enable FLC and open the FLC windows.
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 04cbe11..84f9e30 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -32,3 +32,4 @@ obj-$(CONFIG_MVEBU_CCU) += mvebu_ccu.o
 obj-$(CONFIG_MVEBU_RFU) += mvebu_rfu.o
 obj-$(CONFIG_MVEBU_IOB) += mvebu_iob.o
 obj-$(CONFIG_MVEBU_MBUS) += mvebu_mbus.o
+obj-$(CONFIG_MVEBU_FLC) += mvebu_flc.o
diff --git a/drivers/misc/mvebu_flc.c b/drivers/misc/mvebu_flc.c
new file mode 100644
index 0000000..0fd5271
--- /dev/null
+++ b/drivers/misc/mvebu_flc.c
@@ -0,0 +1,226 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+/*#define DEBUG*/
+/*#define DEBUG_REG*/
+
+#include <common.h>
+#include <asm/system.h>
+#include <asm/io.h>
+#include <fdtdec.h>
+#include <asm/arch-mvebu/mvebu.h>
+#include <asm/arch-mvebu/fdt.h>
+#include <asm/arch-mvebu/flc.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+/* FLC defines */
+#define MMAP_FLC_OFFSET				(flc_base + 0x0)
+#define MMAP_FLC_HIGH_OFFSET		(flc_base + 0x4)
+#define MMAP_NC_FLC_OFFSET			(flc_base + 0x8)
+#define MMAP_NC_FLC_HIGH_OFFSET		(flc_base + 0xc)
+
+#define FLC_ENABLE_BIT			(0x1)
+
+/* low base address [31:23] */
+#define FLC_ADDRESS_MASK	(0xFF800000)
+
+#define FLC_SIZE_OFFSET		(16)
+#define FLC_SIZE_MASK		(0x1F)
+
+struct flc_map {
+	u32 base_addr_high;
+	u32 base_addr_low;
+	u32 flc_size_high;
+	u32 flc_size_low;
+};
+
+char *mapping_flc_size[] = {
+	"Reserved", /* 0x0 */
+	"Reserved", /* 0x1 */
+	"Reserved", /* 0x2 */
+	"Reserved", /* 0x3 */
+	"Reserved", /* 0x4 */
+	"Reserved", /* 0x5 */
+	"Reserved", /* 0x6 */
+	"8 MB",     /* 0x7 */
+	"16 MB",    /* 0x8 */
+	"32 MB",    /* 0x9 */
+	"64 MB",    /* 0xA */
+	"128 MB",   /* 0xB */
+	"256 MB",   /* 0xC */
+	"512 MB",   /* 0xD */
+	"1 GB",     /* 0xE */
+	"2 GB",     /* 0xF */
+	"4 GB",     /* 0x10 */
+	"8 GB",     /* 0x11 */
+	"16 GB",    /* 0x12 */
+	"32 GB",    /* 0x13 */
+	"64 GB",    /* 0x14 */
+	"128 GB",   /* 0x15 */
+	"256 GB",   /* 0x16 */
+	"512 GB",   /* 0x17 */
+	"1 TB",     /* 0x18 */
+	"Reserved", /* 0x19 */
+	"Reserved", /* 0x1A */
+	"Reserved", /* 0x1B */
+	"Reserved", /* 0x1C */
+	"Reserved", /* 0x1D */
+	"Reserved", /* 0x1E */
+	"Reserved", /* 0x1F */
+};
+
+static int get_flc_size(u64 size)
+{
+	switch (size) {
+	case 0x800000:
+		return 7;
+	case 0x1000000:
+		return 8;
+	case 0x2000000:
+		return 9;
+	case 0x4000000:
+		return 0xa;
+	case 0x8000000:
+		return 0xb;
+	case 0x10000000:
+		return 0xc;
+	case 0x20000000:
+		return 0xd;
+	case 0x40000000:
+		return 0xe;
+	case 0x80000000:
+		return 0xf;
+	case 0x100000000:
+		return 0x10;
+	case 0x200000000:
+		return 0x11;
+	case 0x400000000:
+		return 0x12;
+	case 0x800000000:
+		return 0x13;
+	case 0x1000000000:
+		return 0x14;
+	case 0x2000000000:
+		return 0x15;
+	case 0x4000000000:
+		return 0x16;
+	case 0x8000000000:
+		return 0x17;
+	case 0x10000000000:
+		return 0x18;
+	default:
+		error("No valid size, size must be a power of 2 between 8 MB to 1 TB");
+	}
+
+	return -1;
+}
+
+void __iomem *flc_base;
+
+static void print_flc_mmap_reg_val(u32 reg_val, u32 reg_val_high)
+{
+	u64 start_addr;
+	u32 alr;
+
+	if (!(reg_val & FLC_ENABLE_BIT)) {
+		printf("\nEntry disable\n");
+		return;
+	}
+
+	alr = reg_val & FLC_ADDRESS_MASK;
+	start_addr = alr | ((u64)reg_val_high << 32);
+
+	printf("0x%016llx   %s\n", start_addr,
+		   mapping_flc_size[(reg_val >> FLC_SIZE_OFFSET) & FLC_SIZE_MASK]);
+}
+
+static u32 get_flc_mmap_reg_val(struct flc_map *memory_map)
+{
+	u32 reg_val;
+	int     size;
+
+	size = get_flc_size(memory_map->flc_size_low |
+						((u64)memory_map->flc_size_high  << 32));
+
+	reg_val = FLC_ENABLE_BIT;
+	reg_val |= (memory_map->base_addr_low & FLC_ADDRESS_MASK);
+	reg_val |= size << FLC_SIZE_OFFSET;
+
+	return reg_val;
+}
+
+
+void dump_flc(void)
+{
+	/* Dump all FLC mapping */
+	printf("FLC MMAP     start                 size\n");
+	printf("-----------------------------------------\n");
+
+	printf("FLC        ");
+	print_flc_mmap_reg_val(readl(MMAP_FLC_OFFSET), readl(MMAP_FLC_HIGH_OFFSET));
+	printf("\nNC FLC     ");
+	print_flc_mmap_reg_val(readl(MMAP_NC_FLC_OFFSET), readl(MMAP_NC_FLC_HIGH_OFFSET));
+
+	return;
+}
+
+int init_flc(void)
+{
+	struct flc_map memory_map;
+	const void *blob = gd->fdt_blob;
+	u32 node, array_count, size;
+
+	debug_enter();
+	debug("Initializing FLC\n");
+
+	/* Get FLC node from the FDT blob */
+	node = fdt_node_offset_by_compatible(blob, -1, fdtdec_get_compatible(COMPAT_MVEBU_FLC));
+	if (node < 0) {
+		debug("No FLC node found in FDT blob\n");
+		return -1;
+	}
+	/* Get the base address of the FLC */
+	flc_base = (void *)fdt_get_regs_offs(blob, node, "reg");
+
+	size = sizeof(struct flc_map) / sizeof(u32);
+
+	/* Get the FLC non-cacheable parameters */
+	array_count = fdtdec_get_int_array_count(blob, node, "flc_nc_map", (u32 *)&memory_map, size);
+	if (array_count != -FDT_ERR_NOTFOUND) {
+		/* FLC MMAP NC is Optional */
+		writel(memory_map.base_addr_high, MMAP_NC_FLC_HIGH_OFFSET);
+		writel(get_flc_mmap_reg_val(&memory_map), MMAP_NC_FLC_OFFSET);
+	}
+
+	/* Get the FLC mapping parameters */
+	array_count = fdtdec_get_int_array_count(blob, node, "flc_ext_dev_map", (u32 *)&memory_map, size);
+	if (array_count == -FDT_ERR_NOTFOUND) {
+		error("no flc_ext_dev_map found\n");
+		return 0;
+	}
+
+	/* set the flc map */
+	writel(memory_map.base_addr_high, MMAP_FLC_HIGH_OFFSET);
+	writel(get_flc_mmap_reg_val(&memory_map), MMAP_FLC_OFFSET);
+
+	debug("Done FLC Initializing\n");
+	debug_exit();
+
+	return 0;
+}
diff --git a/include/fdtdec.h b/include/fdtdec.h
index 33f0559..4ca0185 100644
--- a/include/fdtdec.h
+++ b/include/fdtdec.h
@@ -140,6 +140,7 @@ enum fdt_compat_id {
 	COMPAT_COMPHY_AP806,
 	COMPAT_MVEBU_THERMAL_SENSOR,
 	COMPAT_MVEBU_THERMAL_SENSOR_V2,
+	COMPAT_MVEBU_FLC,
 
 	COMPAT_COUNT,
 };
diff --git a/lib/fdtdec.c b/lib/fdtdec.c
index 0e091bd..626ea99 100644
--- a/lib/fdtdec.c
+++ b/lib/fdtdec.c
@@ -102,6 +102,7 @@ static const char * const compat_names[COMPAT_COUNT] = {
 	COMPAT(COMPAT_COMPHY_AP806, "marvell,comphy-ap806"),
 	COMPAT(MVEBU_THERMAL_SENSOR, "marvell,thermal-sensor"),
 	COMPAT(MVEBU_THERMAL_SENSOR_V2, "marvell,thermal-sensor-v2"),
+	COMPAT(MVEBU_FLC, "marvell,mvebu-flc"),
 };
 
 const char *fdtdec_get_compatible(enum fdt_compat_id id)
diff --git a/scripts/Makefile.spl b/scripts/Makefile.spl
index 4bb941c..c72f15e 100644
--- a/scripts/Makefile.spl
+++ b/scripts/Makefile.spl
@@ -83,6 +83,7 @@ libs-$(CONFIG_MVEBU_SPL_DDR_SUPPORT) += drivers/ddr/
 libs-$(CONFIG_MVEBU_COMPHY_SUPPORT) += drivers/phy/
 libs-$(CONFIG_OF_EMBED) += dts/
 libs-$(CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT) += drivers/pci/
+libs-$(CONFIG_MVEBU_FLC) += drivers/misc/
 
 head-y		:= $(addprefix $(obj)/,$(head-y))
 libs-y		:= $(addprefix $(obj)/,$(libs-y))
-- 
1.9.1

