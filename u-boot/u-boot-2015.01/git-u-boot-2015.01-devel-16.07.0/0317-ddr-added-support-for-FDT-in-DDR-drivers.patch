From 02274c858b397bd70e5d5a8c23d2d3095f03ce73 Mon Sep 17 00:00:00 2001
From: Hanna Hawa <hannah@marvell.com>
Date: Mon, 10 Aug 2015 14:10:27 +0300
Subject: [PATCH 0317/1240] ddr: added support for FDT in DDR drivers

- Added support for FDT in DDR drivers
- Get the base address of DDR MAC, and DDR PHY

Change-Id: I33b59aef2c02edf07f7c2b77c0b3b4130b6183ca
Signed-off-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/22702
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
---
 arch/arm/cpu/mvebu-common/spl.c       |   2 +-
 arch/arm/dts/apn-806.dtsi             |  12 ++
 arch/arm/dts/armada-385-db.dts        |  12 ++
 arch/arm/include/asm/arch-mvebu/ddr.h |  13 +-
 drivers/ddr/ddr_dunit.c               | 154 +++++++--------
 drivers/ddr/ddr_mckinley6.c           | 344 +++++++++++++++++-----------------
 drivers/ddr/mvebu_ddr.c               |  40 +++-
 include/fdtdec.h                      |   2 +
 lib/fdtdec.c                          |   2 +
 9 files changed, 328 insertions(+), 253 deletions(-)

diff --git a/arch/arm/cpu/mvebu-common/spl.c b/arch/arm/cpu/mvebu-common/spl.c
index 44b2f87..61a1810 100644
--- a/arch/arm/cpu/mvebu-common/spl.c
+++ b/arch/arm/cpu/mvebu-common/spl.c
@@ -73,7 +73,7 @@ void board_init_f(ulong silent)
 		error("COMPHY initialization failed\n");
 #endif
 #ifndef CONFIG_PALLADIUM
-	static_dram_init();
+	static_dram_init(gd->fdt_blob);
 #endif
 #else
 	dram_over_pci_init(gd->fdt_blob);
diff --git a/arch/arm/dts/apn-806.dtsi b/arch/arm/dts/apn-806.dtsi
index ebbd1f0..5ca02c4 100644
--- a/arch/arm/dts/apn-806.dtsi
+++ b/arch/arm/dts/apn-806.dtsi
@@ -69,6 +69,18 @@
 				reverse-reg;
 			};
 
+			ddr-mac {
+				compatible = "marvell,mvebu-ddr-mac";
+				reg = <0x20000 0x20>;
+				status = "okay";
+			};
+
+			ddr-phy {
+				compatible = "marvell,mvebu-ddr-phy";
+				reg = <0x20000 0x10>;
+				status = "okay";
+			};
+
 			ccu {
 				compatible = "marvell,mvebu-ccu";
 				reg = <0x4000 0x50>;
diff --git a/arch/arm/dts/armada-385-db.dts b/arch/arm/dts/armada-385-db.dts
index d7c2fc5..509af90 100644
--- a/arch/arm/dts/armada-385-db.dts
+++ b/arch/arm/dts/armada-385-db.dts
@@ -97,6 +97,18 @@
 				status = "okay";
 			};
 
+			ddr-mac {
+				compatible = "marvell,mvebu-ddr-mac";
+				reg = <0x1400 0x20>;
+				status = "okay";
+			};
+
+			ddr-phy {
+				compatible = "marvell,mvebu-ddr-phy";
+				reg = <0x1600 0x10>;
+				status = "okay";
+			};
+
 			comphy {
 				compatible = "marvell,mvebu-comphy", "marvell,comphy-armada38x";
 				mux-bitcount = <4>;
diff --git a/arch/arm/include/asm/arch-mvebu/ddr.h b/arch/arm/include/asm/arch-mvebu/ddr.h
index 7306098..454c283 100644
--- a/arch/arm/include/asm/arch-mvebu/ddr.h
+++ b/arch/arm/include/asm/arch-mvebu/ddr.h
@@ -19,8 +19,15 @@
 #ifndef _MVEBU_DDR_H_
 #define _MVEBU_DDR_H_
 
-void static_dram_init(void);
-void mvebu_dram_mac_init(void);
-void mvebu_dram_phy_init(void);
+struct mvebu_dram_config {
+	void __iomem *mac_base;
+	void __iomem *phy_base;
+	u32 ecc_enabled;
+	u32 cs_count;
+};
+
+void static_dram_init(const void *blob);
+void mvebu_dram_mac_init(struct mvebu_dram_config *dram_config);
+void mvebu_dram_phy_init(struct mvebu_dram_config *dram_config);
 
 #endif /* _MVEBU_DDR_H_ */
diff --git a/drivers/ddr/ddr_dunit.c b/drivers/ddr/ddr_dunit.c
index 1b86397..40112a5 100644
--- a/drivers/ddr/ddr_dunit.c
+++ b/drivers/ddr/ddr_dunit.c
@@ -20,154 +20,158 @@
 #include <asm/io.h>
 #include <asm/arch-mvebu/ddr.h>
 
-void mvebu_dram_mac_init(void)
+void mvebu_dram_mac_init(struct mvebu_dram_config *dram_config)
 {
-	writel(0x7B004a28, 0xD0001400);
+	void __iomem *base_addr = dram_config->mac_base;
+
+	writel(0x7B004a28, base_addr + 0x0);
 	udelay(2000);
-	writel(0x36301820, 0xD0001404);
+	writel(0x36301820, base_addr + 0x4);
 	udelay(2000);
-	writel(0x43149997, 0xD0001408);
+	writel(0x43149997, base_addr + 0x8);
 	udelay(2000);
-	writel(0x38411bc7, 0xD000140C);
+	writel(0x38411bc7, base_addr + 0xC);
 	udelay(2000);
-	writel(0x14300000, 0xD0001410);
+	writel(0x14300000, base_addr + 0x10);
 	udelay(2000);
-	writel(0x00000700, 0xD0001414);
+	writel(0x00000700, base_addr + 0x14);
 	udelay(2000);
-	writel(0x0060f3ff, 0xD0001424);
+	writel(0x0060f3ff, base_addr + 0x24);
 	udelay(2000);
-	writel(0x000F8830, 0xD0001428);
+	writel(0x000F8830, base_addr + 0x28);
 	udelay(2000);
-	writel(0x28c50f8 , 0xD000142C);
+	writel(0x28c50f8 , base_addr + 0x2C);
 	udelay(2000);
-	writel(0x0000c671, 0xD000147C);
+	writel(0x0000c671, base_addr + 0x7C);
 	udelay(2000);
-	writel(0x00030000, 0xD0001494);
+	writel(0x00030000, base_addr + 0x94);
 	udelay(2000);
-	writel(0x00000300, 0xD000149C);
+	writel(0x00000300, base_addr + 0x9C);
 	udelay(2000);
-	writel(0x00000000, 0xD00014a8);
+	writel(0x00000000, base_addr + 0xa8);
 	udelay(2000);
-	writel(0xbd09000d, 0xD00014cc);
+	writel(0xbd09000d, base_addr + 0xcc);
 	udelay(2000);
-	writel(0x00000000, 0xD0001474);
+	writel(0x00000000, base_addr + 0x74);
 	udelay(2000);
-	writel(0x00000009, 0xD0001538);
+	writel(0x00000009, base_addr + 0x138);
 	udelay(2000);
-	writel(0x0000000c, 0xD000153C);
+	writel(0x0000000c, base_addr + 0x13C);
 	udelay(2000);
-	writel(0xFFFFFFF1, 0xD0001504);
+	writel(0xFFFFFFF1, base_addr + 0x104);
 	udelay(2000);
-	writel(0xFFFFFFE5, 0xD000150c);
+	writel(0xFFFFFFE5, base_addr + 0x10c);
 	udelay(2000);
-	writel(0x00000000, 0xD0001514);
+	writel(0x00000000, base_addr + 0x114);
 	udelay(2000);
-	writel(0x0       , 0xD000151c);
+	writel(0x0       , base_addr + 0x11c);
 	udelay(2000);
-	writel(0x00000650, 0xD00015D0);
+	writel(0x00000650, base_addr + 0x1D0);
 	udelay(2000);
-	writel(0x00000046, 0xD00015D4);
+	writel(0x00000046, base_addr + 0x1D4);
 	udelay(2000);
-	writel(0x00000010, 0xD00015D8);
+	writel(0x00000010, base_addr + 0x1D8);
 	udelay(2000);
-	writel(0x00000000, 0xD00015DC);
+	writel(0x00000000, base_addr + 0x1DC);
 	udelay(2000);
-	writel(0x23      , 0xD00015E0);
+	writel(0x23      , base_addr + 0x1E0);
 	udelay(2000);
-	writel(0x00203c18, 0xD00015E4);
+	writel(0x00203c18, base_addr + 0x1E4);
 	udelay(2000);
-	writel(0xf8000019, 0xD00015EC);
+	writel(0xf8000019, base_addr + 0x1EC);
 	udelay(2000);
+}
+
+void mvebu_dram_phy_init(struct mvebu_dram_config *dram_config)
+{
+	void __iomem *base_addr = dram_config->phy_base;
+	u32 reg;
 
-	writel(0xe8243dfe, 0xD00016A0);
+	writel(0xe8243dfe, base_addr + 0xA0);
 	udelay(2000);
-	writel(0xe8280434, 0xD00016A0);
+	writel(0xe8280434, base_addr + 0xA0);
 	udelay(2000);
 
-	writel(0x281020da, 0xD00016A0);
+	writel(0x281020da, base_addr + 0xA0);
 	udelay(2000);
-	writel(0xe8260cb2, 0xD00016A0);
+	writel(0xe8260cb2, base_addr + 0xA0);
 	udelay(2000);
-	writel(0xe8290000, 0xD00016A0);
+	writel(0xe8290000, base_addr + 0xA0);
 	udelay(2000);
-	writel(0xf810001f, 0xD00016A0);
+	writel(0xf810001f, base_addr + 0xA0);
 	udelay(2000);
-}
 
-void mvebu_dram_phy_init(void)
-{
-	u32 reg;
-	writel(0xC0005847, 0xD00016A0);
+	writel(0xC0005847, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
-	writel(0xC0406049, 0xD00016A0);
+	writel(0xC0406049, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
-	writel(0xC080704d, 0xD00016A0);
+	writel(0xC080704d, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
-	writel(0xC0C0a85b, 0xD00016A0);
+	writel(0xC0C0a85b, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
-	writel(0xC002008d, 0xD00016A0);
+	writel(0xC002008d, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
-	writel(0xC0420084, 0xD00016A0);
+	writel(0xC0420084, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
-	writel(0xC082009f, 0xD00016A0);
+	writel(0xC082009f, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
-	writel(0xC0c20099, 0xD00016A0);
+	writel(0xC0c20099, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
-	writel(0xC003000F, 0xD00016A0);
+	writel(0xC003000F, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
-	writel(0xC043000f, 0xD00016A0);
+	writel(0xC043000f, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
-	writel(0xC083000f, 0xD00016A0);
+	writel(0xC083000f, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
-	writel(0xC0C3000f, 0xD00016A0);
+	writel(0xC0C3000f, base_addr + 0xA0);
 	udelay(2000);
-	reg = readl(0xD00016A0);
+	reg = readl(base_addr + 0xA0);
 	while ((reg & (1<<31)) > 0)
-		reg = readl(0xD00016A0);
+		reg = readl(base_addr + 0xA0);
 
 	writel(0x00000001, 0xD0001480);
 	udelay(2000000);
diff --git a/drivers/ddr/ddr_mckinley6.c b/drivers/ddr/ddr_mckinley6.c
index 9bc9f69..7220cb6 100644
--- a/drivers/ddr/ddr_mckinley6.c
+++ b/drivers/ddr/ddr_mckinley6.c
@@ -20,189 +20,193 @@
 #include <asm/io.h>
 #include <asm/arch-mvebu/ddr.h>
 
-void mvebu_dram_mac_init(void)
+void mvebu_dram_mac_init(struct mvebu_dram_config *dram_config)
 {
-	writel(0x7fbfdfef, 0xf0020340);
-	writel(0x020000aa, 0xf0020344);
-	writel(0x00200000, 0xf0020310);
-	writel(0x00200000, 0xf0020314);
-	writel(0x00200000, 0xf0020318);
-	writel(0x00200000, 0xf002031c);
+	void __iomem *base_addr = dram_config->mac_base;
+
+	writel(0x7fbfdfef, base_addr + 0x340);
+	writel(0x020000aa, base_addr + 0x344);
+	writel(0x00200000, base_addr + 0x310);
+	writel(0x00200000, base_addr + 0x314);
+	writel(0x00200000, base_addr + 0x318);
+	writel(0x00200000, base_addr + 0x31c);
 #ifdef CONFIG_PALLADIUM
-	writel(0x000d0001, 0xf0020200); /* use 512MB CS */
+	writel(0x000d0001, base_addr + 0x200); /* use 512MB CS */
 #else
-	writel(0x000e0001, 0xf0020200);
+	writel(0x000e0001, base_addr + 0x200);
 #endif
-	writel(0x00000000, 0xf0020204);
-	writel(0x400e0001, 0xf0020208);
-	writel(0x00000000, 0xf002020c);
-	writel(0x800e0001, 0xf0020210);
-	writel(0x00000000, 0xf0020214);
-	writel(0xc00e0001, 0xf0020218);
-	writel(0x00000000, 0xf002021c);
+	writel(0x00000000, base_addr + 0x204);
+	writel(0x400e0001, base_addr + 0x208);
+	writel(0x00000000, base_addr + 0x20c);
+	writel(0x800e0001, base_addr + 0x210);
+	writel(0x00000000, base_addr + 0x214);
+	writel(0xc00e0001, base_addr + 0x218);
+	writel(0x00000000, base_addr + 0x21c);
 #ifdef CONFIG_PALLADIUM
-	writel(0x13010332, 0xf0020220); /* use 64 bit ls*/
+	writel(0x13010332, base_addr + 0x220); /* use 64 bit ls*/
 #else
-	writel(0x05000632, 0xf0020220);
+	writel(0x05000632, base_addr + 0x220);
 #endif
-	writel(0x05000632, 0xf0020224);
-	writel(0x05000632, 0xf0020228);
-	writel(0x05000632, 0xf002022c);
-	writel(0x00030400, 0xf0020044);
-	writel(0x00006000, 0xf00202c0);
-	writel(0x00000020, 0xf00202c4);
-	writel(0x3fd5b595, 0xf0020058);
-	writel(0x00000001, 0xf0020048);
-	writel(0x00010200, 0xf0020180);
-	writel(0x000000ff, 0xf0020050);
+	writel(0x05000632, base_addr + 0x224);
+	writel(0x05000632, base_addr + 0x228);
+	writel(0x05000632, base_addr + 0x22c);
+	writel(0x00030400, base_addr + 0x044);
+	writel(0x00006000, base_addr + 0x2c0);
+	writel(0x00000020, base_addr + 0x2c4);
+	writel(0x3fd5b595, base_addr + 0x058);
+	writel(0x00000001, base_addr + 0x048);
+	writel(0x00010200, base_addr + 0x180);
+	writel(0x000000ff, base_addr + 0x050);
 #ifdef CONFIG_PALLADIUM
-	writel(0x00000000, 0xf002004c); /* Disable ECC */
+	writel(0x00000000, base_addr + 0x04c); /* Disable ECC */
 #else
-	writel(0x00000002, 0xf002004c);
+	writel(0x00000002, base_addr + 0x04c);
 #endif
-	writel(0x00000480, 0xf0020054);
-	writel(0x0000080a, 0xf0020300);
-	writel(0x00000032, 0xf0020380);
-	writel(0x00000032, 0xf0020384);
-	writel(0x09600050, 0xf0020388);
-	writel(0x00000200, 0xf002038c);
-	writel(0x00400100, 0xf0020390);
-	writel(0x00f00618, 0xf0020394);
-	writel(0x00f80200, 0xf0020398);
-	writel(0x00120808, 0xf002039c);
-	writel(0x00050514, 0xf00203a0);
-	writel(0x00000001, 0xf00203a4);
-	writel(0x00000c04, 0xf00203a8);
-	writel(0x18260a1c, 0xf00203ac);
-	writel(0x0a0c060a, 0xf00203b0);
-	writel(0x04040606, 0xf00203b4);
-	writel(0x00000606, 0xf00203b8);
-	writel(0x02020404, 0xf00203bc);
-	writel(0x00000000, 0xf00203c0);
-	writel(0x00000000, 0xf00203c4);
-	writel(0x00081239, 0xf00203dc);
-	writel(0x000e000e, 0xf0020064);
-	writel(0x10077779, 0xf0020804);
-	writel(0x1ff00770, 0xf0020808);
-	writel(0x3f03fc77, 0xf002080c);
-	writel(0x00000000, 0xf0020828);
-	writel(0x03800000, 0xf0020830);
-	writel(0x00300000, 0xf0020834);
-	writel(0x00100100, 0xf0020810);
-	writel(0x00000400, 0xf0020840);
-	writel(0x81000001, 0xf00208c0);
-	writel(0x00010000, 0xf00208e0);
-	writel(0x00000000, 0xf00208d0);
-	writel(0x00020000, 0xf00208e0);
-	writel(0x00000000, 0xf00208d0);
-	writel(0x00040000, 0xf00208e0);
-	writel(0x00000000, 0xf00208d0);
-	writel(0x00080000, 0xf00208e0);
-	writel(0x00000000, 0xf00208d0);
-	writel(0x00000000, 0xf0020890);
-	writel(0x00000000, 0xf0020894);
-	writel(0x00000000, 0xf0020898);
-	writel(0x00000000, 0xf002089c);
-	writel(0x00000000, 0xf00208a0);
-	writel(0x00000000, 0xf00208a4);
-	writel(0x00000000, 0xf00208a8);
-	writel(0x00000000, 0xf00208ac);
-	writel(0x00000000, 0xf00208b0);
-	writel(0x00004040, 0xf0020800);
-	writel(0x00080200, 0xf0020814);
-	writel(0x00000003, 0xf0020838);
-	writel(0x00000020, 0xf002083c);
-	writel(0x0000010a, 0xf0020980);
-	writel(0x0000010a, 0xf0020d80);
-	writel(0x0000010a, 0xf0020984);
-	writel(0x0000010a, 0xf0020d84);
-	writel(0x0000010a, 0xf0020988);
-	writel(0x0000010a, 0xf0020d88);
-	writel(0x0000010a, 0xf002098c);
-	writel(0x0000010a, 0xf0020d8c);
-	writel(0x0000010a, 0xf0020990);
-	writel(0x0000010a, 0xf0020d90);
-	writel(0x0000010a, 0xf0020994);
-	writel(0x0000010a, 0xf0020d94);
-	writel(0x0000010a, 0xf0020998);
-	writel(0x0000010a, 0xf0020d98);
-	writel(0x0000010a, 0xf002099c);
-	writel(0x0000010a, 0xf0020d9c);
-	writel(0x0000010a, 0xf00209a0);
-	writel(0x0000010a, 0xf0020da0);
-	writel(0x0000010a, 0xf00209a4);
-	writel(0x0000010a, 0xf0020da4);
-	writel(0x0000010a, 0xf00209a8);
-	writel(0x0000010a, 0xf0020da8);
-	writel(0x0000010a, 0xf00209ac);
-	writel(0x0000010a, 0xf0020dac);
-	writel(0x0000010a, 0xf00209b0);
-	writel(0x0000010a, 0xf0020db0);
-	writel(0x0000010a, 0xf00209b4);
-	writel(0x0000010a, 0xf0020db4);
-	writel(0x0000010a, 0xf00209b8);
-	writel(0x0000010a, 0xf0020db8);
-	writel(0x0000010a, 0xf00209bc);
-	writel(0x0000010a, 0xf0020dbc);
-	writel(0x0000010a, 0xf00209c0);
-	writel(0x0000010a, 0xf0020dc0);
-	writel(0x0000010a, 0xf00209c4);
-	writel(0x0000010a, 0xf0020dc4);
-	writel(0x0000010a, 0xf00209c8);
-	writel(0x0000010a, 0xf0020dc8);
-	writel(0x0000010a, 0xf00209cc);
-	writel(0x0000010a, 0xf0020dcc);
-	writel(0x0000010a, 0xf00209d0);
-	writel(0x0000010a, 0xf0020dd0);
-	writel(0x0000010a, 0xf00209d4);
-	writel(0x0000010a, 0xf0020dd4);
-	writel(0x0000010a, 0xf00209d8);
-	writel(0x0000010a, 0xf0020dd8);
-	writel(0x0000010a, 0xf00209dc);
-	writel(0x0000010a, 0xf0020ddc);
-	writel(0x0000010a, 0xf00209e0);
-	writel(0x0000010a, 0xf0020de0);
-	writel(0x0000010a, 0xf00209e4);
-	writel(0x0000010a, 0xf0020de4);
-	writel(0x0000010a, 0xf00209e8);
-	writel(0x0000010a, 0xf0020de8);
-	writel(0x0000010a, 0xf00209ec);
-	writel(0x0000010a, 0xf0020dec);
-	writel(0x0000010a, 0xf00209f0);
-	writel(0x0000010a, 0xf0020df0);
-	writel(0x0000010a, 0xf00209f4);
-	writel(0x0000010a, 0xf0020df4);
-	writel(0x0000010a, 0xf00209f8);
-	writel(0x0000010a, 0xf0020df8);
-	writel(0x0000010a, 0xf00209fc);
-	writel(0x0000010a, 0xf0020dfc);
-	writel(0x0000010a, 0xf0020a00);
-	writel(0x0000010a, 0xf0020e00);
-	writel(0x0000010a, 0xf0020a04);
-	writel(0x0000010a, 0xf0020e04);
-	writel(0x0000010a, 0xf0020a08);
-	writel(0x0000010a, 0xf0020e08);
-	writel(0x0000010a, 0xf0020a0c);
-	writel(0x0000010a, 0xf0020e0c);
-	writel(0x08080000, 0xf0020850);
-	writel(0x08080000, 0xf0020854);
-	writel(0x08080000, 0xf0020858);
-	writel(0x08080000, 0xf002085c);
-	writel(0x08080000, 0xf0020860);
-	writel(0x08080000, 0xf0020864);
-	writel(0x08080000, 0xf0020868);
-	writel(0x08080000, 0xf002086c);
-	writel(0x08080000, 0xf0020870);
-	writel(0x20000000, 0xf0020820);
-	writel(0x40000000, 0xf0020820);
-	writel(0x80000000, 0xf0020820);
-	writel(0x1f000001, 0xf0020020);
+	writel(0x00000480, base_addr + 0x054);
+	writel(0x0000080a, base_addr + 0x300);
+	writel(0x00000032, base_addr + 0x380);
+	writel(0x00000032, base_addr + 0x384);
+	writel(0x09600050, base_addr + 0x388);
+	writel(0x00000200, base_addr + 0x38c);
+	writel(0x00400100, base_addr + 0x390);
+	writel(0x00f00618, base_addr + 0x394);
+	writel(0x00f80200, base_addr + 0x398);
+	writel(0x00120808, base_addr + 0x39c);
+	writel(0x00050514, base_addr + 0x3a0);
+	writel(0x00000001, base_addr + 0x3a4);
+	writel(0x00000c04, base_addr + 0x3a8);
+	writel(0x18260a1c, base_addr + 0x3ac);
+	writel(0x0a0c060a, base_addr + 0x3b0);
+	writel(0x04040606, base_addr + 0x3b4);
+	writel(0x00000606, base_addr + 0x3b8);
+	writel(0x02020404, base_addr + 0x3bc);
+	writel(0x00000000, base_addr + 0x3c0);
+	writel(0x00000000, base_addr + 0x3c4);
+	writel(0x00081239, base_addr + 0x3dc);
+	writel(0x000e000e, base_addr + 0x064);
+	writel(0x10077779, base_addr + 0x804);
+	writel(0x1ff00770, base_addr + 0x808);
+	writel(0x3f03fc77, base_addr + 0x80c);
+	writel(0x00000000, base_addr + 0x828);
+	writel(0x03800000, base_addr + 0x830);
+	writel(0x00300000, base_addr + 0x834);
+	writel(0x00100100, base_addr + 0x810);
+	writel(0x00000400, base_addr + 0x840);
+	writel(0x81000001, base_addr + 0x8c0);
+	writel(0x00010000, base_addr + 0x8e0);
+	writel(0x00000000, base_addr + 0x8d0);
+	writel(0x00020000, base_addr + 0x8e0);
+	writel(0x00000000, base_addr + 0x8d0);
+	writel(0x00040000, base_addr + 0x8e0);
+	writel(0x00000000, base_addr + 0x8d0);
+	writel(0x00080000, base_addr + 0x8e0);
+	writel(0x00000000, base_addr + 0x8d0);
+	writel(0x00000000, base_addr + 0x890);
+	writel(0x00000000, base_addr + 0x894);
+	writel(0x00000000, base_addr + 0x898);
+	writel(0x00000000, base_addr + 0x89c);
+	writel(0x00000000, base_addr + 0x8a0);
+	writel(0x00000000, base_addr + 0x8a4);
+	writel(0x00000000, base_addr + 0x8a8);
+	writel(0x00000000, base_addr + 0x8ac);
+	writel(0x00000000, base_addr + 0x8b0);
+	writel(0x00004040, base_addr + 0x800);
+	writel(0x00080200, base_addr + 0x814);
+	writel(0x00000003, base_addr + 0x838);
+	writel(0x00000020, base_addr + 0x83c);
+	writel(0x0000010a, base_addr + 0x980);
+	writel(0x0000010a, base_addr + 0xd80);
+	writel(0x0000010a, base_addr + 0x984);
+	writel(0x0000010a, base_addr + 0xd84);
+	writel(0x0000010a, base_addr + 0x988);
+	writel(0x0000010a, base_addr + 0xd88);
+	writel(0x0000010a, base_addr + 0x98c);
+	writel(0x0000010a, base_addr + 0xd8c);
+	writel(0x0000010a, base_addr + 0x990);
+	writel(0x0000010a, base_addr + 0xd90);
+	writel(0x0000010a, base_addr + 0x994);
+	writel(0x0000010a, base_addr + 0xd94);
+	writel(0x0000010a, base_addr + 0x998);
+	writel(0x0000010a, base_addr + 0xd98);
+	writel(0x0000010a, base_addr + 0x99c);
+	writel(0x0000010a, base_addr + 0xd9c);
+	writel(0x0000010a, base_addr + 0x9a0);
+	writel(0x0000010a, base_addr + 0xda0);
+	writel(0x0000010a, base_addr + 0x9a4);
+	writel(0x0000010a, base_addr + 0xda4);
+	writel(0x0000010a, base_addr + 0x9a8);
+	writel(0x0000010a, base_addr + 0xda8);
+	writel(0x0000010a, base_addr + 0x9ac);
+	writel(0x0000010a, base_addr + 0xdac);
+	writel(0x0000010a, base_addr + 0x9b0);
+	writel(0x0000010a, base_addr + 0xdb0);
+	writel(0x0000010a, base_addr + 0x9b4);
+	writel(0x0000010a, base_addr + 0xdb4);
+	writel(0x0000010a, base_addr + 0x9b8);
+	writel(0x0000010a, base_addr + 0xdb8);
+	writel(0x0000010a, base_addr + 0x9bc);
+	writel(0x0000010a, base_addr + 0xdbc);
+	writel(0x0000010a, base_addr + 0x9c0);
+	writel(0x0000010a, base_addr + 0xdc0);
+	writel(0x0000010a, base_addr + 0x9c4);
+	writel(0x0000010a, base_addr + 0xdc4);
+	writel(0x0000010a, base_addr + 0x9c8);
+	writel(0x0000010a, base_addr + 0xdc8);
+	writel(0x0000010a, base_addr + 0x9cc);
+	writel(0x0000010a, base_addr + 0xdcc);
+	writel(0x0000010a, base_addr + 0x9d0);
+	writel(0x0000010a, base_addr + 0xdd0);
+	writel(0x0000010a, base_addr + 0x9d4);
+	writel(0x0000010a, base_addr + 0xdd4);
+	writel(0x0000010a, base_addr + 0x9d8);
+	writel(0x0000010a, base_addr + 0xdd8);
+	writel(0x0000010a, base_addr + 0x9dc);
+	writel(0x0000010a, base_addr + 0xddc);
+	writel(0x0000010a, base_addr + 0x9e0);
+	writel(0x0000010a, base_addr + 0xde0);
+	writel(0x0000010a, base_addr + 0x9e4);
+	writel(0x0000010a, base_addr + 0xde4);
+	writel(0x0000010a, base_addr + 0x9e8);
+	writel(0x0000010a, base_addr + 0xde8);
+	writel(0x0000010a, base_addr + 0x9ec);
+	writel(0x0000010a, base_addr + 0xdec);
+	writel(0x0000010a, base_addr + 0x9f0);
+	writel(0x0000010a, base_addr + 0xdf0);
+	writel(0x0000010a, base_addr + 0x9f4);
+	writel(0x0000010a, base_addr + 0xdf4);
+	writel(0x0000010a, base_addr + 0x9f8);
+	writel(0x0000010a, base_addr + 0xdf8);
+	writel(0x0000010a, base_addr + 0x9fc);
+	writel(0x0000010a, base_addr + 0xdfc);
+	writel(0x0000010a, base_addr + 0xa00);
+	writel(0x0000010a, base_addr + 0xe00);
+	writel(0x0000010a, base_addr + 0xa04);
+	writel(0x0000010a, base_addr + 0xe04);
+	writel(0x0000010a, base_addr + 0xa08);
+	writel(0x0000010a, base_addr + 0xe08);
+	writel(0x0000010a, base_addr + 0xa0c);
+	writel(0x0000010a, base_addr + 0xe0c);
+	writel(0x08080000, base_addr + 0x850);
+	writel(0x08080000, base_addr + 0x854);
+	writel(0x08080000, base_addr + 0x858);
+	writel(0x08080000, base_addr + 0x85c);
+	writel(0x08080000, base_addr + 0x860);
+	writel(0x08080000, base_addr + 0x864);
+	writel(0x08080000, base_addr + 0x868);
+	writel(0x08080000, base_addr + 0x86c);
+	writel(0x08080000, base_addr + 0x870);
+	writel(0x20000000, base_addr + 0x820);
+	writel(0x40000000, base_addr + 0x820);
+	writel(0x80000000, base_addr + 0x820);
+	writel(0x1f000001, base_addr + 0x020);
 }
 
-void mvebu_dram_phy_init(void)
+void mvebu_dram_phy_init(struct mvebu_dram_config *dram_config)
 {
+	void __iomem *base_addr = dram_config->phy_base;
 	u32 reg;
-	reg = readl(0xf0020008);
+
+	reg = readl(base_addr + 0x8);
 	while (reg != 0x00001111)
-		reg = readl(0xf0020008);
+		reg = readl(base_addr + 0x8);
 }
diff --git a/drivers/ddr/mvebu_ddr.c b/drivers/ddr/mvebu_ddr.c
index 308da09..3cdce85 100644
--- a/drivers/ddr/mvebu_ddr.c
+++ b/drivers/ddr/mvebu_ddr.c
@@ -18,15 +18,47 @@
 
 #include <common.h>
 #include <asm/io.h>
+#include <fdtdec.h>
 #include <asm/arch-mvebu/ddr.h>
 #include <asm/arch-mvebu/mvebu.h>
+#include <asm/arch-mvebu/fdt.h>
 
-void static_dram_init(void)
+void static_dram_init(const void *blob)
 {
+	u32 node;
+	struct mvebu_dram_config dram_config;
+	struct mvebu_dram_config *config = &dram_config;
 	debug_enter();
-	mvebu_dram_mac_init();
-	mvebu_dram_phy_init();
 
-	printf("Static DRAM initialization is DONE..\n");
+	/* Get DDR MAC node from the FDT blob */
+	node = fdt_node_offset_by_compatible(blob, -1, fdtdec_get_compatible(COMPAT_MVEBU_DDR_MAC));
+	if (node == -1) {
+		error("No DDR MAC node found in FDT blob\n");
+		return;
+	}
+	/* Get the base address of the DDR MAC unit */
+	config->mac_base = (void *)fdt_get_regs_offs(blob, node, "reg");
+	if (config->mac_base == NULL) {
+		error("missing DDR MAC base address in DDR MAC node\n");
+		return;
+	}
+
+	/* Get DDR MAC node from the FDT blob */
+	node = fdt_node_offset_by_compatible(blob, -1, fdtdec_get_compatible(COMPAT_MVEBU_DDR_PHY));
+	if (node == -1) {
+		error("No DDR PHY node found in FDT blob\n");
+		return;
+	}
+	/* Get the base address of the DDR PHY unit */
+	config->phy_base = (void *)fdt_get_regs_offs(blob, node, "reg");
+	if (config->phy_base == NULL) {
+		error("missing DDR PHY base address in DDR PHY node\n");
+		return;
+	}
+
+	mvebu_dram_mac_init(config);
+	mvebu_dram_phy_init(config);
+
+	printf("Static DDR initialization is DONE..\n");
 	debug_exit();
 }
diff --git a/include/fdtdec.h b/include/fdtdec.h
index 4ca0185..3c2799e 100644
--- a/include/fdtdec.h
+++ b/include/fdtdec.h
@@ -141,6 +141,8 @@ enum fdt_compat_id {
 	COMPAT_MVEBU_THERMAL_SENSOR,
 	COMPAT_MVEBU_THERMAL_SENSOR_V2,
 	COMPAT_MVEBU_FLC,
+	COMPAT_MVEBU_DDR_MAC,
+	COMPAT_MVEBU_DDR_PHY,
 
 	COMPAT_COUNT,
 };
diff --git a/lib/fdtdec.c b/lib/fdtdec.c
index 626ea99..3e67c00 100644
--- a/lib/fdtdec.c
+++ b/lib/fdtdec.c
@@ -103,6 +103,8 @@ static const char * const compat_names[COMPAT_COUNT] = {
 	COMPAT(MVEBU_THERMAL_SENSOR, "marvell,thermal-sensor"),
 	COMPAT(MVEBU_THERMAL_SENSOR_V2, "marvell,thermal-sensor-v2"),
 	COMPAT(MVEBU_FLC, "marvell,mvebu-flc"),
+	COMPAT(MVEBU_DDR_MAC, "marvell,mvebu-ddr-mac"),
+	COMPAT(MVEBU_DDR_PHY, "marvell,mvebu-ddr-phy"),
 };
 
 const char *fdtdec_get_compatible(enum fdt_compat_id id)
-- 
1.9.1

