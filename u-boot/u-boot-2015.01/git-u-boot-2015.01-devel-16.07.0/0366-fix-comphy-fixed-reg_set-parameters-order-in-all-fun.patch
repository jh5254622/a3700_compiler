From 9f855fc85289ea613574282590aa0b208dda8b43 Mon Sep 17 00:00:00 2001
From: Shadi Ammouri <shadi@marvell.com>
Date: Thu, 27 Aug 2015 13:04:21 +0300
Subject: [PATCH 0366/1240] fix: comphy: fixed reg_set parameters order in all
 function calls

- Align AP806 and A38x Comphy code to use the same parameters
  order when calling reg_set (reg, data, mask).

Change-Id: I0386da80e7a6f5437788fc90d9b94052cddc982f
Signed-off-by: Shadi Ammouri <shadi@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/23236
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/include/asm/arch-mvebu/comphy.h |  2 +-
 drivers/phy/comphy_a38x.c                | 48 ++++++++++++++++----------------
 drivers/phy/comphy_pcie_config.c         | 12 ++++----
 3 files changed, 31 insertions(+), 31 deletions(-)

diff --git a/arch/arm/include/asm/arch-mvebu/comphy.h b/arch/arm/include/asm/arch-mvebu/comphy.h
index 7899522..f0d7ff5 100644
--- a/arch/arm/include/asm/arch-mvebu/comphy.h
+++ b/arch/arm/include/asm/arch-mvebu/comphy.h
@@ -84,7 +84,7 @@ struct chip_serdes_phy_config {
 	u32 comphy_mux_bitcount;
 };
 
-void reg_set(void __iomem *addr, u32 mask, u32 data);
+void reg_set(void __iomem *addr, u32 data, u32 mask);
 u32 comphy_init(const void *blob);
 
 #ifdef CONFIG_TARGET_ARMADA_38X
diff --git a/drivers/phy/comphy_a38x.c b/drivers/phy/comphy_a38x.c
index 63867d9..05c1569 100644
--- a/drivers/phy/comphy_a38x.c
+++ b/drivers/phy/comphy_a38x.c
@@ -92,7 +92,7 @@ static void comphy_mux_reg_write(struct comphy_mux_data *mux_data,
 		offset = lane * bitcount;
 		mask = (((1 << bitcount) - 1) << offset);
 		value = (comphy_mux_get_mux_value(mux_data, comphy_map_data->type, lane) << offset);
-		reg_set(comphy_selector_base, mask, value);
+		reg_set(comphy_selector_base, value, mask);
 	}
 	debug_exit();
 }
@@ -127,37 +127,37 @@ static int comphy_pcie_power_up(u32 pex_index, void __iomem *comphy_addr, void _
 
 	/* power up sequence */
 	debug("**** start of PCIe comphy power up sequence ****\n");
-	reg_set(comphy_addr + COMMON_PHY_CONFIGURATION1_REG, 0x3FC7F806, 0x4471804);
-	reg_set(comphy_addr + COMMON_PHY_CONFIGURATION2_REG, 0x5C, 0x58);
-	reg_set(comphy_addr + COMMON_PHY_CONFIGURATION4_REG, 0x3, 0x1);
-	reg_set(comphy_addr + COMMON_PHY_CONFIGURATION1_REG, 0x7800, 0x6000);
-	reg_set(hpipe_addr + HPIPE_RST_CLK_CTRL_REG, 0x3D, 0x35);
-	reg_set(hpipe_addr + HPIPE_GLOBAL_MISC_CTRL, 0xC0, 0x0);
-	reg_set(hpipe_addr + HPIPE_MISC_REG, 0x4C0, 0x80);
+	reg_set(comphy_addr + COMMON_PHY_CONFIGURATION1_REG, 0x4471804, 0x3FC7F806);
+	reg_set(comphy_addr + COMMON_PHY_CONFIGURATION2_REG, 0x58, 0x5C);
+	reg_set(comphy_addr + COMMON_PHY_CONFIGURATION4_REG, 0x1, 0x3);
+	reg_set(comphy_addr + COMMON_PHY_CONFIGURATION1_REG, 0x6000, 0x7800);
+	reg_set(hpipe_addr + HPIPE_RST_CLK_CTRL_REG, 0x35, 0x3D);
+	reg_set(hpipe_addr + HPIPE_GLOBAL_MISC_CTRL, 0x0, 0xC0);
+	reg_set(hpipe_addr + HPIPE_MISC_REG, 0x80, 0x4C0);
 	udelay(20);
 
 	/* TODO: Add configuration for 20Mhz */
 	/* configuration seq for REF_CLOCK_100MHz */
 	debug("**** start of PCIe comphy ref clock configuration ****\n");
-	reg_set(hpipe_addr + HPIPE_PWR_PLL_REG, 0x1F, 0x0);
-	reg_set(hpipe_addr + HPIPE_MISC_REG, 0x400, 0x0);
-	reg_set(hpipe_addr + HPIPE_GLOBAL_PM_CTRL, 0xFF, 0x1E);
-	reg_set(hpipe_addr + HPIPE_INTERFACE_REG, 0xC00, 0x400);
+	reg_set(hpipe_addr + HPIPE_PWR_PLL_REG, 0x0, 0x1F);
+	reg_set(hpipe_addr + HPIPE_MISC_REG, 0x0, 0x400);
+	reg_set(hpipe_addr + HPIPE_GLOBAL_PM_CTRL, 0x1E, 0xFF);
+	reg_set(hpipe_addr + HPIPE_INTERFACE_REG, 0x400, 0xC00);
 	udelay(20);
 
 	/* PEX - electrical configuration seq */
 	debug("**** start of PCIe electrical configuration sequence ****\n");
-	reg_set(hpipe_addr + HPIPE_G1_SETTINGS_0_REG, 0xF000, 0xB000);
-	reg_set(hpipe_addr + HPIPE_G1_SETTINGS_1_REG, 0x3FF, 0x3C9);
-	reg_set(hpipe_addr + HPIPE_G1_SETTINGS_3_REG, 0xFF, 0xCF);
-	reg_set(hpipe_addr + HPIPE_G2_SETTINGS_1_REG, 0x3FF, 0x3C9);
-	reg_set(hpipe_addr + HPIPE_G2_SETTINGS_3_REG, 0xFF, 0xAF);
+	reg_set(hpipe_addr + HPIPE_G1_SETTINGS_0_REG, 0xB000, 0xF000);
+	reg_set(hpipe_addr + HPIPE_G1_SETTINGS_1_REG, 0x3C9, 0x3FF);
+	reg_set(hpipe_addr + HPIPE_G1_SETTINGS_3_REG, 0xCF, 0xFF);
+	reg_set(hpipe_addr + HPIPE_G2_SETTINGS_1_REG, 0x3C9, 0x3FF);
+	reg_set(hpipe_addr + HPIPE_G2_SETTINGS_3_REG, 0xAF, 0xFF);
 	reg_set(hpipe_addr + HPIPE_G2_SETTINGS_4_REG, 0x300, 0x300);
 	reg_set(hpipe_addr + HPIPE_DFE_REG0, 0x8000, 0x8000);
-	reg_set(hpipe_addr + HPIPE_PCIE_REG1, 0xF80, 0xD00);
-	reg_set(hpipe_addr + HPIPE_PCIE_REG3, 0xFF00, 0xAF00);
+	reg_set(hpipe_addr + HPIPE_PCIE_REG1, 0xD00, 0xF80);
+	reg_set(hpipe_addr + HPIPE_PCIE_REG3, 0xAF00, 0xFF00);
 	reg_set(hpipe_addr + HPIPE_LANE_CFG4_REG, 0x8, 0x8);
-	reg_set(hpipe_addr + HPIPE_VTHIMPCAL_CTRL_REG, 0xFF00, 0x3000);
+	reg_set(hpipe_addr + HPIPE_VTHIMPCAL_CTRL_REG, 0x3000, 0xFF00);
 	udelay(20);
 
 	/* PEX - TX configuration sequence 2 */
@@ -167,15 +167,15 @@ static int comphy_pcie_power_up(u32 pex_index, void __iomem *comphy_addr, void _
 
 	/* PEX - TX configuration sequence 3 */
 	debug("**** start of PCIe TX configuration sequence 3 ****\n");
-	reg_set(hpipe_addr + HPIPE_PWR_CTR_REG, 0x401, 0x0);
+	reg_set(hpipe_addr + HPIPE_PWR_CTR_REG, 0x0, 0x401);
 	udelay(20000);
-	reg_set(hpipe_addr + HPIPE_RX_REG3, 0xFF, 0xDC);
+	reg_set(hpipe_addr + HPIPE_RX_REG3, 0xDC, 0xFF);
 	reg_set(hpipe_addr + HPIPE_RX_REG3, 0x100, 0x100);
-	reg_set(hpipe_addr + HPIPE_RX_REG3, 0x100, 0x0);
+	reg_set(hpipe_addr + HPIPE_RX_REG3, 0x0, 0x100);
 
 	/* PEX - TX configuration sequence 1 */
 	debug("**** start of PCIe TX configuration sequence 1 ****\n");
-	reg_set(hpipe_addr + HPIPE_RST_CLK_CTRL_REG, 0x1, 0x0);
+	reg_set(hpipe_addr + HPIPE_RST_CLK_CTRL_REG, 0x0, 0x1);
 	udelay(20000);
 
 	debug_exit();
diff --git a/drivers/phy/comphy_pcie_config.c b/drivers/phy/comphy_pcie_config.c
index ba6b386..7bda3a1 100644
--- a/drivers/phy/comphy_pcie_config.c
+++ b/drivers/phy/comphy_pcie_config.c
@@ -142,7 +142,7 @@ void comphy_pcie_config_set(u32 comphy_max_count, struct comphy_map *serdes_map)
 		if (serdes_map->type < PEX0 || serdes_map->type > PEX3)
 			continue;
 		pex_index = serdes_map->type - PEX0;
-		reg_set(PEX_CAPABILITIES_REG(pex_index), 0xf << 20, 0x4 << 20);
+		reg_set(PEX_CAPABILITIES_REG(pex_index), 0x4 << 20, 0xf << 20);
 
 		switch (serdes_map->type) {
 		case PEX0:
@@ -161,7 +161,7 @@ void comphy_pcie_config_set(u32 comphy_max_count, struct comphy_map *serdes_map)
 			break;
 		}
 	}
-	reg_set(SOC_CONTROL_REG, 0x3, pex_enable_offs);
+	reg_set(SOC_CONTROL_REG, pex_enable_offs, 0x3);
 	udelay(10000);
 
 	debug_exit();
@@ -202,9 +202,9 @@ void comphy_pcie_config_detect(u32 comphy_max_count, struct comphy_map *serdes_m
 		}
 
 		reg_data = (first_bus << PXSR_PEX_BUS_NUM_OFFS) & PXSR_PEX_BUS_NUM_MASK;
-		reg_set(PEX_STATUS_REG(pex_index), PXSR_PEX_BUS_NUM_MASK, reg_data);
+		reg_set(PEX_STATUS_REG(pex_index), reg_data, PXSR_PEX_BUS_NUM_MASK);
 		reg_data = (1 << PXSR_PEX_DEV_NUM_OFFS) & PXSR_PEX_DEV_NUM_MASK;
-		reg_set(PEX_STATUS_REG(pex_index), PXSR_PEX_DEV_NUM_MASK, reg_data);
+		reg_set(PEX_STATUS_REG(pex_index), reg_data, PXSR_PEX_DEV_NUM_MASK);
 		printf("PCIe - %d: Link is Gen1, check the EP capability\n", pex_index);
 
 		/* link is Gen1, check the EP capability */
@@ -245,9 +245,9 @@ void comphy_pcie_unit_general_config(u32 pex_index)
 	/* the following should be done for PEXx1 and for PEX by 4-for the first lane only */
 	reg_set(SOC_CONTROL_REG, 0x4000, 0x4000);
 	/* Setup link width bit[9:4] */
-	reg_set(PEX_LINK_CAPABILITIES_REG(pex_index), 0x3F0, 0x10);
+	reg_set(PEX_LINK_CAPABILITIES_REG(pex_index), 0x10, 0x3F0);
 	/* Setup maximum link speed bit[3:0] */
-	reg_set(PEX_LINK_CAPABILITIES_REG(pex_index), 0xF, 0x2);
+	reg_set(PEX_LINK_CAPABILITIES_REG(pex_index), 0x2, 0xF);
 	/* Setup common clock configuration bit[6] */
 	reg_set(PEX_LINK_CTRL_STATUS_REG(pex_index), 0x40, 0x40);
 
-- 
1.9.1

