From 5a078b960ea7deced8103b4c0bab3dcd4205df50 Mon Sep 17 00:00:00 2001
From: Shadi Ammouri <shadi@marvell.com>
Date: Mon, 16 Nov 2015 17:54:28 +0200
Subject: [PATCH 0503/1240] ddr: mck6: Control DDR bus width and size using
 control params

	- Set bus width & size accoring to user params.
	- Remove redundant writes to bus-width and size registers from the MAC
	  & PHY registers array.

Change-Id: I4b3602bd43dee66919440a6fd113960396ec05a6
Signed-off-by: Shadi Ammouri <shadi@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/24927
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
---
 arch/arm/include/asm/arch-mvebu/ddr.h | 12 ++++++++-
 drivers/ddr/ddr_mckinley6.c           | 47 ++++++++++++++++++++++++++++++++---
 drivers/ddr/mvebu_ddr.c               |  2 ++
 3 files changed, 57 insertions(+), 4 deletions(-)

diff --git a/arch/arm/include/asm/arch-mvebu/ddr.h b/arch/arm/include/asm/arch-mvebu/ddr.h
index bdd14c2..80767ec 100644
--- a/arch/arm/include/asm/arch-mvebu/ddr.h
+++ b/arch/arm/include/asm/arch-mvebu/ddr.h
@@ -19,11 +19,21 @@
 #ifndef _MVEBU_DDR_H_
 #define _MVEBU_DDR_H_
 
+/*
+** ecc_enabled - when true, DRAM ecc is enabled.
+** cs_count - Number of DRAM chip-selects.
+** bus_width - 16, 32 or 64 bit DDR.
+** size_mb - when != 0, override DDR size according to this value (in MB)
+*/
 struct mvebu_dram_config {
 	void __iomem *mac_base;
 	void __iomem *phy_base;
-	u32 ecc_enabled;
+
+	/* DRAM configuration options. */
+	bool ecc_enabled;
 	u32 cs_count;
+	u32 bus_width;
+	u32 size_mb;
 };
 
 void mvebu_dram_init(const void *blob);
diff --git a/drivers/ddr/ddr_mckinley6.c b/drivers/ddr/ddr_mckinley6.c
index 9ad37e3..b77470f 100644
--- a/drivers/ddr/ddr_mckinley6.c
+++ b/drivers/ddr/ddr_mckinley6.c
@@ -18,6 +18,7 @@
 
 #include <common.h>
 #include <asm/io.h>
+#include <asm/utils.h>
 #include <asm/arch-mvebu/mvebu.h>
 #include <asm/arch-mvebu/ddr.h>
 
@@ -26,6 +27,14 @@
 #define CMD_CH_ENABLE(c)	(1 << (28 + c))
 #define CMD_CS_MASK(m)		((m) << 24)
 
+#define MCK6_CTRL_0_REG		(0x44)
+#define CTRL_DATA_WIDTH_MASK	(0xF << 8)
+#define CTRL_DATA_WIDTH(w)	(((w) / 8) << 8)
+
+#define MCK6_MMAP0_LOW_CH0_REG	(0x200)
+#define MMAP_AREA_LEN_MASK	(0x1F << 16)
+#define MMAP_AREA_LEN(x)	((x) << 16)
+
 enum mvebu_mck_freq_support {
 	FREQ_650_HZ = 0,
 	MAX_HZ_SUPPORTED,
@@ -902,10 +911,8 @@ struct mvebu_mckinley_config mckinley_phy_config[] = {
 	{ 0x8c0, { 0xc1000000} },
 	{ 0x98 , { 0x0040004e} },
 	{ 0x108, { 0xffff0002} },
-	{ 0x200, { 0x00100001} },
 	{ 0x204, { 0x00000000} },
 	{ 0x220, { 0x11010642} },
-	{ 0x44 , { 0x00030300} },
 	{ 0x2c0, { 0x0000e000} },
 	{ 0x2c4, { 0x00000020} },
 	{ 0x300, { 0x00000709} },
@@ -1044,7 +1051,7 @@ void mvebu_dram_mac_init(struct mvebu_dram_config *dram_config)
 {
 	void __iomem *base_addr = dram_config->mac_base;
 	struct mvebu_mckinley_config *mac_config = &mckinley_mac_config[0];
-	u32 freq_indx;
+	u32 freq_indx, reg, idx, size;
 
 	debug_enter();
 	debug("Set bypass to clock gate: 0xF06f0098 - 0x0040004e\n");
@@ -1060,6 +1067,40 @@ void mvebu_dram_mac_init(struct mvebu_dram_config *dram_config)
 		debug("0x%p - 0x08%x\n", base_addr + mac_config->reg_offset, mac_config->values[freq_indx]);
 		writel(mac_config->values[freq_indx], base_addr + mac_config->reg_offset);
 	}
+
+	/* Override the above configurations, with user parameters. */
+	if (dram_config->bus_width != 0) {
+		/* DRAM width */
+		reg = readl(base_addr + MCK6_CTRL_0_REG);
+		reg &= ~CTRL_DATA_WIDTH_MASK;
+		reg |= CTRL_DATA_WIDTH(dram_config->bus_width);
+		writel(reg, base_addr + MCK6_CTRL_0_REG);
+		debug("DRAM width set to %d.\n", dram_config->bus_width);
+	}
+
+	if (dram_config->size_mb != 0) {
+		/* DRAM size */
+		reg = readl(base_addr + MCK6_MMAP0_LOW_CH0_REG);
+		reg &= ~(MMAP_AREA_LEN_MASK);
+
+		switch (dram_config->size_mb) {
+		case(384):
+		case(786):
+		case(1536):
+		case(3072):
+			reg |= MMAP_AREA_LEN(log_2_n_round_down(dram_config->size_mb / 384));
+			size = dram_config->size_mb;
+			break;
+		default:
+			idx = log_2_n_round_down(dram_config->size_mb / 8);
+			reg |= MMAP_AREA_LEN(idx + 7);
+			size = (1 << idx) * 8;
+			break;
+		}
+		writel(reg, base_addr + MCK6_MMAP0_LOW_CH0_REG);
+		debug("DRAM size set to %dMB.\n", size);
+	}
+
 	debug_exit();
 }
 
diff --git a/drivers/ddr/mvebu_ddr.c b/drivers/ddr/mvebu_ddr.c
index e6a75a5..072f90c 100644
--- a/drivers/ddr/mvebu_ddr.c
+++ b/drivers/ddr/mvebu_ddr.c
@@ -72,6 +72,8 @@ void mvebu_dram_init(const void *blob)
 
 	/* Use default DRAM params, till we get the values from DT. */
 	config->cs_count = 0;
+	config->bus_width = 0;
+	config->size_mb = 0;
 
 #ifdef CONFIG_MVEBU_STATIC_SUPPORT
 	static_dram_init(config);
-- 
1.9.1

