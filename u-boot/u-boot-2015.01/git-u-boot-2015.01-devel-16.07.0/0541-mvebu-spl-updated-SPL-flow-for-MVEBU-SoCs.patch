From 6ed7034a5167ee92eeb97dad3135a72530d8c2b0 Mon Sep 17 00:00:00 2001
From: Neta Zur <neta@marvell.com>
Date: Wed, 25 Nov 2015 15:57:45 +0200
Subject: [PATCH 0541/1240] mvebu: spl: updated SPL flow for MVEBU SoCs

- Before all the SoC have the same function of SPL
- This patch added early/late function for SPL initialization, and every SoC
  will implement the function as needed

Change-Id: Ibfb9ec63a23da1915dfb8a3df7b98d8bff470652
Signed-off-by: Neta Zur <neta@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/25271
Reviewed-by: Omri Itach <omrii@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
---
 arch/arm/cpu/armv7/armada38x/Makefile |  1 +
 arch/arm/cpu/armv7/armada38x/spl.c    | 49 ++++++++++++++++++
 arch/arm/cpu/armv8/armada8k/Makefile  |  1 +
 arch/arm/cpu/armv8/armada8k/spl.c     | 66 ++++++++++++++++++++++++
 arch/arm/cpu/armv8/armadalp/Makefile  |  1 +
 arch/arm/cpu/armv8/armadalp/spl.c     | 71 ++++++++++++++++++++++++++
 arch/arm/cpu/mvebu-common/spl.c       | 94 ++++-------------------------------
 arch/arm/include/asm/arch-mvebu/spl.h | 29 +++++++++++
 8 files changed, 229 insertions(+), 83 deletions(-)
 create mode 100644 arch/arm/cpu/armv7/armada38x/spl.c
 create mode 100644 arch/arm/cpu/armv8/armada8k/spl.c
 create mode 100644 arch/arm/cpu/armv8/armadalp/spl.c
 create mode 100644 arch/arm/include/asm/arch-mvebu/spl.h

diff --git a/arch/arm/cpu/armv7/armada38x/Makefile b/arch/arm/cpu/armv7/armada38x/Makefile
index ad290db..13a1761 100644
--- a/arch/arm/cpu/armv7/armada38x/Makefile
+++ b/arch/arm/cpu/armv7/armada38x/Makefile
@@ -17,4 +17,5 @@
 #
 
 obj-y += soc-init.o
+obj-y += spl.o
 obj-y += clock.o
diff --git a/arch/arm/cpu/armv7/armada38x/spl.c b/arch/arm/cpu/armv7/armada38x/spl.c
new file mode 100644
index 0000000..03c8fc6
--- /dev/null
+++ b/arch/arm/cpu/armv7/armada38x/spl.c
@@ -0,0 +1,49 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#include <common.h>
+#include <asm/arch-mvebu/spl.h>
+#include <asm/arch-mvebu/comphy.h>
+#include <asm/arch-mvebu/tools.h>
+#include <asm/arch-mvebu/ddr.h>
+#include <asm/arch-mvebu/mbus.h>
+
+void early_spl_init(void)
+{
+}
+
+void late_spl_init(void)
+{
+#ifdef CONFIG_MVEBU_COMPHY_SUPPORT
+	if (comphy_init(gd->fdt_blob))
+		error("COMPHY initialization failed\n");
+#endif
+#ifndef CONFIG_PALLADIUM
+	mvebu_dram_init(gd->fdt_blob);
+#endif
+
+#ifdef CONFIG_MVEBU_MBUS
+	init_mbus();
+#endif
+}
+
+void soc_spl_jump_uboot(void)
+{
+	/* Armada-8k return to bootrom */
+	return;
+}
diff --git a/arch/arm/cpu/armv8/armada8k/Makefile b/arch/arm/cpu/armv8/armada8k/Makefile
index 720e756..0240853 100644
--- a/arch/arm/cpu/armv8/armada8k/Makefile
+++ b/arch/arm/cpu/armv8/armada8k/Makefile
@@ -17,6 +17,7 @@
 #
 
 obj-y += soc.o
+obj-y += spl.o
 obj-y += clock.o
 obj-$(CONFIG_ARMV8_PSCI)	+= psci.o
 obj-$(CONFIG_MVEBU_LLC_ENABLE)	+= cache_llc.o
diff --git a/arch/arm/cpu/armv8/armada8k/spl.c b/arch/arm/cpu/armv8/armada8k/spl.c
new file mode 100644
index 0000000..b9b663f
--- /dev/null
+++ b/arch/arm/cpu/armv8/armada8k/spl.c
@@ -0,0 +1,66 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#include <common.h>
+#include <asm/arch-mvebu/spl.h>
+#include <asm/arch-mvebu/comphy.h>
+#include <asm/arch-mvebu/tools.h>
+#include <asm/arch-mvebu/ddr.h>
+#include <asm/arch-mvebu/dram_over_pci.h>
+#include <asm/arch-mvebu/ccu.h>
+#include <asm/arch-mvebu/rfu.h>
+#include <asm/arch-mvebu/flc.h>
+
+void early_spl_init(void)
+{
+}
+
+void late_spl_init(void)
+{
+#ifndef CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT
+/* when DDR over PCIE is enabled, add delay before and after the comphy_init
+   to verify that the PCIE card init done, before setting the comphy to avoid
+   collisions. and no ddr init require */
+#ifdef CONFIG_MVEBU_COMPHY_SUPPORT
+	if (comphy_init(gd->fdt_blob))
+		error("COMPHY initialization failed\n");
+#endif
+#ifdef CONFIG_MVEBU_SPL_DDR_SUPPORT
+	mvebu_dram_init(gd->fdt_blob);
+#endif
+
+#else /* CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT */
+	dram_over_pci_init(gd->fdt_blob);
+#endif /* CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT */
+
+#ifdef CONFIG_MVEBU_FLC
+#ifdef CONFIG_MVEBU_CCU
+	init_ccu(false);
+#endif
+#ifdef CONFIG_MVEBU_RFU
+	init_rfu(false);
+#endif
+	init_flc();
+#endif
+}
+
+void soc_spl_jump_uboot(void)
+{
+	/* Armada-8k return to bootrom */
+	return;
+}
diff --git a/arch/arm/cpu/armv8/armadalp/Makefile b/arch/arm/cpu/armv8/armadalp/Makefile
index 69eb250..67546a6 100644
--- a/arch/arm/cpu/armv8/armadalp/Makefile
+++ b/arch/arm/cpu/armv8/armadalp/Makefile
@@ -17,6 +17,7 @@
 #
 
 obj-y += soc-init.o
+obj-y += spl.o
 obj-y += clock.o
 obj-$(CONFIG_ARMV8_PSCI)	+= psci.o
 obj-$(CONFIG_MVEBU_A3700_IO_ADDR_DEC) += mvebu_io_addr_dec.o
diff --git a/arch/arm/cpu/armv8/armadalp/spl.c b/arch/arm/cpu/armv8/armadalp/spl.c
new file mode 100644
index 0000000..535eb8e
--- /dev/null
+++ b/arch/arm/cpu/armv8/armadalp/spl.c
@@ -0,0 +1,71 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#include <common.h>
+#include <asm/arch-mvebu/spl.h>
+#include <asm/arch-mvebu/comphy.h>
+#include <asm/arch-mvebu/io_addr_dec.h>
+#include <asm/arch-mvebu/clock.h>
+#include <asm/arch-mvebu/mbus.h>
+#include <asm/arch-mvebu/a3700_gpio.h>
+#include <asm/arch-mvebu/mvebu_misc.h>
+
+void (*ptr_uboot_start)(void);
+
+void early_spl_init(void)
+{
+#ifdef CONFIG_MVEBU_SPL_A3700_GPIO
+	mvebu_a3700_gpio();
+#endif
+
+	/* Clock should be enabeld before initialize the I/O units */
+#ifdef CONFIG_MVEBU_A3700_CLOCK
+	init_a3700_clock();
+#endif
+
+#ifdef CONFIG_MVEBU_A3700_MISC_INIT
+	misc_init_cci400();
+#endif
+}
+
+void late_spl_init(void)
+{
+#ifdef CONFIG_MVEBU_COMPHY_SUPPORT
+	if (comphy_init(gd->fdt_blob))
+		error("COMPHY initialization failed\n");
+#endif
+#ifdef CONFIG_MVEBU_SPL_DDR_SUPPORT
+	mvebu_dram_init(gd->fdt_blob);
+#endif
+
+#ifdef CONFIG_MVEBU_MBUS
+	init_mbus();
+#endif
+
+#ifdef CONFIG_MVEBU_A3700_IO_ADDR_DEC
+	init_a3700_io_addr_dec();
+#endif
+}
+
+void soc_spl_jump_uboot(void)
+{
+	debug("SPL processing done. Jumping to u-boot\n\n");
+	ptr_uboot_start = 0;
+	/* Jump from SPL to u-boot start address */
+	ptr_uboot_start();
+}
diff --git a/arch/arm/cpu/mvebu-common/spl.c b/arch/arm/cpu/mvebu-common/spl.c
index bf6f553..332a9d1 100644
--- a/arch/arm/cpu/mvebu-common/spl.c
+++ b/arch/arm/cpu/mvebu-common/spl.c
@@ -20,45 +20,11 @@
 #include <spl.h>
 #include <fdtdec.h>
 #include <asm/arch-mvebu/fdt.h>
-#include <asm/arch-mvebu/comphy.h>
-#include <asm/arch-mvebu/tools.h>
-#include <asm/arch-mvebu/ddr.h>
-#ifdef CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT
-#include <asm/arch-mvebu/dram_over_pci.h>
-#endif
-#ifdef CONFIG_MVEBU_CCU
-#include <asm/arch-mvebu/ccu.h>
-#endif
-#ifdef CONFIG_MVEBU_RFU
-#include <asm/arch-mvebu/rfu.h>
-#endif
-#ifdef CONFIG_MVEBU_FLC
-#include <asm/arch-mvebu/flc.h>
-#endif
-#ifdef CONFIG_MVEBU_A3700_IO_ADDR_DEC
-#include <asm/arch-mvebu/io_addr_dec.h>
-#endif
-#ifdef CONFIG_MVEBU_A3700_CLOCK
-#include <asm/arch-mvebu/clock.h>
-#endif
-#ifdef CONFIG_MVEBU_MBUS
-#include <asm/arch-mvebu/mbus.h>
-#endif
-#ifdef CONFIG_MVEBU_SPL_A3700_GPIO
-#include <asm/arch-mvebu/a3700_gpio.h>
-#endif
-#ifdef CONFIG_MVEBU_A3700_MISC_INIT
-#include <asm/arch-mvebu/mvebu_misc.h>
-#endif
+#include <asm/arch-mvebu/spl.h>
 
 #ifdef CONFIG_MVEBU_SPL_SAR_DUMP
 extern void mvebu_sar_dump_reg(void);
 #endif
-#ifdef CONFIG_TARGET_ARMADA_LP
-void (*ptr_uboot_start)(void);
-#endif
-
-DECLARE_GLOBAL_DATA_PTR;
 
 static int setup_fdt(void)
 {
@@ -82,67 +48,29 @@ void board_init_f(ulong silent)
 		gd->flags |= GD_FLG_SILENT;
 #endif
 
+	/* Update the pointer to the FDT */
 	setup_fdt();
-#ifdef CONFIG_MVEBU_SPL_A3700_GPIO
-	mvebu_a3700_gpio();
-#endif
 
-	/* Clock should be enabeld before initialize the I/O units */
-#ifdef CONFIG_MVEBU_A3700_CLOCK
-	init_a3700_clock();
-#endif
+	/* Init all drivers before UART initialization */
+	early_spl_init();
 
-#ifdef CONFIG_MVEBU_A3700_MISC_INIT
-	misc_init_cci400();
-#endif
+	/* UART init */
 	preloader_console_init();
 
 #ifdef CONFIG_MVEBU_SPL_SAR_DUMP
+	/* Sample at reset dump register */
 	mvebu_sar_dump_reg();
 #endif
 
-#ifndef CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT
-/* when DDR over PCIE is enabled, add delay before and after the comphy_init
-   to verify that the PCIE card init done, before setting the comphy to avoid
-   collisions. and no ddr init require */
-#ifdef CONFIG_MVEBU_COMPHY_SUPPORT
-	if (comphy_init(gd->fdt_blob))
-		error("COMPHY initialization failed\n");
-#endif
-#ifndef CONFIG_PALLADIUM
-	mvebu_dram_init(gd->fdt_blob);
-#endif
-
-#else /* CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT */
-	dram_over_pci_init(gd->fdt_blob);
-#endif /* CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT */
-
-#ifdef CONFIG_MVEBU_FLC
-#ifdef CONFIG_MVEBU_CCU
-	init_ccu(false);
-#endif
-#ifdef CONFIG_MVEBU_RFU
-	init_rfu(false);
-#endif
-	init_flc();
-#endif
-
-#ifdef CONFIG_MVEBU_MBUS
-	init_mbus();
-#endif
-#ifdef CONFIG_MVEBU_A3700_IO_ADDR_DEC
-	init_a3700_io_addr_dec();
-#endif
+	/* Init all relevant drivers (e.g. DDR, comphy...) */
+	late_spl_init();
 
 #ifdef CONFIG_MVEBU_SPL_MEMORY_TEST
+	/* Momory test */
 	if (run_memory_test())
 		printf("**** DRAM test failed ****\n");
 #endif
 
-#ifdef CONFIG_TARGET_ARMADA_LP
-	debug("SPL processing done. Jumping to u-boot\n\n");
-	ptr_uboot_start = 0;
-	/* Jump from SPL to u-boot start address */
-	ptr_uboot_start();
-#endif
+	/* Jump to U-Boot if needed */
+	soc_spl_jump_uboot();
 }
diff --git a/arch/arm/include/asm/arch-mvebu/spl.h b/arch/arm/include/asm/arch-mvebu/spl.h
new file mode 100644
index 0000000..24e88b5
--- /dev/null
+++ b/arch/arm/include/asm/arch-mvebu/spl.h
@@ -0,0 +1,29 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#ifndef _MVEBU_SPL_H_
+#define _MVEBU_SPL_H_
+
+/* API required from all SOCs */
+void early_spl_init(void);
+void late_spl_init(void);
+void soc_spl_jump_uboot(void);
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#endif /* _MVEBU_SPL_H_ */
-- 
1.9.1

