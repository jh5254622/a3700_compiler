From 69fbc658174caf62c1dc9d7e45daaf28bc835627 Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Tue, 24 Nov 2015 10:13:26 +0800
Subject: [PATCH 0577/1240] armada3700: gpio: support PCIe device reset

Support reset to PCIe device via GPIO.
The PCIe driver will call the routine in GPIO module to
reset PCIe device before retrain the PCIe link.
Modified the GPIO module.
    - only define base register offset in regs-base.h
    - define other test pin related register and offset in
     gpio header file
    - move gpio header file to armada3700 folder since it
      is difference with other SoC.
Change-Id: I4d62d2654b9a4635ee9d4743a35ee37461572103
Reviewed-on: http://vgitil04.il.marvell.com:8080/25200
Reviewed-by: Nadav Haklai <nadavh@marvell.com>
Tested-by: Nadav Haklai <nadavh@marvell.com>
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/25300
Reviewed-by: Wilson Ding <dingwei@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/cpu/armv8/armadalp/mvebu_gpio.c       | 88 ++++++++++++++++++--------
 arch/arm/cpu/armv8/armadalp/spl.c              |  2 +-
 arch/arm/include/asm/arch-armadalp/gpio.h      | 41 ++++++++++++
 arch/arm/include/asm/arch-armadalp/regs-base.h |  8 +--
 arch/arm/include/asm/arch-mvebu/a3700_gpio.h   | 24 -------
 drivers/pci/pci_advk.c                         |  4 ++
 6 files changed, 108 insertions(+), 59 deletions(-)
 create mode 100644 arch/arm/include/asm/arch-armadalp/gpio.h
 delete mode 100644 arch/arm/include/asm/arch-mvebu/a3700_gpio.h

diff --git a/arch/arm/cpu/armv8/armadalp/mvebu_gpio.c b/arch/arm/cpu/armv8/armadalp/mvebu_gpio.c
index e48be96..fbc7ef8 100644
--- a/arch/arm/cpu/armv8/armadalp/mvebu_gpio.c
+++ b/arch/arm/cpu/armv8/armadalp/mvebu_gpio.c
@@ -16,9 +16,40 @@
  * ***************************************************************************
  */
 
-
 #include <common.h>
 #include <asm/io.h>
+#include <asm/arch-armadalp/gpio.h>
+
+/*
+ * reset PCIe device
+ */
+void mvebu_a3700_reset_pcie_dev(void)
+{
+	u32 reg_val;
+
+	/* Set PCIe reset to 0 */
+	reg_val = readl(MVEBU_GPIO_SB_OUTPUT_VAL_REG);
+	reg_val &= ~(1 << MVEBU_GPIO_PCIE_RESET_OFF);
+	writel(reg_val, MVEBU_GPIO_SB_OUTPUT_VAL_REG);
+
+	/* Set to GPIO output mode */
+	reg_val = readl(MVEBU_GPIO_SB_OUTPUT_EN_REG);
+	reg_val |= (1 << MVEBU_GPIO_PCIE_RESET_OFF);
+	writel(reg_val, MVEBU_GPIO_SB_OUTPUT_EN_REG);
+
+	/* Set PCIe to GPIO mode */
+	reg_val = readl(MVEBU_GPIO_SB_SEL_REG);
+	reg_val |= (1 << MVEBU_GPIO_PCIE_EN_OFF);
+	writel(reg_val, MVEBU_GPIO_SB_SEL_REG);
+
+	/* typical delay for NIC to finish reset from NIC specification */
+	udelay(100);
+
+	/* Release PCIe reset */
+	reg_val = readl(MVEBU_GPIO_SB_OUTPUT_VAL_REG);
+	reg_val |= (1 << MVEBU_GPIO_PCIE_RESET_OFF);
+	writel(reg_val, MVEBU_GPIO_SB_OUTPUT_VAL_REG);
+}
 
 /*
  * mvebu_a3700_gpio
@@ -34,39 +65,40 @@ void mvebu_a3700_gpio(void)
 	u32 reg_val;
 
 	/*
-	  * NETA GPIO
-	  * on Palladium, RGMII is used
-	  */
-	reg_val = readl(MVEBU_A3700_GPIO_SB_SEL);
-	reg_val = reg_val & (~(1 << MVEBU_A3700_GPIO_RGMII_GPIO_EN_OFF));
-	writel(reg_val, MVEBU_A3700_GPIO_SB_SEL);
+	 * NETA GPIO
+	 * on Palladium, RGMII is used
+	 */
+	reg_val = readl(MVEBU_GPIO_SB_SEL_REG);
+	reg_val = reg_val & (~(1 << MVEBU_GPIO_RGMII_GPIO_EN_OFF));
+	writel(reg_val, MVEBU_GPIO_SB_SEL_REG);
 
 	/*
-	  * I2C, SPI GPIO
-	  */
-	reg_val = readl(MVEBU_A3700_GPIO_NB_SEL);
+	 * I2C, SPI GPIO
+	 */
+	reg_val = readl(MVEBU_GPIO_NB_SEL_REG);
 	/* enable GPIO for I2C */
-	reg_val = reg_val & (~(1 << MVEBU_A3700_GPIO_TW1_GPIO_EN_OFF));
+	reg_val = reg_val & (~(1 << MVEBU_GPIO_TW1_GPIO_EN_OFF));
 	/* enable GPIO for SPI
-	  * In A3700 Register Spec, it says that In North bridge GPIO configuration,
-	  * bit 18 is for SPI quad mode, but this is not accurate description.
-	  * In fact, bit 18 controls HOLD and WP pins for SPI, which is needed for all
-	  * SPI mode, single, dual, and quad.
-	*/
-	reg_val = reg_val & (~(1 << MVEBU_A3700_GPIO_SPI_GPIO_EN_OFF));
-	writel(reg_val, MVEBU_A3700_GPIO_NB_SEL);
+	 * In A3700 Register Spec, it says that In North bridge GPIO configuration,
+	 * bit 18 is for SPI quad mode, but this is not accurate description.
+	 * In fact, bit 18 controls HOLD and WP pins for SPI, which is needed for all
+	 * SPI mode, single, dual, and quad.
+	 */
+	reg_val = reg_val & (~(1 << MVEBU_GPIO_SPI_GPIO_EN_OFF));
+	writel(reg_val, MVEBU_GPIO_NB_SEL_REG);
 
 	/* set hiden GPIO setting for SPI
-	  * in north_bridge_test_pin_out_en register 13804,
-	  * bit 28 is the one which enables CS, CLK pin to be
-	  * output, need to set it to 1.
-	  * it is not in any document, but in UART boot mode,
-	  * CS, CLK pin will be twisted and be used for input.
-	  * which breaks SPI functionality.
-	  */
-	reg_val = readl(MVEBU_A3700_NB_TEST_PIN_OUTPUT_EN);
-	reg_val = reg_val | (1 << MVEBU_A3700_NB_TEST_PIN_OUTPUT_SPI_EN_OFF);
-	writel(reg_val, MVEBU_A3700_NB_TEST_PIN_OUTPUT_EN);
+	 * in north_bridge_test_pin_out_en register 13804,
+	 * bit 28 is the one which enables CS, CLK pin to be
+	 * output, need to set it to 1.
+	 * normally, it is needed only in UART boot mode,
+	 * but after trying all other modes, it is OK to set it.
+	 * later, we could read the SAR register, and do not
+	 * set it in other boot mode.
+	 */
+	reg_val = readl(MVEBU_GPIO_NB_OUTPUT_EN_HIGH_REG);
+	reg_val = reg_val | (1 << MVEBU_GPIO_NB_OUTPUT_SPI_EN_OFF);
+	writel(reg_val, MVEBU_GPIO_NB_OUTPUT_EN_HIGH_REG);
 
 	return;
 }
diff --git a/arch/arm/cpu/armv8/armadalp/spl.c b/arch/arm/cpu/armv8/armadalp/spl.c
index 535eb8e..6d8ba2f 100644
--- a/arch/arm/cpu/armv8/armadalp/spl.c
+++ b/arch/arm/cpu/armv8/armadalp/spl.c
@@ -22,7 +22,7 @@
 #include <asm/arch-mvebu/io_addr_dec.h>
 #include <asm/arch-mvebu/clock.h>
 #include <asm/arch-mvebu/mbus.h>
-#include <asm/arch-mvebu/a3700_gpio.h>
+#include <asm/arch-armadalp/gpio.h>
 #include <asm/arch-mvebu/mvebu_misc.h>
 
 void (*ptr_uboot_start)(void);
diff --git a/arch/arm/include/asm/arch-armadalp/gpio.h b/arch/arm/include/asm/arch-armadalp/gpio.h
new file mode 100644
index 0000000..dbf448f
--- /dev/null
+++ b/arch/arm/include/asm/arch-armadalp/gpio.h
@@ -0,0 +1,41 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#ifndef _MVEBU_GPIO_H_
+#define _MVEBU_GPIO_H_
+
+#define MVEBU_GPIO_NB_OUTPUT_EN_REG		(MVEBU_GPIO_NB_REG_BASE)
+#define MVEBU_GPIO_NB_OUTPUT_EN_HIGH_REG	(MVEBU_GPIO_NB_REG_BASE + 0x4)
+#define MVEBU_GPIO_NB_OUTPUT_SPI_EN_OFF		(28)/* This is hidden bit which is reserved in function spec */
+#define MVEBU_GPIO_NB_OUTPUT_VAL_REG		(MVEBU_GPIO_NB_REG_BASE + 0x18)
+#define MVEBU_GPIO_NB_SEL_REG			(MVEBU_GPIO_NB_REG_BASE + 0x30)
+#define MVEBU_GPIO_TW1_GPIO_EN_OFF		(10)
+#define MVEBU_GPIO_SPI_GPIO_EN_OFF		(18)
+
+#define MVEBU_GPIO_SB_OUTPUT_EN_REG		(MVEBU_GPIO_SB_REG_BASE)
+#define MVEBU_GPIO_SB_OUTPUT_VAL_REG		(MVEBU_GPIO_SB_REG_BASE + 0x18)
+#define MVEBU_GPIO_PCIE_RESET_OFF		(3)
+#define MVEBU_GPIO_SB_SEL_REG			(MVEBU_GPIO_SB_REG_BASE + 0x30)
+#define MVEBU_GPIO_RGMII_GPIO_EN_OFF		(3)
+#define MVEBU_GPIO_PCIE_EN_OFF			(4)
+
+
+void mvebu_a3700_reset_pcie_dev(void);
+void mvebu_a3700_gpio(void);
+
+#endif /* _MVEBU_GPIO_H_ */
diff --git a/arch/arm/include/asm/arch-armadalp/regs-base.h b/arch/arm/include/asm/arch-armadalp/regs-base.h
index 681e1d6..e063f99 100644
--- a/arch/arm/include/asm/arch-armadalp/regs-base.h
+++ b/arch/arm/include/asm/arch-armadalp/regs-base.h
@@ -44,12 +44,8 @@
 #define MVEBU_CCI_S3_SNOOP_CTRL_REG	(MVEBU_CCI_BASE + 0x4000)
 
 /* GPIO register base address */
-#define MVEBU_A3700_GPIO_SB_SEL (MVEBU_REGS_BASE + 0x18830)
-#define MVEBU_A3700_GPIO_RGMII_GPIO_EN_OFF (3)
-
-#define MVEBU_A3700_GPIO_NB_SEL (MVEBU_REGS_BASE + 0x13830)
-#define MVEBU_A3700_GPIO_TW1_GPIO_EN_OFF (10)
-#define MVEBU_A3700_GPIO_SPI_GPIO_EN_OFF (18)
+#define MVEBU_GPIO_NB_REG_BASE	(MVEBU_REGS_BASE + 0x13800)
+#define MVEBU_GPIO_SB_REG_BASE	(MVEBU_REGS_BASE + 0x18800)
 
 #define MVEBU_A3700_NB_TEST_PIN_OUTPUT_EN (MVEBU_REGS_BASE + 0x13804)
 #define MVEBU_A3700_NB_TEST_PIN_OUTPUT_SPI_EN_OFF (28)
diff --git a/arch/arm/include/asm/arch-mvebu/a3700_gpio.h b/arch/arm/include/asm/arch-mvebu/a3700_gpio.h
deleted file mode 100644
index 87e7ffe..0000000
--- a/arch/arm/include/asm/arch-mvebu/a3700_gpio.h
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * ***************************************************************************
- * Copyright (C) 2015 Marvell International Ltd.
- * ***************************************************************************
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License as published by the Free
- * Software Foundation, either version 2 of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * ***************************************************************************
- */
-
-#ifndef _A3700_GPIO_H_
-#define _A3700_GPIO_H_
-
-void mvebu_a3700_gpio(void);
-
-#endif /* _A3700_GPIO_H_ */
diff --git a/drivers/pci/pci_advk.c b/drivers/pci/pci_advk.c
index c17463f..63a32d9 100644
--- a/drivers/pci/pci_advk.c
+++ b/drivers/pci/pci_advk.c
@@ -30,6 +30,7 @@
 #include <asm/arch/pcie-core.h>
 #include <pci.h>
 #include <asm/arch-mvebu/fdt.h>
+#include <asm/arch-armadalp/gpio.h>
 
 /* #define DEBUG */
 /* #define DEBUG_CFG_CYCLE */
@@ -324,6 +325,9 @@ static int advk_pcie_init(int host_id, void __iomem *reg_base, struct pcie_win *
 
 	memset(hose, 0, sizeof(hose));
 
+	/* reset PCIe device in RC mode */
+	mvebu_a3700_reset_pcie_dev();
+
 	/* Enable PU */
 	state = readl(PCIE_CORE_CTRL_REG_ADDR(reg_base, PCIE_CORE_PHY_REF_CLK_REG));
 	state |= PCIE_CORE_EN_PU;
-- 
1.9.1

