From 5bd77639e40bdcc4c4dc02cf3c6168f1a002d0bd Mon Sep 17 00:00:00 2001
From: Shadi Ammouri <shadi@marvell.com>
Date: Thu, 7 Jan 2016 08:42:16 +0200
Subject: [PATCH 0655/1240] nand: a38x: Enable pxa3xx for A38x

	- Driver tested on A38x-Z1-DB, to work with 4KB page and 4bit ECC.
	- Still no supprot for FDT, will be added in a subsequent patch.

Change-Id: I353ba0efab1d8706af21eaecf731216e64ae9161
Signed-off-by: Shadi Ammouri <shadi@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/26611
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/cpu/armv7/armada38x/Makefile   |  1 +
 arch/arm/cpu/armv7/armada38x/clock.c    |  8 ---
 arch/arm/cpu/armv7/armada38x/nand.c     | 93 +++++++++++++++++++++++++++++++++
 arch/arm/cpu/armv7/armada38x/soc-init.c |  7 ++-
 arch/arm/include/asm/arch-mvebu/nand.h  | 21 ++++++++
 drivers/mtd/nand/pxa3xx_nand.c          |  2 +
 6 files changed, 123 insertions(+), 9 deletions(-)
 create mode 100644 arch/arm/cpu/armv7/armada38x/nand.c
 create mode 100644 arch/arm/include/asm/arch-mvebu/nand.h

diff --git a/arch/arm/cpu/armv7/armada38x/Makefile b/arch/arm/cpu/armv7/armada38x/Makefile
index 13a1761..94a0ddc 100644
--- a/arch/arm/cpu/armv7/armada38x/Makefile
+++ b/arch/arm/cpu/armv7/armada38x/Makefile
@@ -19,3 +19,4 @@
 obj-y += soc-init.o
 obj-y += spl.o
 obj-y += clock.o
+obj-y += nand.o
diff --git a/arch/arm/cpu/armv7/armada38x/clock.c b/arch/arm/cpu/armv7/armada38x/clock.c
index e5c4440..e69c204 100644
--- a/arch/arm/cpu/armv7/armada38x/clock.c
+++ b/arch/arm/cpu/armv7/armada38x/clock.c
@@ -47,14 +47,6 @@ u32 soc_timer_clk_get(void)
 	return 800000000;
 }
 
-
-#ifdef CONFIG_NAND_PXA3XX
-unsigned long mvebu_get_nand_clock(void)
-{
-	return 0;
-}
-#endif
-
 u32 get_fdt_tclk(const void *blob, int node)
 {
 	u32 tclk;
diff --git a/arch/arm/cpu/armv7/armada38x/nand.c b/arch/arm/cpu/armv7/armada38x/nand.c
new file mode 100644
index 0000000..372e0c9
--- /dev/null
+++ b/arch/arm/cpu/armv7/armada38x/nand.c
@@ -0,0 +1,93 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#include <common.h>
+#include <fdtdec.h>
+#include <asm/io.h>
+
+#define CORE_DIV_CLK_CTRL(x)			(MVEBU_REGS_BASE + 0xe4250 + (x * 4))
+#define CORE_DIVCLK_RELOAD_FORCE_OFFS           0
+#define CORE_DIVCLK_RELOAD_FORCE_MASK           (0xFF << CORE_DIVCLK_RELOAD_FORCE_OFFS)
+#define CORE_DIVCLK_RELOAD_FORCE_VAL            (0x2 << CORE_DIVCLK_RELOAD_FORCE_OFFS)
+
+#define NAND_ECC_DIVCKL_RATIO_OFFS              8
+#define NAND_ECC_DIVCKL_RATIO_MASK              (0x3F << NAND_ECC_DIVCKL_RATIO_OFFS)
+
+#define CORE_DIVCLK_RELOAD_RATIO_OFFS           8
+#define CORE_DIVCLK_RELOAD_RATIO_MASK           (1 << CORE_DIVCLK_RELOAD_RATIO_OFFS)
+
+#define PUP_EN_REG                              (MVEBU_REGS_BASE + 0x1864C)
+#define SOC_DEV_MUX_REG                         (MVEBU_REGS_BASE + 0x18208)
+
+#define NAND_ECC_REF_CLOCK			(1000000000UL)	/* 1GHz */
+#define NAND_ECC_CLOCK_DIV			(4)	/* 100MHz */
+
+void nand_clock_init(void)
+{
+	int divider = NAND_ECC_CLOCK_DIV;
+	u32 val;
+
+	/* Enable NAND Flash PUP */
+	val = readl(PUP_EN_REG);
+	val |= 0x10;
+	writel(val, PUP_EN_REG);
+
+	val = readl(SOC_DEV_MUX_REG);
+	/* NAND flash enable */
+	val |= 0x1;
+	/* Enable arbitration between device and NAND */
+	val |= (1 << 27);
+	writel(val, SOC_DEV_MUX_REG);
+
+	/* Set the division ratio of ECC Clock 0x00018748[13:8] (by default it's double of core clock) */
+	val = readl(CORE_DIV_CLK_CTRL(1));
+
+	val &= ~(NAND_ECC_DIVCKL_RATIO_MASK);
+	val |= (divider << NAND_ECC_DIVCKL_RATIO_OFFS);
+	writel(val, CORE_DIV_CLK_CTRL(1));
+
+	/* Set reload force of ECC clock 0x00018740[7:0] to 0x2 (meaning you will force only the ECC clock) */
+	val = readl(CORE_DIV_CLK_CTRL(0));
+	val &= ~(CORE_DIVCLK_RELOAD_FORCE_MASK);
+	val |= CORE_DIVCLK_RELOAD_FORCE_VAL;
+	writel(val, CORE_DIV_CLK_CTRL(0));
+
+	/* Set reload ratio bit 0x00018740[8] to 1'b1 */
+	val = readl(CORE_DIV_CLK_CTRL(0));
+	val |= CORE_DIVCLK_RELOAD_RATIO_MASK;
+	writel(val, CORE_DIV_CLK_CTRL(0));
+	mdelay(1); /*  msec */
+
+	/* Set reload ratio bit 0x00018740[8] to 0'b1 */
+	val = readl(CORE_DIV_CLK_CTRL(0));
+	val &= ~CORE_DIVCLK_RELOAD_RATIO_MASK;
+	writel(val, CORE_DIV_CLK_CTRL(0));
+}
+
+#ifdef CONFIG_NAND_PXA3XX
+/* Needed by pxa3xx_nand driver */
+unsigned long mvebu_get_nand_clock(void)
+{
+	int divider = NAND_ECC_CLOCK_DIV;
+
+	/* Return calculated nand clock frequency */
+	return NAND_ECC_REF_CLOCK/(2 * divider);
+}
+#endif /* CONFIG_NAND_PXA3XX */
+
+
diff --git a/arch/arm/cpu/armv7/armada38x/soc-init.c b/arch/arm/cpu/armv7/armada38x/soc-init.c
index 6ebc6cb..9b3444b 100644
--- a/arch/arm/cpu/armv7/armada38x/soc-init.c
+++ b/arch/arm/cpu/armv7/armada38x/soc-init.c
@@ -23,6 +23,7 @@
 #include <asm/arch-mvebu/soc.h>
 #include <asm/arch-mvebu/mpp.h>
 #include <asm/arch-mvebu/pinctl.h>
+#include <asm/arch-mvebu/nand.h>
 
 #define MBUS_SDRAM_WIN_ENABLE			0x1
 #define MBUS_SDRAM_BASE_REG(win)		(MVEBU_ADEC_BASE + 0x180 + (win * 0x8))
@@ -32,6 +33,7 @@
 
 int a38x_configure_mpp(void)
 {
+	mvebu_pinctl_probe();
 #ifdef CONFIG_MVEBU_MPP_BUS
 #ifdef CONFIG_MVEBU_NAND_BOOT
 	mpp_enable_bus("nand");
@@ -48,7 +50,10 @@ int soc_early_init_f(void)
 {
 	a38x_configure_mpp();
 
-	mvebu_pinctl_probe();
+#ifdef CONFIG_CMD_NAND
+	nand_clock_init();
+#endif /* CONFIG_CMD_NAND */
+
 	return 0;
 }
 
diff --git a/arch/arm/include/asm/arch-mvebu/nand.h b/arch/arm/include/asm/arch-mvebu/nand.h
new file mode 100644
index 0000000..051b2b2
--- /dev/null
+++ b/arch/arm/include/asm/arch-mvebu/nand.h
@@ -0,0 +1,21 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+/* Nand related functions. */
+void nand_clock_init(void);
+unsigned long mvebu_get_nand_clock(void);
diff --git a/drivers/mtd/nand/pxa3xx_nand.c b/drivers/mtd/nand/pxa3xx_nand.c
index d5e493d..23e1509 100644
--- a/drivers/mtd/nand/pxa3xx_nand.c
+++ b/drivers/mtd/nand/pxa3xx_nand.c
@@ -18,6 +18,8 @@
 #include <linux/types.h>
 #include <asm/arch-mvebu/clock.h>
 #include <asm/arch-mvebu/fdt.h>
+#include <asm/arch-mvebu/nand.h>
+
 #include "pxa3xx_nand.h"
 
 DECLARE_GLOBAL_DATA_PTR;
-- 
1.9.1

