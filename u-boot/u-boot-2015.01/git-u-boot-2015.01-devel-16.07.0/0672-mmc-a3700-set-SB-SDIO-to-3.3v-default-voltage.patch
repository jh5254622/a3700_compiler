From f785174ad432dd866e6d8b0c733e913ed966f771 Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Tue, 12 Jan 2016 05:44:38 +0800
Subject: [PATCH 0672/1240] mmc: a3700: set SB SDIO to 3.3v default voltage

1. Set SB SDIO default voltage to 3.3v via GPIO
2. Support voltage switch between 3.3v and 1.8v in Xenon driver.
Since currently the GPIO module is still not implemented
in u-boot, an API is defined in mvebu_gpio.c to be called
by Xenon driver.
Once the GPIO module is done, this interface will be modified,
the Xenon driver will implement a routine itself to set
voltage by calling GPIO API.

Change-Id: Idc23f58e1062ef1420d69944c49aabb487ce6a0e
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/26706
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
---
 arch/arm/cpu/armv8/armadalp/mvebu_gpio.c  | 42 +++++++++++++++++++++++++++++++
 arch/arm/include/asm/arch-armadalp/gpio.h |  6 ++++-
 drivers/mmc/xenon_mmc.c                   |  4 +++
 3 files changed, 51 insertions(+), 1 deletion(-)

diff --git a/arch/arm/cpu/armv8/armadalp/mvebu_gpio.c b/arch/arm/cpu/armv8/armadalp/mvebu_gpio.c
index 706d372..bdd15cb 100644
--- a/arch/arm/cpu/armv8/armadalp/mvebu_gpio.c
+++ b/arch/arm/cpu/armv8/armadalp/mvebu_gpio.c
@@ -52,6 +52,45 @@ void mvebu_reset_pcie_dev(void)
 }
 
 /*
+ * initialize SB SDIO device
+ */
+void mvebu_init_sdio(void)
+{
+	u32 reg_val;
+
+	/* Set SDIO to 0 which is 3.3v */
+	reg_val = readl(MVEBU_GPIO_SB_OUTPUT_VAL_REG);
+	reg_val &= ~(1 << MVEBU_GPIO_SDIO_VOLTAGE_OFF);
+	writel(reg_val, MVEBU_GPIO_SB_OUTPUT_VAL_REG);
+
+	/* Set to GPIO output mode */
+	reg_val = readl(MVEBU_GPIO_SB_OUTPUT_EN_REG);
+	reg_val |= (1 << MVEBU_GPIO_SDIO_VOLTAGE_OFF);
+	writel(reg_val, MVEBU_GPIO_SB_OUTPUT_EN_REG);
+
+	/* Set SDIO to GPIO mode */
+	reg_val = readl(MVEBU_GPIO_SB_SEL_REG);
+	reg_val |= (1 << MVEBU_GPIO_SB_SDIO_EN_OFF);
+	writel(reg_val, MVEBU_GPIO_SB_SEL_REG);
+}
+
+/*
+ * set SB SDIO device
+ */
+void mvebu_set_sdio(int voltage)
+{
+	u32 reg_val;
+
+	/* Set SDIO to 0 which is 3.3v */
+	reg_val = readl(MVEBU_GPIO_SB_OUTPUT_VAL_REG);
+	if (MVEBU_GPIO_SDIO_VOLTAGE_1_8V == voltage)
+		reg_val |= (1 << MVEBU_GPIO_SDIO_VOLTAGE_OFF);
+	else
+		reg_val &= ~(1 << MVEBU_GPIO_SDIO_VOLTAGE_OFF);
+	writel(reg_val, MVEBU_GPIO_SB_OUTPUT_VAL_REG);
+}
+
+/*
  * mvebu_init_gpio
  *
  * This function sets GPIO configuration for Armada3700
@@ -100,5 +139,8 @@ void mvebu_init_gpio(void)
 	reg_val = reg_val | (1 << MVEBU_GPIO_NB_OUTPUT_SPI_EN_OFF);
 	writel(reg_val, MVEBU_GPIO_NB_OUTPUT_EN_HIGH_REG);
 
+	/* set SB SDIO to 3.3v by default */
+	mvebu_init_sdio();
+
 	return;
 }
diff --git a/arch/arm/include/asm/arch-armadalp/gpio.h b/arch/arm/include/asm/arch-armadalp/gpio.h
index 4edb611..c4e69d1 100644
--- a/arch/arm/include/asm/arch-armadalp/gpio.h
+++ b/arch/arm/include/asm/arch-armadalp/gpio.h
@@ -30,11 +30,15 @@
 #define MVEBU_GPIO_SB_OUTPUT_EN_REG		(MVEBU_GPIO_SB_REG_BASE)
 #define MVEBU_GPIO_SB_OUTPUT_VAL_REG		(MVEBU_GPIO_SB_REG_BASE + 0x18)
 #define MVEBU_GPIO_PCIE_RESET_OFF		(3)
+#define MVEBU_GPIO_SDIO_VOLTAGE_3_3V		(0)
+#define MVEBU_GPIO_SDIO_VOLTAGE_1_8V		(1)
+#define MVEBU_GPIO_SDIO_VOLTAGE_OFF		(22)
 #define MVEBU_GPIO_SB_SEL_REG			(MVEBU_GPIO_SB_REG_BASE + 0x30)
+#define MVEBU_GPIO_SB_SDIO_EN_OFF		(2)
 #define MVEBU_GPIO_RGMII_GPIO_EN_OFF		(3)
 #define MVEBU_GPIO_PCIE_EN_OFF			(4)
 
-
+void mvebu_set_sdio(int voltage);
 void mvebu_reset_pcie_dev(void);
 void mvebu_init_gpio(void);
 
diff --git a/drivers/mmc/xenon_mmc.c b/drivers/mmc/xenon_mmc.c
index 1e45b61..9aacc52 100644
--- a/drivers/mmc/xenon_mmc.c
+++ b/drivers/mmc/xenon_mmc.c
@@ -37,6 +37,7 @@
 #include <xenon_mmc.h>
 #include <linux/sizes.h>
 #include <asm/arch-mvebu/mvebu.h>
+#include <asm/arch-armadalp/gpio.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -293,14 +294,17 @@ static void xenon_mmc_set_power(struct xenon_mmc_cfg *mmc_cfg, u32 vcc, u32 vccq
 	switch (vcc) {
 	case MMC_VDD_165_195:
 		pwr = SDHCI_POWER_180;
+		mvebu_set_sdio(MVEBU_GPIO_SDIO_VOLTAGE_1_8V);
 		break;
 	case MMC_VDD_29_30:
 	case MMC_VDD_30_31:
 		pwr = SDHCI_POWER_300;
+		mvebu_set_sdio(MVEBU_GPIO_SDIO_VOLTAGE_3_3V);
 		break;
 	case MMC_VDD_32_33:
 	case MMC_VDD_33_34:
 		pwr = SDHCI_POWER_330;
+		mvebu_set_sdio(MVEBU_GPIO_SDIO_VOLTAGE_3_3V);
 		break;
 	default:
 		error("Does not support power mode(0x%X)\n", vcc);
-- 
1.9.1

