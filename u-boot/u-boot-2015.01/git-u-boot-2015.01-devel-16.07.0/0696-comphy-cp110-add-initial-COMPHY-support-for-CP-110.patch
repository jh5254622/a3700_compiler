From 4b12ad8e2545045ee936732b1fa5618db43d23df Mon Sep 17 00:00:00 2001
From: Hanna Hawa <hannah@marvell.com>
Date: Mon, 18 Jan 2016 13:46:10 +0200
Subject: [PATCH 0696/1240] comphy: cp110: add initial COMPHY support for
 CP-110

- This is infrastructure COMPHY support for CP-110
- Add stub function for PCIe, SATA, and USB

Change-Id: I51545028b8a6503d4eb648afca29abe8628a1918
Signed-off-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/26839
Reviewed-by: Haim Boot <hayim@marvell.com>
---
 arch/arm/include/asm/arch-mvebu/comphy.h |   1 +
 drivers/phy/Makefile                     |   1 +
 drivers/phy/comphy_core.c                |   4 +-
 drivers/phy/comphy_cp110.c               | 114 +++++++++++++++++++++++++++++++
 include/fdtdec.h                         |   1 +
 lib/fdtdec.c                             |   1 +
 6 files changed, 119 insertions(+), 3 deletions(-)
 create mode 100644 drivers/phy/comphy_cp110.c

diff --git a/arch/arm/include/asm/arch-mvebu/comphy.h b/arch/arm/include/asm/arch-mvebu/comphy.h
index d7a3a27..888be5c 100644
--- a/arch/arm/include/asm/arch-mvebu/comphy.h
+++ b/arch/arm/include/asm/arch-mvebu/comphy.h
@@ -96,6 +96,7 @@ u32 comphy_init(const void *blob);
 int comphy_a38x_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy_map *comphy_map_data);
 #elif defined(CONFIG_TARGET_ARMADA_8K)
 int comphy_ap806_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy_map *serdes_map);
+int comphy_cp110_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy_map *serdes_map);
 #elif defined(CONFIG_TARGET_ARMADA_LP)
 int comphy_a3700_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy_map *serdes_map);
 #endif
diff --git a/drivers/phy/Makefile b/drivers/phy/Makefile
index bea054f..a225d5a 100644
--- a/drivers/phy/Makefile
+++ b/drivers/phy/Makefile
@@ -2,4 +2,5 @@ obj-y += comphy_core.o
 obj-$(CONFIG_TARGET_ARMADA_38X) += comphy_a38x.o
 obj-$(CONFIG_TARGET_ARMADA_38X) += comphy_a38x_pcie_config.o
 obj-$(CONFIG_TARGET_ARMADA_8K) += comphy_ap806_z1.o
+obj-$(CONFIG_TARGET_ARMADA_8K) += comphy_cp110.o
 obj-$(CONFIG_TARGET_ARMADA_LP) += comphy_a3700.o
diff --git a/drivers/phy/comphy_core.c b/drivers/phy/comphy_core.c
index 17bb913..ebc5958 100644
--- a/drivers/phy/comphy_core.c
+++ b/drivers/phy/comphy_core.c
@@ -33,9 +33,7 @@ struct chip_serdes_phy_config chip_config[] = {
 #ifdef CONFIG_TARGET_ARMADA_8K
 	{.compat = COMPAT_COMPHY_AP806,
 	 .ptr_comphy_chip_init = comphy_ap806_init },
-#endif
-#ifdef CONFIG_TARGET_CP110
-	{.compat = CP110,
+	{.compat = COMPAT_COMPHY_CP110,
 	 .ptr_comphy_chip_init = comphy_cp110_init },
 #endif
 #ifdef CONFIG_TARGET_ARMADA_LP
diff --git a/drivers/phy/comphy_cp110.c b/drivers/phy/comphy_cp110.c
new file mode 100644
index 0000000..1b29602
--- /dev/null
+++ b/drivers/phy/comphy_cp110.c
@@ -0,0 +1,114 @@
+/*
+* ***************************************************************************
+* Copyright (C) 2015 Marvell International Ltd.
+* ***************************************************************************
+* This program is free software: you can redistribute it and/or modify it
+* under the terms of the GNU General Public License as published by the Free
+* Software Foundation, either version 2 of the License, or any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program.  If not, see <http://www.gnu.org/licenses/>.
+* ***************************************************************************
+*/
+
+/*#define DEBUG */
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch-mvebu/comphy.h>
+#include <asm/arch-mvebu/comphy_hpipe.h>
+#include <asm/arch-mvebu/mvebu.h>
+
+#define HPIPE_ADDR(base, lane)		(base + 0x800 * lane)
+
+static void comphy_mux_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy_map *comphy_map_data)
+{
+	debug_enter();
+	printf("COMPHY mux init\n");
+	debug_exit();
+}
+
+static int comphy_pcie_power_up(u32 lane, u32 pcie_by4, void __iomem *hpipe_addr)
+{
+	debug_enter();
+	debug("PCIe power UP sequence\n");
+	debug_exit();
+	return 0;
+}
+
+static int comphy_usb3_power_up(u32 lane, void __iomem *hpipe_addr)
+{
+	debug_enter();
+	debug("USB3 power UP sequence\n");
+	debug_exit();
+	return 0;
+}
+
+static int comphy_sata_power_up(u32 lane, void __iomem *hpipe_addr)
+{
+	debug_enter();
+	debug("SATA power UP sequence\n");
+	debug_exit();
+	return 0;
+}
+
+int comphy_cp110_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy_map *serdes_map)
+{
+	struct comphy_map *ptr_comphy_map;
+	void __iomem *hpipe_base_addr;
+	u32 comphy_max_count, lane, ret = 0;
+	u32 pcie_by4 = 1;
+
+	debug_enter();
+
+	comphy_max_count = ptr_chip_cfg->comphy_lanes_count;
+	hpipe_base_addr = ptr_chip_cfg->hpipe3_base_addr;
+
+	comphy_mux_init(ptr_chip_cfg, serdes_map);
+
+	/* Check if the first 4 lanes configured as By-4 */
+	for (lane = 0, ptr_comphy_map = serdes_map; lane < 4; lane++, ptr_comphy_map++) {
+		if (ptr_comphy_map->type != PEX0) {
+			pcie_by4 = 0;
+			break;
+		}
+	}
+
+	for (lane = 0, ptr_comphy_map = serdes_map; lane < comphy_max_count; lane++, ptr_comphy_map++) {
+		debug("Initialize serdes number %d\n", lane);
+		debug("Serdes type = 0x%x\n", ptr_comphy_map->type);
+		switch (ptr_comphy_map->type) {
+		case UNCONNECTED:
+			continue;
+			break;
+		case PEX0:
+		case PEX1:
+		case PEX2:
+		case PEX3:
+			ret = comphy_pcie_power_up(lane, pcie_by4, HPIPE_ADDR(hpipe_base_addr, lane));
+			break;
+		case SATA0:
+		case SATA1:
+		case SATA2:
+		case SATA3:
+			ret = comphy_sata_power_up(lane, HPIPE_ADDR(hpipe_base_addr, lane));
+			break;
+		case USB3_HOST0:
+		case USB3_HOST1:
+			ret = comphy_usb3_power_up(lane, HPIPE_ADDR(hpipe_base_addr, lane));
+			break;
+		default:
+			debug("Unknown SerDes type, skip initialize SerDes %d\n", lane);
+			break;
+		}
+		if (ret == 0)
+			error("PLL is not locked - Failed to initialize lane %d\n", lane);
+	}
+
+	debug_exit();
+	return 0;
+}
diff --git a/include/fdtdec.h b/include/fdtdec.h
index 8adb208..b9f54b5 100644
--- a/include/fdtdec.h
+++ b/include/fdtdec.h
@@ -145,6 +145,7 @@ enum fdt_compat_id {
 	COMPAT_MVEBU_USB3,
 	COMPAT_COMPHY_ARMADA_38X,
 	COMPAT_COMPHY_AP806,
+	COMPAT_COMPHY_CP110,
 	COMPAT_COMPHY_ARMADA_LP,
 	COMPAT_MVEBU_THERMAL_SENSOR,
 	COMPAT_MVEBU_THERMAL_SENSOR_V2,
diff --git a/lib/fdtdec.c b/lib/fdtdec.c
index a42a069..138a2b9 100644
--- a/lib/fdtdec.c
+++ b/lib/fdtdec.c
@@ -107,6 +107,7 @@ static const char * const compat_names[COMPAT_COUNT] = {
 	COMPAT(MVEBU_USB3, "marvell,mvebu-usb3"),
 	COMPAT(COMPHY_ARMADA_38X, "marvell,comphy-armada38x"),
 	COMPAT(COMPAT_COMPHY_AP806, "marvell,comphy-ap806"),
+	COMPAT(COMPAT_COMPHY_CP110, "marvell,comphy-cp110"),
 	COMPAT(COMPAT_COMPHY_ARMADA_LP, "marvell,comphy-armadalp"),
 	COMPAT(MVEBU_THERMAL_SENSOR, "marvell,thermal-sensor"),
 	COMPAT(MVEBU_THERMAL_SENSOR_V2, "marvell,thermal-sensor-v2"),
-- 
1.9.1

