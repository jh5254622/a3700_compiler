From cecc773e0dded8175e57a022528bee6041b67f9a Mon Sep 17 00:00:00 2001
From: Hanna Hawa <hannah@marvell.com>
Date: Mon, 18 Jan 2016 14:03:31 +0200
Subject: [PATCH 0705/1240] comphy: mux: add mux driver to initialize comphy
 serdes selector

- move the mux driver form A38x code to stand alone mux code
- remove mux init call from CP-110 (will add in other patch)
- fix debug enter/exit for get_mux_value

Change-Id: Icde7691636259756e5715ef84df0e20173417f65
Signed-off-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/26842
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Haim Boot <hayim@marvell.com>
---
 arch/arm/include/asm/arch-mvebu/comphy.h |   4 +-
 drivers/phy/Makefile                     |   1 +
 drivers/phy/comphy_a38x.c                |  77 ----------------------
 drivers/phy/comphy_cp110.c               |   9 ---
 drivers/phy/comphy_mux.c                 | 108 +++++++++++++++++++++++++++++++
 5 files changed, 112 insertions(+), 87 deletions(-)
 create mode 100644 drivers/phy/comphy_mux.c

diff --git a/arch/arm/include/asm/arch-mvebu/comphy.h b/arch/arm/include/asm/arch-mvebu/comphy.h
index 888be5c..deb5bad 100644
--- a/arch/arm/include/asm/arch-mvebu/comphy.h
+++ b/arch/arm/include/asm/arch-mvebu/comphy.h
@@ -101,7 +101,9 @@ int comphy_cp110_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy
 int comphy_a3700_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy_map *serdes_map);
 #endif
 
-
+/* MUX function */
+void comphy_mux_init(struct chip_serdes_phy_config *ptr_chip_cfg,
+		struct comphy_map *comphy_map_data, void __iomem *selector_base);
 
 void comphy_pcie_config_set(u32 comphy_max_count, struct comphy_map *serdes_map);
 void comphy_pcie_config_detect(u32 comphy_max_count, struct comphy_map *serdes_map);
diff --git a/drivers/phy/Makefile b/drivers/phy/Makefile
index a225d5a..8506f1b 100644
--- a/drivers/phy/Makefile
+++ b/drivers/phy/Makefile
@@ -1,4 +1,5 @@
 obj-y += comphy_core.o
+obj-y += comphy_mux.o
 obj-$(CONFIG_TARGET_ARMADA_38X) += comphy_a38x.o
 obj-$(CONFIG_TARGET_ARMADA_38X) += comphy_a38x_pcie_config.o
 obj-$(CONFIG_TARGET_ARMADA_8K) += comphy_ap806_z1.o
diff --git a/drivers/phy/comphy_a38x.c b/drivers/phy/comphy_a38x.c
index 3a1e7ed..3dc383b 100644
--- a/drivers/phy/comphy_a38x.c
+++ b/drivers/phy/comphy_a38x.c
@@ -42,83 +42,6 @@ struct comphy_mux_data a38x_comphy_mux_data[] = {
 		{USB3_DEVICE, 0x5} } },
 };
 
-/* comphy_mux_check_config
- * description: this function passes over the COMPHY lanes and check if the type
- *              is valid for specific lane. If the type is not valid, the function
- *              update the struct and set the type of the lane as UNCONNECTED */
-static void comphy_mux_check_config(struct comphy_mux_data *mux_data,
-		struct comphy_map *comphy_map_data, int comphy_max_lanes)
-{
-	struct comphy_mux_options *ptr_mux_opt;
-	int lane, opt, valid;
-	debug_enter();
-
-	for (lane = 0; lane < comphy_max_lanes; lane++, comphy_map_data++, mux_data++) {
-		ptr_mux_opt = mux_data->mux_values;
-		for (opt = 0, valid = 0; opt < mux_data->max_lane_values; opt++, ptr_mux_opt++) {
-			if (ptr_mux_opt->type == comphy_map_data->type) {
-				valid = 1;
-				break;
-			}
-		}
-		if (valid == 0) {
-			debug("lane number %d, had invalid type %d\n", lane, comphy_map_data->type);
-			debug("set lane %d as type %d\n", lane, UNCONNECTED);
-			comphy_map_data->type = UNCONNECTED;
-		} else {
-			debug("lane number %d, has type %d\n", lane, comphy_map_data->type);
-		}
-	}
-	debug_exit();
-}
-
-static u32 comphy_mux_get_mux_value(struct comphy_mux_data *mux_data, enum phy_type type, int lane)
-{
-	struct comphy_mux_options *ptr_mux_opt;
-	int opt;
-	ptr_mux_opt = mux_data->mux_values;
-	for (opt = 0 ; opt < mux_data->max_lane_values; opt++, ptr_mux_opt++)
-		if (ptr_mux_opt->type == type)
-			return ptr_mux_opt->mux_value;
-	return 0;
-}
-
-static void comphy_mux_reg_write(struct comphy_mux_data *mux_data,
-		struct comphy_map *comphy_map_data, int comphy_max_lanes, void __iomem *selector_base, u32 bitcount)
-{
-	u32 lane, value, offset, mask;
-
-	debug_enter();
-	for (lane = 0; lane < comphy_max_lanes; lane++, comphy_map_data++, mux_data++) {
-		offset = lane * bitcount;
-		mask = (((1 << bitcount) - 1) << offset);
-		value = (comphy_mux_get_mux_value(mux_data, comphy_map_data->type, lane) << offset);
-		reg_set(selector_base, value, mask);
-	}
-	debug_exit();
-}
-
-static void comphy_mux_init(struct chip_serdes_phy_config *ptr_chip_cfg,
-		struct comphy_map *comphy_map_data, void __iomem *selector_base)
-{
-	struct comphy_mux_data *mux_data;
-	u32 mux_bitcount;
-	u32 comphy_max_lanes;
-
-	debug_enter();
-
-	comphy_max_lanes = ptr_chip_cfg->comphy_lanes_count;
-	mux_data = ptr_chip_cfg->mux_data;
-	mux_bitcount = ptr_chip_cfg->comphy_mux_bitcount;
-
-	/* check if the configuration is valid */
-	comphy_mux_check_config(mux_data, comphy_map_data, comphy_max_lanes);
-	/* Init COMPHY selectors */
-	comphy_mux_reg_write(mux_data, comphy_map_data, comphy_max_lanes, selector_base, mux_bitcount);
-
-	debug_exit();
-}
-
 static int comphy_pcie_power_up(u32 pex_index, void __iomem *comphy_addr, void __iomem *hpipe_addr)
 {
 	debug_enter();
diff --git a/drivers/phy/comphy_cp110.c b/drivers/phy/comphy_cp110.c
index 1b29602..9ea6013 100644
--- a/drivers/phy/comphy_cp110.c
+++ b/drivers/phy/comphy_cp110.c
@@ -25,13 +25,6 @@
 
 #define HPIPE_ADDR(base, lane)		(base + 0x800 * lane)
 
-static void comphy_mux_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy_map *comphy_map_data)
-{
-	debug_enter();
-	printf("COMPHY mux init\n");
-	debug_exit();
-}
-
 static int comphy_pcie_power_up(u32 lane, u32 pcie_by4, void __iomem *hpipe_addr)
 {
 	debug_enter();
@@ -68,8 +61,6 @@ int comphy_cp110_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy
 	comphy_max_count = ptr_chip_cfg->comphy_lanes_count;
 	hpipe_base_addr = ptr_chip_cfg->hpipe3_base_addr;
 
-	comphy_mux_init(ptr_chip_cfg, serdes_map);
-
 	/* Check if the first 4 lanes configured as By-4 */
 	for (lane = 0, ptr_comphy_map = serdes_map; lane < 4; lane++, ptr_comphy_map++) {
 		if (ptr_comphy_map->type != PEX0) {
diff --git a/drivers/phy/comphy_mux.c b/drivers/phy/comphy_mux.c
new file mode 100644
index 0000000..386f458
--- /dev/null
+++ b/drivers/phy/comphy_mux.c
@@ -0,0 +1,108 @@
+/*
+* ***************************************************************************
+* Copyright (C) 2015 Marvell International Ltd.
+* ***************************************************************************
+* This program is free software: you can redistribute it and/or modify it
+* under the terms of the GNU General Public License as published by the Free
+* Software Foundation, either version 2 of the License, or any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program.  If not, see <http://www.gnu.org/licenses/>.
+* ***************************************************************************
+*/
+
+/*#define DEBUG */
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch-mvebu/comphy.h>
+#include <asm/arch-mvebu/comphy_hpipe.h>
+#include <asm/arch-mvebu/mvebu.h>
+
+/* comphy_mux_check_config
+ * description: this function passes over the COMPHY lanes and check if the type
+ *              is valid for specific lane. If the type is not valid, the function
+ *              update the struct and set the type of the lane as UNCONNECTED */
+static void comphy_mux_check_config(struct comphy_mux_data *mux_data,
+		struct comphy_map *comphy_map_data, int comphy_max_lanes)
+{
+	struct comphy_mux_options *ptr_mux_opt;
+	int lane, opt, valid;
+	debug_enter();
+
+	for (lane = 0; lane < comphy_max_lanes; lane++, comphy_map_data++, mux_data++) {
+		ptr_mux_opt = mux_data->mux_values;
+		for (opt = 0, valid = 0; opt < mux_data->max_lane_values; opt++, ptr_mux_opt++) {
+			if (ptr_mux_opt->type == comphy_map_data->type) {
+				valid = 1;
+				break;
+			}
+		}
+		if (valid == 0) {
+			debug("lane number %d, had invalid type %d\n", lane, comphy_map_data->type);
+			debug("set lane %d as type %d\n", lane, UNCONNECTED);
+			comphy_map_data->type = UNCONNECTED;
+		} else {
+			debug("lane number %d, has type %d\n", lane, comphy_map_data->type);
+		}
+	}
+	debug_exit();
+}
+
+static u32 comphy_mux_get_mux_value(struct comphy_mux_data *mux_data, enum phy_type type, int lane)
+{
+	struct comphy_mux_options *ptr_mux_opt;
+	int opt;
+	u32 value = 0;
+
+	debug_enter();
+	ptr_mux_opt = mux_data->mux_values;
+	for (opt = 0 ; opt < mux_data->max_lane_values; opt++, ptr_mux_opt++)
+		if (ptr_mux_opt->type == type) {
+			value = ptr_mux_opt->mux_value;
+			break;
+		}
+
+	debug_exit();
+	return value;
+}
+
+static void comphy_mux_reg_write(struct comphy_mux_data *mux_data,
+		struct comphy_map *comphy_map_data, int comphy_max_lanes, void __iomem *selector_base, u32 bitcount)
+{
+	u32 lane, value, offset, mask;
+
+	debug_enter();
+	for (lane = 0; lane < comphy_max_lanes; lane++, comphy_map_data++, mux_data++) {
+		offset = lane * bitcount;
+		mask = (((1 << bitcount) - 1) << offset);
+		value = (comphy_mux_get_mux_value(mux_data, comphy_map_data->type, lane) << offset);
+		reg_set(selector_base, value, mask);
+	}
+	debug_exit();
+}
+
+void comphy_mux_init(struct chip_serdes_phy_config *ptr_chip_cfg,
+		struct comphy_map *comphy_map_data, void __iomem *selector_base)
+{
+	struct comphy_mux_data *mux_data;
+	u32 mux_bitcount;
+	u32 comphy_max_lanes;
+
+	debug_enter();
+
+	comphy_max_lanes = ptr_chip_cfg->comphy_lanes_count;
+	mux_data = ptr_chip_cfg->mux_data;
+	mux_bitcount = ptr_chip_cfg->comphy_mux_bitcount;
+
+	/* check if the configuration is valid */
+	comphy_mux_check_config(mux_data, comphy_map_data, comphy_max_lanes);
+	/* Init COMPHY selectors */
+	comphy_mux_reg_write(mux_data, comphy_map_data, comphy_max_lanes, selector_base, mux_bitcount);
+
+	debug_exit();
+}
-- 
1.9.1

