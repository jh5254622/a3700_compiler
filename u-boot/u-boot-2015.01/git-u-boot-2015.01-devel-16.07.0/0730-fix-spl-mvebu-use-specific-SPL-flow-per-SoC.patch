From 7bb6e5cca3a1a422486de487fab5a52a52b5d0ba Mon Sep 17 00:00:00 2001
From: jinghua <jinghua@marvell.com>
Date: Tue, 19 Jan 2016 16:17:39 +0800
Subject: [PATCH 0730/1240] fix: spl: mvebu: use specific SPL flow per SoC

- remove common spl, relocate common code to specific SPL.c per SoC,
  in this patch A8K, A3700 and A38x SPL code are fixed.

- now SPL uses generic flow, with early and late pre defined routines
  inside the flow, and these two routines are per SoC, so each soc has
  different sub-flow in it's eary and late.

- But, the flow in SPL are very SoC dependent, so it has been decided
  to stop using common spl file, and use specific SPL flow only.

 - fix: SYSTEMSW-2029

Change-Id: I27bec68b635ad5f8d14d6b607a73c59c44b32a2b
Signed-off-by: jinghua <jinghua@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/26867
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
---
 arch/arm/cpu/armv7/armada38x/Makefile   |  2 +-
 arch/arm/cpu/armv7/armada38x/spl.c      | 25 +++++------
 arch/arm/cpu/armv8/armada8k/Makefile    |  2 +-
 arch/arm/cpu/armv8/armada8k/spl.c       | 50 ++++++++++++++++------
 arch/arm/cpu/armv8/armadalp/Makefile    |  2 +-
 arch/arm/cpu/armv8/armadalp/spl.c       | 38 ++++++++++++++---
 arch/arm/cpu/mvebu-common/Makefile      |  1 -
 arch/arm/cpu/mvebu-common/spl.c         | 75 ---------------------------------
 arch/arm/include/asm/arch-mvebu/tools.h |  4 ++
 9 files changed, 87 insertions(+), 112 deletions(-)
 delete mode 100644 arch/arm/cpu/mvebu-common/spl.c

diff --git a/arch/arm/cpu/armv7/armada38x/Makefile b/arch/arm/cpu/armv7/armada38x/Makefile
index 94a0ddc..ca51fcb 100644
--- a/arch/arm/cpu/armv7/armada38x/Makefile
+++ b/arch/arm/cpu/armv7/armada38x/Makefile
@@ -17,6 +17,6 @@
 #
 
 obj-y += soc-init.o
-obj-y += spl.o
+obj-$(CONFIG_SPL_BUILD) += spl.o
 obj-y += clock.o
 obj-y += nand.o
diff --git a/arch/arm/cpu/armv7/armada38x/spl.c b/arch/arm/cpu/armv7/armada38x/spl.c
index 03c8fc6..7db5c52 100644
--- a/arch/arm/cpu/armv7/armada38x/spl.c
+++ b/arch/arm/cpu/armv7/armada38x/spl.c
@@ -22,13 +22,20 @@
 #include <asm/arch-mvebu/tools.h>
 #include <asm/arch-mvebu/ddr.h>
 #include <asm/arch-mvebu/mbus.h>
+#include <asm/arch-mvebu/fdt.h>
+#include <spl.h>
 
-void early_spl_init(void)
+void board_init_f(ulong silent)
 {
-}
+	gd = &gdata;
+	gd->baudrate = CONFIG_BAUDRATE;
 
-void late_spl_init(void)
-{
+	/* Update the pointer to the default FDT, this is necessary only to config i2c*/
+	setup_fdt();
+
+	preloader_console_init();
+
+	/* Init all relevant drivers (e.g. DDR, comphy...) */
 #ifdef CONFIG_MVEBU_COMPHY_SUPPORT
 	if (comphy_init(gd->fdt_blob))
 		error("COMPHY initialization failed\n");
@@ -36,14 +43,4 @@ void late_spl_init(void)
 #ifndef CONFIG_PALLADIUM
 	mvebu_dram_init(gd->fdt_blob);
 #endif
-
-#ifdef CONFIG_MVEBU_MBUS
-	init_mbus();
-#endif
-}
-
-void soc_spl_jump_uboot(void)
-{
-	/* Armada-8k return to bootrom */
-	return;
 }
diff --git a/arch/arm/cpu/armv8/armada8k/Makefile b/arch/arm/cpu/armv8/armada8k/Makefile
index 0240853..16e80d0 100644
--- a/arch/arm/cpu/armv8/armada8k/Makefile
+++ b/arch/arm/cpu/armv8/armada8k/Makefile
@@ -17,7 +17,7 @@
 #
 
 obj-y += soc.o
-obj-y += spl.o
+obj-$(CONFIG_SPL_BUILD) += spl.o
 obj-y += clock.o
 obj-$(CONFIG_ARMV8_PSCI)	+= psci.o
 obj-$(CONFIG_MVEBU_LLC_ENABLE)	+= cache_llc.o
diff --git a/arch/arm/cpu/armv8/armada8k/spl.c b/arch/arm/cpu/armv8/armada8k/spl.c
index b9b663f..f7ef3f7 100644
--- a/arch/arm/cpu/armv8/armada8k/spl.c
+++ b/arch/arm/cpu/armv8/armada8k/spl.c
@@ -25,17 +25,41 @@
 #include <asm/arch-mvebu/ccu.h>
 #include <asm/arch-mvebu/rfu.h>
 #include <asm/arch-mvebu/flc.h>
+#include <asm/arch-mvebu/fdt.h>
+#include <spl.h>
 
-void early_spl_init(void)
+void board_init_f(ulong silent)
 {
-}
+	gd = &gdata;
+	gd->baudrate = CONFIG_BAUDRATE;
 
-void late_spl_init(void)
-{
+	if (silent)
+		gd->flags |= GD_FLG_SILENT;
+
+	/* isetup_fdt set default FDT to work with:
+	   - customer/regular mode: point to the defined
+	     FDT by CONFIG_DEFAULT_DEVICE_TREE.
+	   - Marvell multi FDT mode: set the first compiled relevant device
+	     tree for the SoC, required for i2c initialization to read EEPROM data */
+	setup_fdt();
+
+#ifdef CONFIG_MULTI_DT_FILE
+	/* Update gd->fdt_blob according to multi-fdt data in eeprom */
+	mvebu_setup_fdt();
+#endif
+
+	preloader_console_init();
+
+#ifdef CONFIG_MVEBU_SPL_SAR_DUMP
+	/* Sample at reset dump register */
+	mvebu_sar_dump_reg();
+#endif
+
+	/* Init all relevant drivers (e.g. DDR, comphy...) */
 #ifndef CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT
-/* when DDR over PCIE is enabled, add delay before and after the comphy_init
-   to verify that the PCIE card init done, before setting the comphy to avoid
-   collisions. and no ddr init require */
+	/* when DDR over PCIE is enabled, add delay before and after the comphy_init
+	   to verify that the PCIE card init done, before setting the comphy to avoid
+	   collisions. and no ddr init require */
 #ifdef CONFIG_MVEBU_COMPHY_SUPPORT
 	if (comphy_init(gd->fdt_blob))
 		error("COMPHY initialization failed\n");
@@ -57,10 +81,12 @@ void late_spl_init(void)
 #endif
 	init_flc();
 #endif
-}
 
-void soc_spl_jump_uboot(void)
-{
-	/* Armada-8k return to bootrom */
-	return;
+#ifdef CONFIG_MVEBU_SPL_MEMORY_TEST
+	/* Momory test */
+	if (run_memory_test())
+		printf("**** DRAM test failed ****\n");
+#endif
 }
+
+
diff --git a/arch/arm/cpu/armv8/armadalp/Makefile b/arch/arm/cpu/armv8/armadalp/Makefile
index 67546a6..be2f6db 100644
--- a/arch/arm/cpu/armv8/armadalp/Makefile
+++ b/arch/arm/cpu/armv8/armadalp/Makefile
@@ -17,7 +17,7 @@
 #
 
 obj-y += soc-init.o
-obj-y += spl.o
+obj-$(CONFIG_SPL_BUILD) += spl.o
 obj-y += clock.o
 obj-$(CONFIG_ARMV8_PSCI)	+= psci.o
 obj-$(CONFIG_MVEBU_A3700_IO_ADDR_DEC) += mvebu_io_addr_dec.o
diff --git a/arch/arm/cpu/armv8/armadalp/spl.c b/arch/arm/cpu/armv8/armadalp/spl.c
index 9ddfa6e..84e0497 100644
--- a/arch/arm/cpu/armv8/armadalp/spl.c
+++ b/arch/arm/cpu/armv8/armadalp/spl.c
@@ -25,11 +25,39 @@
 #include <asm/arch-armadalp/gpio.h>
 #include <asm/arch-mvebu/mvebu_misc.h>
 #include <asm/arch-mvebu/ddr.h>
+#include <asm/arch-mvebu/fdt.h>
+#include <spl.h>
 
 void (*ptr_uboot_start)(void);
 
-void early_spl_init(void)
+void board_init_f(ulong silent)
 {
+	gd = &gdata;
+	gd->baudrate = CONFIG_BAUDRATE;
+
+	/* Silence flag is not supported by CM3 WTP BootROM */
+	gd->flags &= ~GD_FLG_SILENT;
+
+	/* isetup_fdt set default FDT to work with:
+	   - customer/regular mode: point to the defined
+	     FDT by CONFIG_DEFAULT_DEVICE_TREE.
+	   - Marvell multi FDT mode: set the first compiled relevant device
+	     tree for the SoC, required for i2c initialization to read EEPROM data */
+	setup_fdt();
+
+#ifdef CONFIG_MULTI_DT_FILE
+	/* Update gd->fdt_blob according to multi-fdt data in eeprom */
+	mvebu_setup_fdt();
+#endif
+
+	/* UART1 and UART2 clocks are sourced from XTAL by default
+	* (see RD0012010 register for the details). Additionally the GPIO
+	* control (RD0013830) sets the GPIO1[26:25] as the UART1 pins by default.
+	* Therefore it is safe to start using UART before call to early_spl_init()
+	*/
+	preloader_console_init();
+
+	/* Init all drivers requred at early stage (clocks, GPIO...) */
 #ifdef CONFIG_MVEBU_SPL_A3700_GPIO
 	mvebu_init_gpio();
 #endif
@@ -42,10 +70,8 @@ void early_spl_init(void)
 #ifdef CONFIG_MVEBU_A3700_MISC_INIT
 	misc_init_cci400();
 #endif
-}
 
-void late_spl_init(void)
-{
+	/* Init all relevant drivers (e.g. DDR, comphy...) */
 #ifdef CONFIG_MVEBU_COMPHY_SUPPORT
 	if (comphy_init(gd->fdt_blob))
 		error("COMPHY initialization failed\n");
@@ -61,12 +87,10 @@ void late_spl_init(void)
 #ifdef CONFIG_MVEBU_A3700_IO_ADDR_DEC
 	init_io_addr_dec();
 #endif
-}
 
-void soc_spl_jump_uboot(void)
-{
 	debug("SPL processing done. Jumping to u-boot\n\n");
 	ptr_uboot_start = 0;
 	/* Jump from SPL to u-boot start address */
 	ptr_uboot_start();
 }
+
diff --git a/arch/arm/cpu/mvebu-common/Makefile b/arch/arm/cpu/mvebu-common/Makefile
index aea9f97..519443a 100644
--- a/arch/arm/cpu/mvebu-common/Makefile
+++ b/arch/arm/cpu/mvebu-common/Makefile
@@ -25,6 +25,5 @@ obj-y += clock.o
 obj-$(CONFIG_MVEBU_TIMER) += timer_mvebu.o
 obj-$(CONFIG_GENERIC_TIMER) += generic_timer.o
 obj-$(CONFIG_MVEBU_CA9) += platform.o
-obj-$(CONFIG_SPL_BUILD) += spl.o
 obj-$(CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT) += dram_over_pci.o
 obj-$(CONFIG_MVEBU_TOOLS_SUPPORT) += tools/
diff --git a/arch/arm/cpu/mvebu-common/spl.c b/arch/arm/cpu/mvebu-common/spl.c
deleted file mode 100644
index 520624a..0000000
--- a/arch/arm/cpu/mvebu-common/spl.c
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * ***************************************************************************
- * Copyright (C) 2015 Marvell International Ltd.
- * ***************************************************************************
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License as published by the Free
- * Software Foundation, either version 2 of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * ***************************************************************************
- */
-
-#include <common.h>
-#include <spl.h>
-#include <fdtdec.h>
-#include <i2c.h>
-#include <asm/arch-mvebu/fdt.h>
-#include <asm/arch-mvebu/spl.h>
-
-#ifdef CONFIG_MVEBU_SPL_SAR_DUMP
-extern void mvebu_sar_dump_reg(void);
-#endif
-
-void board_init_f(ulong silent)
-{
-	gd = &gdata;
-	gd->baudrate = CONFIG_BAUDRATE;
-
-#ifdef CONFIG_MVEBU_ROM_SILENCE_FLAG_SUPPORT
-	if (silent)
-		gd->flags |= GD_FLG_SILENT;
-#else
-	/* Silence flag is not supported by CM3 WTP BootROM */
-	gd->flags &= ~GD_FLG_SILENT;
-#endif
-	/* Update the pointer to the default FDT, this is necessary only to config i2c*/
-	setup_fdt();
-#ifdef CONFIG_MULTI_DT_FILE
-	/* Update the pointer to the FDT */
-	mvebu_setup_fdt();
-#endif
-
-	/* UART1 and UART2 clocks are sourced from XTAL by default
-	* (see RD0012010 register for the details). Additionally the GPIO
-	* control (RD0013830) sets the GPIO1[26:25] as the UART1 pins by default.
-	* Therefore it is safe to start using UART before call to early_spl_init()
-	*/
-	preloader_console_init();
-
-	/* Init all drivers requred at early stage (clocks, GPIO...) */
-	early_spl_init();
-
-#ifdef CONFIG_MVEBU_SPL_SAR_DUMP
-	/* Sample at reset dump register */
-	mvebu_sar_dump_reg();
-#endif
-
-	/* Init all relevant drivers (e.g. DDR, comphy...) */
-	late_spl_init();
-
-#ifdef CONFIG_MVEBU_SPL_MEMORY_TEST
-	/* Momory test */
-	if (run_memory_test())
-		printf("**** DRAM test failed ****\n");
-#endif
-
-	/* Jump to U-Boot if needed */
-	soc_spl_jump_uboot();
-}
diff --git a/arch/arm/include/asm/arch-mvebu/tools.h b/arch/arm/include/asm/arch-mvebu/tools.h
index ed614ba..8fc8e9d 100644
--- a/arch/arm/include/asm/arch-mvebu/tools.h
+++ b/arch/arm/include/asm/arch-mvebu/tools.h
@@ -21,4 +21,8 @@
 
 int run_memory_test(void);
 
+#ifdef CONFIG_MVEBU_SPL_SAR_DUMP
+void mvebu_sar_dump_reg(void);
+#endif
+
 #endif /* _MVEBU_TOOLS_H_ */
-- 
1.9.1

