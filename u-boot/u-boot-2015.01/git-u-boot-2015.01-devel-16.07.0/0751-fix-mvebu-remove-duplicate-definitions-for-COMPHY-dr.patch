From 45e4717b9a2ccfb914c6521def18b1abea28425c Mon Sep 17 00:00:00 2001
From: Hanna Hawa <hannah@marvell.com>
Date: Sun, 31 Jan 2016 14:41:36 +0200
Subject: [PATCH 0751/1240] fix: mvebu: remove duplicate definitions for COMPHY
 driver

Change-Id: Ice024dcd6398926c29d31111c849709f647c4386
Signed-off-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27085
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Haim Boot <hayim@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
---
 arch/arm/include/asm/arch-mvebu/comphy.h | 50 ++----------------------
 drivers/phy/comphy_a3700.c               | 28 +++++++-------
 drivers/phy/comphy_a38x.c                | 33 ++++++++--------
 drivers/phy/comphy_a38x_pcie_config.c    | 16 ++++----
 drivers/phy/comphy_ap806_z1.c            | 12 +++---
 drivers/phy/comphy_core.c                | 19 ++++-----
 drivers/phy/comphy_cp110.c               | 66 ++++++++++++++++++--------------
 drivers/phy/comphy_mux.c                 |  8 ++--
 include/dt-bindings/comphy/comphy_data.h |  4 ++
 9 files changed, 104 insertions(+), 132 deletions(-)

diff --git a/arch/arm/include/asm/arch-mvebu/comphy.h b/arch/arm/include/asm/arch-mvebu/comphy.h
index bd4a4f7..5864e28 100644
--- a/arch/arm/include/asm/arch-mvebu/comphy.h
+++ b/arch/arm/include/asm/arch-mvebu/comphy.h
@@ -19,6 +19,7 @@
 #ifndef _COMPHY_H_
 #define _COMPHY_H_
 
+#include <dt-bindings/comphy/comphy_data.h>
 #include <fdtdec.h>
 
 /* COMPHY registers */
@@ -43,51 +44,8 @@
 
 #define MAX_LANE_OPTIONS 10
 
-enum phy_speed {
-	__1_25gbps,
-	__1_5gbps,
-	__2_5gbps,
-	__3gbps,
-	__3_125gbps,
-	__5gbps,
-	__6gbps,
-	__6_25gbps,
-	__10_3125gbps,
-	MAX_SERDES_SPEED,
-	INVALID_SPEED = 0xff
-};
-
-enum phy_type {
-	UNCONNECTED,
-	PEX0,
-	PEX1,
-	PEX2,
-	PEX3,
-	SATA0,
-	SATA1,
-	SATA2,
-	SATA3,
-	SGMII0,
-	SGMII1,
-	SGMII2,
-	SGMII3,
-	QSGMII,
-	USB3_HOST0,
-	USB3_HOST1,
-	USB3_DEVICE,
-	XAUI0,
-	XAUI1,
-	XAUI2,
-	XAUI3,
-	RXAUI0,
-	RXAUI1,
-	KR,
-	MAX_PHY_TYPE,
-	INVALID_TYPE = 0xff
-};
-
 struct comphy_mux_options {
-	enum phy_type type;
+	u32 type;
 	u32 mux_value;
 };
 
@@ -97,8 +55,8 @@ struct comphy_mux_data {
 };
 
 struct comphy_map {
-	enum phy_type type;
-	enum phy_speed speed;
+	u32 type;
+	u32 speed;
 };
 
 struct chip_serdes_phy_config {
diff --git a/drivers/phy/comphy_a3700.c b/drivers/phy/comphy_a3700.c
index a3d49d5..c7b6615 100644
--- a/drivers/phy/comphy_a3700.c
+++ b/drivers/phy/comphy_a3700.c
@@ -144,7 +144,7 @@ static u32 comphy_poll_reg(void *addr, u32 val, u32 mask, u32 timeout, u8 op_typ
   *
   * return: 1 if PLL locked (OK), 0 otherwise (FAIL)
  ***************************************************************************************************/
-static int comphy_pcie_power_up(enum phy_speed speed)
+static int comphy_pcie_power_up(u32 speed)
 {
 	int	ret;
 
@@ -297,7 +297,7 @@ static int comphy_sata_power_up(void)
   *
   * return: 1 if PLL locked (OK), 0 otherwise (FAIL)
  ***************************************************************************************************/
-static int comphy_usb3_power_up(enum phy_speed speed)
+static int comphy_usb3_power_up(u32 speed)
 {
 	int	ret;
 
@@ -538,7 +538,7 @@ static int comphy_emmc_power_up(void)
   *
   * return:
  ***************************************************************************************************/
-static void comphy_sgmii_phy_init(u32 lane, enum phy_speed speed)
+static void comphy_sgmii_phy_init(u32 lane, u32 speed)
 {
 	int		addr, fix_idx;
 	const int	fix_arr_sz = sizeof(sgmii_phy_init_fix) / sizeof(struct sgmii_phy_init_data_fix);
@@ -550,7 +550,7 @@ static void comphy_sgmii_phy_init(u32 lane, enum phy_speed speed)
 		   The values required for 1.25 Gbps are almost the same and only
 		   few registers should be "fixed" in comparison to 3.125 Gbps values.
 		   These register values are stored in "sgmii_phy_init_fix" array */
-		if ((speed != __1_25gbps) && (sgmii_phy_init_fix[fix_idx].addr == addr)) {
+		if ((speed != PHY_SPEED_1_25G) && (sgmii_phy_init_fix[fix_idx].addr == addr)) {
 			/* Use new value */
 			val = sgmii_phy_init_fix[fix_idx].value;
 			if (fix_idx < fix_arr_sz)
@@ -568,7 +568,7 @@ static void comphy_sgmii_phy_init(u32 lane, enum phy_speed speed)
   *
   * return: 1 if PLL locked (OK), 0 otherwise (FAIL)
  ***************************************************************************************************/
-static int comphy_sgmii_power_up(u32 lane, enum phy_speed speed)
+static int comphy_sgmii_power_up(u32 lane, u32 speed)
 {
 	int	ret;
 
@@ -597,12 +597,12 @@ static int comphy_sgmii_power_up(u32 lane, enum phy_speed speed)
 	/*
 	  7. Set PIN_PHY_GEN_TX[3:0] and PIN_PHY_GEN_RX[3:0] to decide COMPHY bit rate
 	 */
-	if (speed == __3_125gbps) { /* 3.125 GHz */
+	if (speed == PHY_SPEED_3_125G) { /* 3.125 GHz */
 		reg_set((void __iomem *)COMPHY_PHY_CFG1_ADDR(lane),
 			(0x8 << rf_gen_rx_sel_shift) | (0x8 << rf_gen_tx_sel_shift), /* data - fields to set */
 			rf_gen_rx_select | rf_gen_tx_select); /* mask - fields to reset */
 
-	} else if (speed == __1_25gbps) { /* 1.25 GHz */
+	} else if (speed == PHY_SPEED_1_25G) { /* 1.25 GHz */
 		reg_set((void __iomem *)COMPHY_PHY_CFG1_ADDR(lane),
 			(0x6 << rf_gen_rx_sel_shift) | (0x6 << rf_gen_tx_sel_shift), /* data - fields to set */
 			rf_gen_rx_select | rf_gen_tx_select); /* mask - fields to reset */
@@ -650,7 +650,7 @@ static int comphy_sgmii_power_up(u32 lane, enum phy_speed speed)
 	   defined by "comphy_sgmii_phy_init" when the REF clock is 40 MHz.
 	   For REF clock 25 MHz the default values stored in PHY registers are OK.
 	*/
-	debug("Running C-DPI phy init %s mode\n", speed == __3_125gbps ? "2G5" : "1G");
+	debug("Running C-DPI phy init %s mode\n", speed == PHY_SPEED_3_125G ? "2G5" : "1G");
 	if (get_ref_clk() == 40)
 		comphy_sgmii_phy_init(lane, speed);
 
@@ -805,21 +805,21 @@ int comphy_a3700_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy
 		debug("Serdes type = 0x%x\n", ptr_comphy_map->type);
 
 		switch (ptr_comphy_map->type) {
-		case UNCONNECTED:
+		case PHY_TYPE_UNCONNECTED:
 			continue;
 			break;
 
-		case PEX0:
+		case PHY_TYPE_PEX0:
 			ret = comphy_pcie_power_up(ptr_comphy_map->speed);
 			break;
 
-		case USB3_HOST0:
-		case USB3_DEVICE:
+		case PHY_TYPE_USB3_HOST0:
+		case PHY_TYPE_USB3_DEVICE:
 			ret = comphy_usb3_power_up(ptr_comphy_map->speed);
 			break;
 
-		case SGMII0:
-		case SGMII1:
+		case PHY_TYPE_SGMII0:
+		case PHY_TYPE_SGMII1:
 			ret = comphy_sgmii_power_up(lane, ptr_comphy_map->speed);
 			break;
 
diff --git a/drivers/phy/comphy_a38x.c b/drivers/phy/comphy_a38x.c
index 3dc383b..4f917d8 100644
--- a/drivers/phy/comphy_a38x.c
+++ b/drivers/phy/comphy_a38x.c
@@ -30,16 +30,17 @@
 #define COMMON_PHY_SELECTOR_OFFSET		0xFC
 
 struct comphy_mux_data a38x_comphy_mux_data[] = {
-	{4, {{UNCONNECTED, 0x0}, {PEX0, 0x1}, {SATA0, 0x2}, {SGMII0, 0x3} } },
-	{8, {{UNCONNECTED, 0x0}, {PEX0, 0x1}, {PEX0, 0x2}, {SATA0, 0x3},
-		{SGMII0, 0x4}, {SGMII1, 0x5}, {USB3_HOST0, 0x6}, {QSGMII, 0x7} } },
-	{5, {{UNCONNECTED, 0x0}, {PEX1, 0x1}, {PEX0, 0x2}, {SATA1, 0x3}, {SGMII1, 0x4} } },
-	{7, {{UNCONNECTED, 0x0}, {PEX3, 0x1}, {PEX0, 0x2}, {SATA3, 0x3}, {SGMII2, 0x4},
-		{USB3_HOST0, 0x5}, {USB3_DEVICE, 0x6} } },
-	{7, {{UNCONNECTED, 0x0}, {PEX1, 0x1}, {SATA1, 0x2}, {SGMII1, 0x3}, {USB3_HOST0, 0x4},
-		{USB3_DEVICE, 0x5}, {SATA2, 0x6} } },
-	{6, {{UNCONNECTED, 0x0}, {PEX2, 0x1}, {SATA2, 0x2}, {SGMII2, 0x3}, {USB3_HOST1, 0x4},
-		{USB3_DEVICE, 0x5} } },
+	{4, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_PEX0, 0x1}, {PHY_TYPE_SATA0, 0x2}, {PHY_TYPE_SGMII0, 0x3} } },
+	{8, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_PEX0, 0x1}, {PHY_TYPE_PEX0, 0x2}, {PHY_TYPE_SATA0, 0x3},
+		{PHY_TYPE_SGMII0, 0x4}, {PHY_TYPE_SGMII1, 0x5}, {PHY_TYPE_USB3_HOST0, 0x6}, {PHY_TYPE_QSGMII, 0x7} } },
+	{5, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_PEX1, 0x1}, {PHY_TYPE_PEX0, 0x2}, {PHY_TYPE_SATA1, 0x3},
+		{PHY_TYPE_SGMII1, 0x4} } },
+	{7, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_PEX3, 0x1}, {PHY_TYPE_PEX0, 0x2}, {PHY_TYPE_SATA3, 0x3},
+		{PHY_TYPE_SGMII2, 0x4}, {PHY_TYPE_USB3_HOST0, 0x5}, {PHY_TYPE_USB3_DEVICE, 0x6} } },
+	{7, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_PEX1, 0x1}, {PHY_TYPE_SATA1, 0x2}, {PHY_TYPE_SGMII1, 0x3},
+		{PHY_TYPE_USB3_HOST0, 0x4}, {PHY_TYPE_USB3_DEVICE, 0x5}, {PHY_TYPE_SATA2, 0x6} } },
+	{6, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_PEX2, 0x1}, {PHY_TYPE_SATA2, 0x2}, {PHY_TYPE_SGMII2, 0x3},
+		{PHY_TYPE_USB3_HOST1, 0x4}, {PHY_TYPE_USB3_DEVICE, 0x5} } },
 };
 
 static int comphy_pcie_power_up(u32 pex_index, void __iomem *comphy_addr, void __iomem *hpipe_addr)
@@ -126,15 +127,15 @@ int comphy_a38x_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy_
 		debug("Initialize serdes number %d\n", lane);
 		debug("Serdes type = 0x%x\n", ptr_comphy_map->type);
 		switch (ptr_comphy_map->type) {
-		case UNCONNECTED:
+		case PHY_TYPE_UNCONNECTED:
 			continue;
-		case PEX0:
-		case PEX1:
-		case PEX2:
-		case PEX3:
+		case PHY_TYPE_PEX0:
+		case PHY_TYPE_PEX1:
+		case PHY_TYPE_PEX2:
+		case PHY_TYPE_PEX3:
 			is_pex_enabled = true;
 			/* TODO: add support for PEX by4 initialization */
-			ret = comphy_pcie_power_up(ptr_comphy_map->type - PEX0,
+			ret = comphy_pcie_power_up(ptr_comphy_map->type - PHY_TYPE_PEX0,
 					comphy_base_addr + 0x28 * lane, hpipe3_base_addr + 0x800 * lane);
 			break;
 		default:
diff --git a/drivers/phy/comphy_a38x_pcie_config.c b/drivers/phy/comphy_a38x_pcie_config.c
index 7bda3a1..1fc05cb 100644
--- a/drivers/phy/comphy_a38x_pcie_config.c
+++ b/drivers/phy/comphy_a38x_pcie_config.c
@@ -139,22 +139,22 @@ void comphy_pcie_config_set(u32 comphy_max_count, struct comphy_map *serdes_map)
 
 	debug_enter();
 	for (lane = 0; lane < comphy_max_count; lane++, serdes_map++) {
-		if (serdes_map->type < PEX0 || serdes_map->type > PEX3)
+		if (serdes_map->type < PHY_TYPE_PEX0 || serdes_map->type > PHY_TYPE_PEX3)
 			continue;
-		pex_index = serdes_map->type - PEX0;
+		pex_index = serdes_map->type - PHY_TYPE_PEX0;
 		reg_set(PEX_CAPABILITIES_REG(pex_index), 0x4 << 20, 0xf << 20);
 
 		switch (serdes_map->type) {
-		case PEX0:
+		case PHY_TYPE_PEX0:
 			pex_enable_offs |= 0x1 << PCIE0_ENABLE_OFFS;
 			break;
-		case PEX1:
+		case PHY_TYPE_PEX1:
 			pex_enable_offs |= 0x1 << PCIE1_ENABLE_OFFS;
 			break;
-		case PEX2:
+		case PHY_TYPE_PEX2:
 			pex_enable_offs |= 0x1 << PCIE2_ENABLE_OFFS;
 			break;
-		case PEX3:
+		case PHY_TYPE_PEX3:
 			pex_enable_offs |= 0x1 << PCIE3_ENABLE_OFFS;
 			break;
 		default:
@@ -175,9 +175,9 @@ void comphy_pcie_config_detect(u32 comphy_max_count, struct comphy_map *serdes_m
 	debug_enter();
 	next_bus = 0;
 	for (lane = 0; lane < comphy_max_count; lane++, serdes_map++) {
-		if (serdes_map->type < PEX0 || serdes_map->type > PEX3)
+		if (serdes_map->type < PHY_TYPE_PEX0 || serdes_map->type > PHY_TYPE_PEX3)
 			continue;
-		pex_index = serdes_map->type - PEX0;
+		pex_index = serdes_map->type - PHY_TYPE_PEX0;
 		first_bus = next_bus;
 		reg_data = readl(PEX_DBG_STATUS_REG(pex_index));
 
diff --git a/drivers/phy/comphy_ap806_z1.c b/drivers/phy/comphy_ap806_z1.c
index a48ac85..2a995c9 100644
--- a/drivers/phy/comphy_ap806_z1.c
+++ b/drivers/phy/comphy_ap806_z1.c
@@ -164,7 +164,7 @@ int comphy_ap806_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy
 
 	/* Check if the first 4 lanes configured as By-4 */
 	for (lane = 0, ptr_comphy_map = serdes_map; lane < 4; lane++, ptr_comphy_map++) {
-		if (ptr_comphy_map->type != PEX0) {
+		if (ptr_comphy_map->type != PHY_TYPE_PEX0) {
 			pcie_by4 = 0;
 			break;
 		}
@@ -174,13 +174,13 @@ int comphy_ap806_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy
 		debug("Initialize serdes number %d\n", lane);
 		debug("Serdes type = 0x%x\n", ptr_comphy_map->type);
 		switch (ptr_comphy_map->type) {
-		case UNCONNECTED:
+		case PHY_TYPE_UNCONNECTED:
 			continue;
 			break;
-		case PEX0:
-		case PEX1:
-		case PEX2:
-		case PEX3:
+		case PHY_TYPE_PEX0:
+		case PHY_TYPE_PEX1:
+		case PHY_TYPE_PEX2:
+		case PHY_TYPE_PEX3:
 			ret = comphy_pcie_power_up(lane, pcie_by4, HPIPE_ADDR(hpipe_base_addr, lane));
 			udelay(20);
 			break;
diff --git a/drivers/phy/comphy_core.c b/drivers/phy/comphy_core.c
index 9e1e047..b361ef1 100644
--- a/drivers/phy/comphy_core.c
+++ b/drivers/phy/comphy_core.c
@@ -55,24 +55,24 @@ struct chip_serdes_phy_config *get_chip_config(enum fdt_compat_id compat)
 	return NULL;
 }
 
-static char *get_speed_string(enum phy_speed speed)
+static char *get_speed_string(u32 speed)
 {
 	char *speed_strings[] = {"1.25Gbps", "1.5Gbps", "2.5Gbps", "3.0Gbps",
 				"3.25Gbps", "5Gbps", "6Gbps", "6.25Gbps",
 				"10.315Gbps" };
-	if (speed < __1_25gbps || speed > __10_3125gbps)
+	if (speed < 0 || speed > PHY_SPEED_MAX)
 		return "invalid";
 	return speed_strings[speed];
 }
 
-static char *get_type_string(enum phy_type type)
+static char *get_type_string(u32 type)
 {
 	char *type_strings[] = {"unconnected", "PEX0", "PEX1", "PEX2", "PEX3",
 				"SATA0", "SATA1", "SATA2", "SATA3", "SGMII0",
 				"SGMII1", "SGMII2", "SGMII3", "QSGMII", "USB3_HOST0",
 				"USB3_HOST1", "USB3_DEVICE", "XAUI0", "XAUI1",
 				"XAUI2", "XAUI3", "RXAUI0", "RXAUI1", "KR"};
-	if (type < UNCONNECTED || type > KR)
+	if (type < 0 || type > PHY_TYPE_MAX)
 		return "invalid";
 	return type_strings[type];
 }
@@ -181,17 +181,18 @@ u32 comphy_init(const void *blob)
 		max_comphy_count = ptr_chip_cfg->comphy_lanes_count;
 		lane = 0;
 		do {
-			comphy_map_data[lane].speed = fdtdec_get_int(blob, sub_node, "phy-speed", INVALID_SPEED);
-			comphy_map_data[lane].type = fdtdec_get_int(blob, sub_node, "phy-type", INVALID_TYPE);
-			if (comphy_map_data[lane].speed == INVALID_SPEED || comphy_map_data[lane].type == INVALID_TYPE)
+			comphy_map_data[lane].speed = fdtdec_get_int(blob, sub_node, "phy-speed", PHY_TYPE_INVALID);
+			comphy_map_data[lane].type = fdtdec_get_int(blob, sub_node, "phy-type", PHY_SPEED_INVALID);
+			if ((comphy_map_data[lane].speed == PHY_TYPE_INVALID) ||
+			    (comphy_map_data[lane].type == PHY_SPEED_INVALID))
 				printf("no phy speed or type for lane %d, setting lane as unconnedted\n", lane + 1);
 			sub_node = fdt_next_subnode(blob, sub_node);
 			lane++;
 		} while (sub_node > 0);
 		while (lane < max_comphy_count) {
 			printf("no phy configuration for lane %d, setting lane as unconnected\n", lane + 1);
-			comphy_map_data[lane].type = UNCONNECTED;
-			comphy_map_data[lane].speed = INVALID_SPEED;
+			comphy_map_data[lane].type = PHY_TYPE_UNCONNECTED;
+			comphy_map_data[lane].speed = PHY_TYPE_INVALID;
 			lane++;
 		}
 
diff --git a/drivers/phy/comphy_cp110.c b/drivers/phy/comphy_cp110.c
index 33f22fc..8020374 100644
--- a/drivers/phy/comphy_cp110.c
+++ b/drivers/phy/comphy_cp110.c
@@ -35,24 +35,31 @@
    PHY selector include the Ethernet and SATA options, every Ethernet option has different options,
    for example: serdes lane2 had option Eth_port_0 that include (SGMII0, XAUI0, RXAUI0, KR) */
 struct comphy_mux_data cp110_comphy_phy_mux_data[] = {
-/* Lane 0 */ {4, {{UNCONNECTED, 0x0}, {SGMII2, 0x1}, {XAUI2, 0x1}, {SATA1, 0x4} } },
-/* Lane 1 */ {4, {{UNCONNECTED, 0x0}, {SGMII3, 0x1}, {XAUI3, 0x1}, {SATA1, 0x4} } },
-/* Lane 2 */ {6, {{UNCONNECTED, 0x0}, {SGMII0, 0x1}, {XAUI0, 0x1}, {RXAUI0, 0x1}, {KR, 0x1}, {SATA0, 0x4} } },
-/* Lane 3 */ {8, {{UNCONNECTED, 0x0}, {SGMII0, 0x1}, {XAUI0, 0x1}, {RXAUI0, 0x1}, {KR, 0x1},
-					 {XAUI1, 0x1}, {RXAUI1, 0x1}, {SATA1, 0x4} } },
-/* Lane 4 */ {7, {{UNCONNECTED, 0x0}, {SGMII0, 0x1}, {XAUI0, 0x1}, {RXAUI0, 0x1}, {KR, 0x1},
-					{SGMII2, 0x1}, {XAUI2, 0x1} } },
-/* Lane 5 */ {6, {{UNCONNECTED, 0x0}, {XAUI1, 0x1}, {RXAUI1, 0x1}, {SGMII3, 0x1},
-					{XAUI3, 0x1}, {SATA1, 0x4} } },
+/* Lane 0 */ {4, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_SGMII2, 0x1},
+			{PHY_TYPE_XAUI2, 0x1}, {PHY_TYPE_SATA1, 0x4} } },
+/* Lane 1 */ {4, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_SGMII3, 0x1},
+			{PHY_TYPE_XAUI3, 0x1}, {PHY_TYPE_SATA1, 0x4} } },
+/* Lane 2 */ {6, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_SGMII0, 0x1},
+			{PHY_TYPE_XAUI0, 0x1}, {PHY_TYPE_RXAUI0, 0x1}, {PHY_TYPE_KR, 0x1}, {PHY_TYPE_SATA0, 0x4} } },
+/* Lane 3 */ {8, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_SGMII0, 0x1}, {PHY_TYPE_XAUI0, 0x1}, {PHY_TYPE_RXAUI0, 0x1},
+			{PHY_TYPE_KR, 0x1}, {PHY_TYPE_XAUI1, 0x1}, {PHY_TYPE_RXAUI1, 0x1}, {PHY_TYPE_SATA1, 0x4} } },
+/* Lane 4 */ {7, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_SGMII0, 0x1}, {PHY_TYPE_XAUI0, 0x1},
+			{PHY_TYPE_RXAUI0, 0x1}, {PHY_TYPE_KR, 0x1}, {PHY_TYPE_SGMII2, 0x1}, {PHY_TYPE_XAUI2, 0x1} } },
+/* Lane 5 */ {6, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_XAUI1, 0x1}, {PHY_TYPE_RXAUI1, 0x1}, {PHY_TYPE_SGMII3, 0x1},
+					{PHY_TYPE_XAUI3, 0x1}, {PHY_TYPE_SATA1, 0x4} } },
 };
 
 struct comphy_mux_data cp110_comphy_pipe_mux_data[] = {
-/* Lane 0 */ {2, {{UNCONNECTED, 0x0}, {PEX0, 0x4} } },
-/* Lane 1 */ {4, {{UNCONNECTED, 0x0}, {USB3_HOST0, 0x1}, {USB3_DEVICE, 0x2}, {PEX0, 0x4} } },
-/* Lane 2 */ {3, {{UNCONNECTED, 0x0}, {USB3_HOST0, 0x1}, {PEX0, 0x4} } },
-/* Lane 3 */ {3, {{UNCONNECTED, 0x0}, {USB3_HOST1, 0x1}, {PEX0, 0x4} } },
-/* Lane 4 */ {4, {{UNCONNECTED, 0x0}, {USB3_HOST1, 0x1}, {USB3_DEVICE, 0x2}, {PEX0, 0x4} } },
-/* Lane 5 */ {2, {{UNCONNECTED, 0x0}, {PEX1, 0x4} } },
+/* Lane 0 */ {2, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_PEX0, 0x4} } },
+/* Lane 1 */ {4, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_USB3_HOST0, 0x1},
+			{PHY_TYPE_USB3_DEVICE, 0x2}, {PHY_TYPE_PEX0, 0x4} } },
+/* Lane 2 */ {3, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_USB3_HOST0, 0x1},
+			{PHY_TYPE_PEX0, 0x4} } },
+/* Lane 3 */ {3, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_USB3_HOST1, 0x1},
+			{PHY_TYPE_PEX0, 0x4} } },
+/* Lane 4 */ {4, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_USB3_HOST1, 0x1},
+			{PHY_TYPE_USB3_DEVICE, 0x2}, {PHY_TYPE_PEX0, 0x4} } },
+/* Lane 5 */ {2, {{PHY_TYPE_UNCONNECTED, 0x0}, {PHY_TYPE_PEX1, 0x4} } },
 };
 
 static int comphy_pcie_power_up(u32 lane, u32 pcie_by4, void __iomem *hpipe_addr)
@@ -335,8 +342,9 @@ static void comphy_mux_cp110_init(struct chip_serdes_phy_config *ptr_chip_cfg, s
 	comphy_mux_init(ptr_chip_cfg, comphy_map_pipe_data, comphy_base_addr + COMMON_SELECTOR_PIPE_OFFSET);
 	/* Fix the type after check the PHY and PIPE configuration */
 	for (lane = 0; lane < comphy_max_count; lane++)
-		if (comphy_map_pipe_data[lane].type == UNCONNECTED && comphy_map_phy_data[lane].type == UNCONNECTED)
-			serdes_map[lane].type = UNCONNECTED;
+		if ((comphy_map_pipe_data[lane].type == PHY_TYPE_UNCONNECTED) &&
+		    (comphy_map_phy_data[lane].type == PHY_TYPE_UNCONNECTED))
+			serdes_map[lane].type = PHY_TYPE_UNCONNECTED;
 }
 int comphy_cp110_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy_map *serdes_map)
 {
@@ -355,7 +363,7 @@ int comphy_cp110_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy
 
 	/* Check if the first 4 lanes configured as By-4 */
 	for (lane = 0, ptr_comphy_map = serdes_map; lane < 4; lane++, ptr_comphy_map++) {
-		if (ptr_comphy_map->type != PEX0) {
+		if (ptr_comphy_map->type != PHY_TYPE_PEX0) {
 			pcie_by4 = 0;
 			break;
 		}
@@ -365,23 +373,23 @@ int comphy_cp110_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy
 		debug("Initialize serdes number %d\n", lane);
 		debug("Serdes type = 0x%x\n", ptr_comphy_map->type);
 		switch (ptr_comphy_map->type) {
-		case UNCONNECTED:
+		case PHY_TYPE_UNCONNECTED:
 			continue;
 			break;
-		case PEX0:
-		case PEX1:
-		case PEX2:
-		case PEX3:
+		case PHY_TYPE_PEX0:
+		case PHY_TYPE_PEX1:
+		case PHY_TYPE_PEX2:
+		case PHY_TYPE_PEX3:
 			ret = comphy_pcie_power_up(lane, pcie_by4, HPIPE_ADDR(hpipe_base_addr, lane));
 			break;
-		case SATA0:
-		case SATA1:
-		case SATA2:
-		case SATA3:
+		case PHY_TYPE_SATA0:
+		case PHY_TYPE_SATA1:
+		case PHY_TYPE_SATA2:
+		case PHY_TYPE_SATA3:
 			ret = comphy_sata_power_up(lane, hpipe_base_addr, comphy_base_addr);
 			break;
-		case USB3_HOST0:
-		case USB3_HOST1:
+		case PHY_TYPE_USB3_HOST0:
+		case PHY_TYPE_USB3_HOST1:
 			ret = comphy_usb3_power_up(lane, hpipe_base_addr, comphy_base_addr);
 			break;
 		default:
diff --git a/drivers/phy/comphy_mux.c b/drivers/phy/comphy_mux.c
index 386f458..ad43d0d 100644
--- a/drivers/phy/comphy_mux.c
+++ b/drivers/phy/comphy_mux.c
@@ -26,7 +26,7 @@
 /* comphy_mux_check_config
  * description: this function passes over the COMPHY lanes and check if the type
  *              is valid for specific lane. If the type is not valid, the function
- *              update the struct and set the type of the lane as UNCONNECTED */
+ *              update the struct and set the type of the lane as PHY_TYPE_UNCONNECTED */
 static void comphy_mux_check_config(struct comphy_mux_data *mux_data,
 		struct comphy_map *comphy_map_data, int comphy_max_lanes)
 {
@@ -44,8 +44,8 @@ static void comphy_mux_check_config(struct comphy_mux_data *mux_data,
 		}
 		if (valid == 0) {
 			debug("lane number %d, had invalid type %d\n", lane, comphy_map_data->type);
-			debug("set lane %d as type %d\n", lane, UNCONNECTED);
-			comphy_map_data->type = UNCONNECTED;
+			debug("set lane %d as type %d\n", lane, PHY_TYPE_UNCONNECTED);
+			comphy_map_data->type = PHY_TYPE_UNCONNECTED;
 		} else {
 			debug("lane number %d, has type %d\n", lane, comphy_map_data->type);
 		}
@@ -53,7 +53,7 @@ static void comphy_mux_check_config(struct comphy_mux_data *mux_data,
 	debug_exit();
 }
 
-static u32 comphy_mux_get_mux_value(struct comphy_mux_data *mux_data, enum phy_type type, int lane)
+static u32 comphy_mux_get_mux_value(struct comphy_mux_data *mux_data, u32 type, int lane)
 {
 	struct comphy_mux_options *ptr_mux_opt;
 	int opt;
diff --git a/include/dt-bindings/comphy/comphy_data.h b/include/dt-bindings/comphy/comphy_data.h
index 19050cf..ca62f41 100644
--- a/include/dt-bindings/comphy/comphy_data.h
+++ b/include/dt-bindings/comphy/comphy_data.h
@@ -28,6 +28,8 @@
 #define PHY_SPEED_6G			6
 #define PHY_SPEED_6_25G			7
 #define PHY_SPEED_10_3125G		8
+#define PHY_SPEED_MAX			9
+#define PHY_SPEED_INVALID		0xff
 
 #define PHY_TYPE_UNCONNECTED		0
 #define PHY_TYPE_PEX0			1
@@ -53,6 +55,8 @@
 #define PHY_TYPE_RXAUI0			21
 #define PHY_TYPE_RXAUI1			22
 #define PHY_TYPE_KR			23
+#define PHY_TYPE_MAX			24
+#define PHY_TYPE_INVALID		0xff
 
 #endif /* _COMPHY_DATA_H_ */
 
-- 
1.9.1

