From 5a74936c88d034a911d1068ecd704d2f9be4f006 Mon Sep 17 00:00:00 2001
From: Omri Itach <omrii@marvell.com>
Date: Thu, 28 Jan 2016 14:12:19 +0200
Subject: [PATCH 0766/1240] usb: a3700: enable USB VBUS configuration for USB3

- Added USB VBUS API for A3700 SoC.
- A3700 DB board has VBUS control for USB Type-C connector only,
  via I2C IO expander (I2C device at address 0x22, Register 0, BIT 1).
- implemented full flow of setting IO pin as output, lower VBUS signal,
  delay until signal settle, and enable VBUS power.

- currently implemented hard-coded - to be replaced with Device tree support.

Change-Id: Id433cc51244da9ab7fb65444e6aab169372a834a
Signed-off-by: Omri Itach <omrii@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27074
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/cpu/armv8/armadalp/soc-init.c | 64 +++++++++++++++++++++++++++++-----
 1 file changed, 56 insertions(+), 8 deletions(-)

diff --git a/arch/arm/cpu/armv8/armadalp/soc-init.c b/arch/arm/cpu/armv8/armadalp/soc-init.c
index 9cb82a2..e53c047 100644
--- a/arch/arm/cpu/armv8/armadalp/soc-init.c
+++ b/arch/arm/cpu/armv8/armadalp/soc-init.c
@@ -26,11 +26,14 @@
 #include <asm/arch-mvebu/mbus.h>
 #include <asm/arch-mvebu/pinctl.h>
 #include <i2c.h>
+#include <libfdt.h>
 
 /* IO expander I2C device */
-#define I2C_DEV_IO_EXPANDER	0x22
-#define  CONFIG_PORT_0_REG	0x6
-#define  CONFIG_PORT_0_SATA_OFF	2
+#define I2C_IO_EXP_ADDR	0x22
+#define I2C_IO_CFG_REG_0	0x6
+#define I2C_IO_DATA_OUT_REG_0	0x2
+#define I2C_IO_REG_0_SATA_OFF	2
+#define I2C_IO_REG_0_USB_H_OFF	1
 
 /* NB warm reset */
 #define MVEBU_NB_WARM_RST_REG	(MVEBU_GPIO_NB_REG_BASE + 0x40)
@@ -170,7 +173,7 @@ void reset_cpu(ulong ignored)
 void board_ahci_power_on(void)
 {
 /* This I2C IO expander configuration is board specific,
- * and adequete only to Marvell A3700 DB board
+ * and adequate only to Marvell A3700 DB board
  */
 #ifdef CONFIG_DEVEL_BOARD
 	int ret;
@@ -179,12 +182,12 @@ void board_ahci_power_on(void)
 	/* Enable power of SATA by set IO expander via I2C,
 	 * to set corresponding bit to output mode to enable the power for SATA.
 	 */
-	ret = i2c_read(I2C_DEV_IO_EXPANDER, CONFIG_PORT_0_REG, sizeof(unsigned char), buffer, sizeof(buffer));
+	ret = i2c_read(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char), buffer, sizeof(buffer));
 	if (ret)
 		error("failed to read IO expander value via I2C\n");
 
-	buffer[0] &= ~(1 << CONFIG_PORT_0_SATA_OFF);
-	ret = i2c_write(I2C_DEV_IO_EXPANDER, CONFIG_PORT_0_REG, sizeof(unsigned char), buffer, sizeof(buffer));
+	buffer[0] &= ~(1 << I2C_IO_REG_0_SATA_OFF);
+	ret = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char), buffer, sizeof(buffer));
 	if (ret)
 		error("failed to set IO expander via I2C\n");
 #endif /* CONFIG_DEVEL_BOARD */
@@ -194,6 +197,51 @@ void board_ahci_power_on(void)
 #ifdef CONFIG_USB_XHCI
 void board_usb_vbus_set(void)
 {
-	/* TBD - implement VBUS cycle for here*/
+/* Set USB VBUS signals (via I2C IO expander/GPIO) as output and set output value as enabled */
+#ifdef CONFIG_DEVEL_BOARD
+/* This I2C IO expander configuration is board specific, only to Marvell A3700 DB board.
+ * (I2C device at address 0x22, Register 0, BIT 1) */
+	int ret_read, ret_write;
+	unsigned char cfg_val[1], out_val[1];
+	const void *blob = gd->fdt_blob;
+
+	/* Make sure board is supported (currently only A3700-DB is supported) */
+	if (fdt_node_check_compatible(blob, 0, "marvell,armada-lp-db0") != 0) {
+		error("Missing USB VBUS power configuration for current board.\n");
+		return;
+	}
+
+	/* initialize I2C */
+	init_func_i2c();
+
+	/* Read configuration (direction) and set VBUS pin as output (reset pin = output) */
+	ret_read = i2c_read(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char), cfg_val, sizeof(cfg_val));
+	cfg_val[0] &= ~(1 << I2C_IO_REG_0_USB_H_OFF);
+	ret_write = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char),
+			cfg_val, sizeof(cfg_val));
+	if (ret_read || ret_write)
+		error("failed to set USB VBUS configuration on I2C IO expander\n");
+
+	/* Read VBUS output value, and disable it */
+	ret_read = i2c_read(I2C_IO_EXP_ADDR, I2C_IO_DATA_OUT_REG_0, sizeof(unsigned char), out_val, sizeof(out_val));
+	out_val[0] &= ~(1 << I2C_IO_REG_0_USB_H_OFF);
+
+	ret_write = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_DATA_OUT_REG_0, sizeof(unsigned char), out_val, sizeof(out_val));
+	if (ret_read || ret_write)
+		error("failed to lower USB VBUS power on I2C IO expander\n");
+
+	udelay(500000); /* required delay to let output value settle */
+
+	/* Enable VBUS power: Set output value of VBUS pin as enabled */
+	out_val[0] |= (1 << I2C_IO_REG_0_USB_H_OFF);
+
+	ret_write = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_DATA_OUT_REG_0, sizeof(unsigned char), out_val, sizeof(out_val));
+	if (ret_write)
+		error("failed to raise USB VBUS power on I2C IO expander\n");
+
+	udelay(500000);/* required delay to let output value settle */
+
+#endif /* CONFIG_DEVEL_BOARD */
+
 }
 #endif
-- 
1.9.1

