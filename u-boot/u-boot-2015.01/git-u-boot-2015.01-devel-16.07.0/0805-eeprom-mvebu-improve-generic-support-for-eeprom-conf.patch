From 7714d619070205eab6f31c8f9babc2cf888cd05e Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Thu, 28 Jan 2016 17:03:22 +0800
Subject: [PATCH 0805/1240] eeprom: mvebu: improve generic support for eeprom
 configuration

- Re-write fdt_eeprom to support a generic configuration EEPROM.
- Add Kconfig for configuration EEPROM and modify the makefile.
- Init the EEPROM in init.c and spl.c by calling cfg_eeprom_init.
- FDT will get DT file by calling cfg_eeprom_get_fdt.
- File names will be changed in the coming patch

Change-Id: I01d31f4d50557869d8af6d2b2163fda5a94abc74
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27057
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/cpu/armv8/armada8k/spl.c     |   4 +
 arch/arm/cpu/armv8/armadalp/spl.c     |   4 +
 arch/arm/cpu/mvebu-common/fdt.c       |   2 +-
 arch/arm/include/asm/arch-mvebu/fdt.h |   6 +-
 board/mvebu/common/Kconfig            |  10 +++
 board/mvebu/common/Makefile           |   2 +-
 board/mvebu/common/fdt_config.c       |  54 +++++++------
 board/mvebu/common/fdt_config.h       |   1 -
 board/mvebu/common/fdt_eeprom.c       | 145 ++++++++++++++++++++++------------
 board/mvebu/common/fdt_eeprom.h       |  40 +++++-----
 board/mvebu/common/init.c             |   7 ++
 common/mvebu/cmd_fdt_config.c         |   5 +-
 12 files changed, 178 insertions(+), 102 deletions(-)

diff --git a/arch/arm/cpu/armv8/armada8k/spl.c b/arch/arm/cpu/armv8/armada8k/spl.c
index 6a17469..146bfc4 100644
--- a/arch/arm/cpu/armv8/armada8k/spl.c
+++ b/arch/arm/cpu/armv8/armada8k/spl.c
@@ -45,6 +45,10 @@ void board_init_f(ulong silent)
 	     tree for the SoC, required for i2c initialization to read EEPROM data */
 	setup_fdt();
 
+#ifdef CONFIG_BOARD_CONFIG_EEPROM
+	cfg_eeprom_init();
+#endif
+
 #ifdef CONFIG_MULTI_DT_FILE
 	/* Update gd->fdt_blob according to multi-fdt data in eeprom */
 	mvebu_setup_fdt();
diff --git a/arch/arm/cpu/armv8/armadalp/spl.c b/arch/arm/cpu/armv8/armadalp/spl.c
index 1ae0b8c..0795e37 100644
--- a/arch/arm/cpu/armv8/armadalp/spl.c
+++ b/arch/arm/cpu/armv8/armadalp/spl.c
@@ -65,6 +65,10 @@ void board_init_f(ulong silent)
 	mvebu_init_gpio();
 #endif
 
+#ifdef CONFIG_BOARD_CONFIG_EEPROM
+	cfg_eeprom_init();
+#endif
+
 #ifdef CONFIG_MULTI_DT_FILE
 	/* Update gd->fdt_blob according to multi-fdt data in eeprom */
 	mvebu_setup_fdt();
diff --git a/arch/arm/cpu/mvebu-common/fdt.c b/arch/arm/cpu/mvebu-common/fdt.c
index c80dfcf..f721024 100644
--- a/arch/arm/cpu/mvebu-common/fdt.c
+++ b/arch/arm/cpu/mvebu-common/fdt.c
@@ -37,7 +37,7 @@ int setup_fdt(void)
 #ifdef CONFIG_MULTI_DT_FILE
 int mvebu_setup_fdt(void)
 {
-	gd->fdt_blob = mvebu_fdt_config_init();
+	gd->fdt_blob = cfg_eeprom_get_fdt();
 	return 0;
 }
 #endif
diff --git a/arch/arm/include/asm/arch-mvebu/fdt.h b/arch/arm/include/asm/arch-mvebu/fdt.h
index c6c3784..fe46177 100644
--- a/arch/arm/include/asm/arch-mvebu/fdt.h
+++ b/arch/arm/include/asm/arch-mvebu/fdt.h
@@ -30,7 +30,11 @@ int setup_fdt(void);
 
 #ifdef CONFIG_MULTI_DT_FILE
 int mvebu_setup_fdt(void);
-u8 *mvebu_fdt_config_init(void);
+#endif
+
+#ifdef CONFIG_BOARD_CONFIG_EEPROM
+int cfg_eeprom_init(void);
+uint8_t *cfg_eeprom_get_fdt(void);
 #endif
 
 void *fdt_get_regs_offs(const void *blob, int node, const char *prop_name);
diff --git a/board/mvebu/common/Kconfig b/board/mvebu/common/Kconfig
index 5abd488..2846b75 100644
--- a/board/mvebu/common/Kconfig
+++ b/board/mvebu/common/Kconfig
@@ -14,10 +14,20 @@ config MULTI_DT_FILE
 	bool "Support multi DT files in U-boot image"
 	depends on OF_CONTROL
 	default y
+	select BOARD_CONFIG_EEPROM
 	help
 	  If this option is enabled, U-Boot will support different DT files.
 	  Each FDT has a fixed size of 7KB, so to choose between them in u-boot,
 	  it will be executerd by a jump of 7KB.
 	  The u-boot separates between the DTB by the flavor/board id
 
+config BOARD_CONFIG_EEPROM
+	bool "Support configuration EEPROM"
+	default n
+	help
+	  If this option is enabled, U-Boot will initialize
+	  configuration EEPROM on board.
+	  It will be enabled once the CMD_MVEBU_BOX_INFO or
+	  MULTI_DT_FILE is enabled
+
 endmenu
diff --git a/board/mvebu/common/Makefile b/board/mvebu/common/Makefile
index 7dbdd5c..69df409 100644
--- a/board/mvebu/common/Makefile
+++ b/board/mvebu/common/Makefile
@@ -21,5 +21,5 @@ obj-y	+= init.o
 obj-$(CONFIG_CMD_NET)		+= eth_init.o
 obj-$(CONFIG_MVEBU_SAR)		+= sar.o
 obj-$(CONFIG_DEVEL_BOARD)	+= devel-board.o
-obj-$(CONFIG_MULTI_DT_FILE)	+= fdt_eeprom.o
+obj-$(CONFIG_BOARD_CONFIG_EEPROM)	+= fdt_eeprom.o
 obj-$(CONFIG_MULTI_DT_FILE)	+= fdt_config.o
diff --git a/board/mvebu/common/fdt_config.c b/board/mvebu/common/fdt_config.c
index da5761b..b28e68a 100644
--- a/board/mvebu/common/fdt_config.c
+++ b/board/mvebu/common/fdt_config.c
@@ -32,6 +32,7 @@ static int fdt_list_of_configs[MV_MAX_FDT_CONFIGURATION] = {-1};
 int fdt_select_set(const char *selected_index)
 {
 	int i, index_int;
+	struct eeprom_struct *p_board_config;
 
 	if (fdt_list_size == -1) {
 		printf("FDT configuration list is not available.\n");
@@ -40,9 +41,10 @@ int fdt_select_set(const char *selected_index)
 	}
 
 	index_int = (int)simple_strtoul(selected_index, NULL, 16);
+	p_board_config = cfg_eeprom_get_board_config();
 	for (i = 0; i < fdt_list_size ; i++) {
 		if (index_int == fdt_list_of_configs[i]) {
-			fdt_config_val.board_config.active_fdt_selection = fdt_list_of_configs[i];
+			p_board_config->board_config.active_fdt_selection = fdt_list_of_configs[i];
 			printf("To save the changes, please run the command fdt_config save.\n");
 			return 0;
 		}
@@ -52,17 +54,19 @@ int fdt_select_set(const char *selected_index)
 	return 1;
 }
 
-/* fdt_select_list - print list of all fdt_config_id that compatible to the boardID */
+/* fdt_select_list - print list of all fdt_config_id */
 int fdt_select_list(void)
 {
 	int i, fdt_config_id;
 	char *fdt_model;
 	void *fdt_blob_temp = __dtb_dt_begin;
+	struct eeprom_struct *p_board_config;
 
 	fdt_list_size = 0;
+	p_board_config = cfg_eeprom_get_board_config();
 	printf("FDT config list:\n");
 	for (i = 0; fdt_check_header(fdt_blob_temp) == 0; i++) {
-		if ((u8)fdtdec_get_int(fdt_blob_temp, 0, "board_id", -1) == fdt_config_val.man_info.boardid) {
+		if ((u8)fdtdec_get_int(fdt_blob_temp, 0, "board_id", -1) == p_board_config->man_info.boardid) {
 			fdt_list_size++;
 			fdt_model = (char *)fdt_getprop(fdt_blob_temp, 0, "model", NULL);
 			fdt_config_id = fdtdec_get_int(fdt_blob_temp, 0, "fdt_config_id", -1);
@@ -77,8 +81,11 @@ int fdt_select_list(void)
 /* fdt_cfg_read_eeprom - write FDT from EEPROM to local struct and set 'fdt addr' environment variable */
 void fdt_cfg_read_eeprom(void)
 {
-	if (upload_fdt_from_eeprom()) {
-		set_working_fdt_addr(fdt_config_val.fdt_blob);
+	struct eeprom_struct *p_board_config;
+
+	p_board_config = cfg_eeprom_get_board_config();
+	if (cfg_eeprom_upload_fdt_from_eeprom()) {
+		set_working_fdt_addr(p_board_config->fdt_blob);
 		printf("Loaded FDT from EEPROM successfully\n");
 		printf("To save the changes, please run the command fdt_config save.\n");
 	}
@@ -89,6 +96,7 @@ void fdt_cfg_read_eeprom(void)
 int fdt_cfg_read_flash(const char *selected_index)
 {
 	int i, index_int;
+	struct eeprom_struct *p_board_config;
 
 	if (fdt_list_size == -1) {
 		printf("FDT configuration list is not available.\n");
@@ -97,10 +105,11 @@ int fdt_cfg_read_flash(const char *selected_index)
 	}
 
 	index_int = (int)simple_strtoul(selected_index, NULL, 16);
+	p_board_config = cfg_eeprom_get_board_config();
 	for (i = 0; i < fdt_list_size ; i++) {
 		if (index_int == fdt_list_of_configs[i]) {
-			upload_fdt_from_flash(fdt_list_of_configs[i]);
-			set_working_fdt_addr(fdt_config_val.fdt_blob);
+			cfg_eeprom_upload_fdt_from_flash(fdt_list_of_configs[i]);
+			set_working_fdt_addr(p_board_config->fdt_blob);
 			printf("To save the changes, please run the command fdt_config save.\n");
 			return 0;
 		}
@@ -109,27 +118,19 @@ int fdt_cfg_read_flash(const char *selected_index)
 	return 1;
 }
 
-/* fdt_cfg_save - write the local struct to EEPROM */
-int fdt_cfg_save(void)
-{
-	/* calculate checksum and save it in struct */
-	fdt_config_val.checksum = mvebu_checksum8((uint8_t *)&fdt_config_val.pattern,
-						   (uint32_t) fdt_config_val.length - 4);
-	/* write fdt struct to EEPROM */
-	write_fdt_struct_to_eeprom();
-	return 0;
-}
-
 /* fdt_cfg_on - enable read FDT from EEPROM */
 int fdt_cfg_on(void)
 {
-	if (fdt_config_is_enable() == false) {
-		fdt_config_val.length += MVEBU_FDT_SIZE;
-		fdt_config_val.board_config.fdt_cfg_en = 1;
+	struct eeprom_struct *p_board_config;
+
+	p_board_config = cfg_eeprom_get_board_config();
+	if (cfg_eeprom_fdt_config_is_enable() == false) {
+		p_board_config->length += MVEBU_FDT_SIZE;
+		p_board_config->board_config.fdt_cfg_en = 1;
 	}
 	printf("Do you want to read FDT from EEPROM? <y/N> ");
 	if (confirm_yesno()) {
-		if (upload_fdt_from_eeprom())
+		if (cfg_eeprom_upload_fdt_from_eeprom())
 			printf("Load fdt from EEprom\n");
 	}
 	printf("To save the changes, please run the command fdt_config save.\n");
@@ -139,9 +140,12 @@ int fdt_cfg_on(void)
 /* fdt_cfg_on - disable read FDT from EEPROM */
 int fdt_cfg_off(void)
 {
-	if (fdt_config_is_enable()) {
-		fdt_config_val.length -= MVEBU_FDT_SIZE;
-		fdt_config_val.board_config.fdt_cfg_en = 0;
+	struct eeprom_struct *p_board_config;
+
+	p_board_config = cfg_eeprom_get_board_config();
+	if (cfg_eeprom_fdt_config_is_enable()) {
+		p_board_config->length -= MVEBU_FDT_SIZE;
+		p_board_config->board_config.fdt_cfg_en = 0;
 	}
 	printf("config fdt is now disable\n");
 	printf("To save the changes, please run the command fdt_config save.\n");
diff --git a/board/mvebu/common/fdt_config.h b/board/mvebu/common/fdt_config.h
index 1a6096b..aa56906 100644
--- a/board/mvebu/common/fdt_config.h
+++ b/board/mvebu/common/fdt_config.h
@@ -21,7 +21,6 @@
 
 void fdt_cfg_read_eeprom(void);
 int fdt_cfg_read_flash(const char *selected_index);
-int fdt_cfg_save(void);
 int fdt_cfg_on(void);
 int fdt_cfg_off(void);
 int fdt_select_set(const char *selected_index);
diff --git a/board/mvebu/common/fdt_eeprom.c b/board/mvebu/common/fdt_eeprom.c
index 769ac88..3b6f1d2 100644
--- a/board/mvebu/common/fdt_eeprom.c
+++ b/board/mvebu/common/fdt_eeprom.c
@@ -15,7 +15,6 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  * ***************************************************************************
  */
-
 #include <common.h>
 #include <asm/arch-mvebu/soc.h>
 #include <fdtdec.h>
@@ -23,11 +22,12 @@
 #include "fdt_eeprom.h"
 
 u8 mapping_default_fdt[] = DEFAULT_FDT_PER_BOARD;
-struct eeprom_struct fdt_config_val = FDT_DEFAULT_VALUE;
-struct board_config_struct_info *board_cfg = &(fdt_config_val.board_config);
-struct fdt_config_types_info fdt_config_types_info[] = MV_EEPROM_CONFIG_INFO;
+struct eeprom_struct board_config_val = CFG_DEFAULT_VALUE;
+struct board_config_struct *board_cfg = &(board_config_val.board_config);
+struct config_types_info config_types_info[] = MV_EEPROM_CONFIG_INFO;
+int eeprom_initialized = -1;
 
-uint32_t mvebu_checksum8(uint8_t *start, uint32_t len)
+static uint32_t cfg_eeprom_checksum8(uint8_t *start, uint32_t len)
 {
 	uint32_t sum = 0;
 	uint8_t *startp = start;
@@ -38,23 +38,27 @@ uint32_t mvebu_checksum8(uint8_t *start, uint32_t len)
 	} while (len > 0);
 	return sum;
 }
-/* fdt_config_is_enable - checking if need to load FDT from EEPROM at boot-time */
-bool fdt_config_is_enable(void)
+
+/* cfg_eeprom_fdt_config_is_enable - checking if need to load FDT from EEPROM at boot-time */
+bool cfg_eeprom_fdt_config_is_enable(void)
 {
 	if (board_cfg->fdt_cfg_en == 1)
 		return true;
 	return false;
 }
 
-/* config_type_get - config_info input pointer receive the mapping of the required field in the local struct */
-bool config_type_get(enum mv_config_type_id config_class, struct fdt_config_types_info *config_info)
+/* cfg_eeprom_get_config_type
+ * config_info input pointer receive the mapping of the
+ * required field in the local struct
+ */
+static bool cfg_eeprom_get_config_type(enum mv_config_type_id config_class, struct config_types_info *config_info)
 {
 	int i;
 
 	/* verify existence of requested config type, pull its data */
 	for (i = 0; i < MV_CONFIG_TYPE_MAX_OPTION ; i++)
-		if (fdt_config_types_info[i].config_id == config_class) {
-			*config_info = fdt_config_types_info[i];
+		if (config_types_info[i].config_id == config_class) {
+			*config_info = config_types_info[i];
 			return true;
 		}
 	error("requested MV_CONFIG_TYPE_ID was not found (%d)\n", config_class);
@@ -62,8 +66,11 @@ bool config_type_get(enum mv_config_type_id config_class, struct fdt_config_type
 	return false;
 }
 
-/* upload_fdt_from_flash - write the required FDT to local struct, if found fdt config id in flash, else return false*/
-bool upload_fdt_from_flash(u8 fdt_config_id)
+/* cfg_eeprom_upload_fdt_from_flash
+ * write the required FDT to local struct,
+ * if found fdt config id in flash, else return false
+ */
+bool cfg_eeprom_upload_fdt_from_flash(u8 fdt_config_id)
 {
 	int i;
 	void *fdt_blob_temp = __dtb_dt_begin;
@@ -71,7 +78,7 @@ bool upload_fdt_from_flash(u8 fdt_config_id)
 	debug("FDT config id = %x\n", fdt_config_id);
 	for (i = 0; fdt_check_header(fdt_blob_temp) == 0; i++) {
 		if ((u8)fdtdec_get_int(fdt_blob_temp, 0, "fdt_config_id", -1) == fdt_config_id) {
-			memcpy((void *)fdt_config_val.fdt_blob, fdt_blob_temp, MVEBU_FDT_SIZE);
+			memcpy((void *)board_config_val.fdt_blob, fdt_blob_temp, MVEBU_FDT_SIZE);
 			return true;
 		}
 		fdt_blob_temp += MVEBU_FDT_SIZE;
@@ -79,69 +86,102 @@ bool upload_fdt_from_flash(u8 fdt_config_id)
 	return false;
 }
 
-/* upload_fdt_from_eeprom - write FDT from EEPROM to local struct */
-bool upload_fdt_from_eeprom(void)
+/* cfg_eeprom_upload_fdt_from_eeprom - write FDT from EEPROM to local struct */
+bool cfg_eeprom_upload_fdt_from_eeprom(void)
 {
-	struct fdt_config_types_info config_info;
+	struct config_types_info config_info;
 
 	/* read fdt from EEPROM */
-	if (!config_type_get(MV_CONFIG_FDT_FILE, &config_info))
+	if (!cfg_eeprom_get_config_type(MV_CONFIG_FDT_FILE, &config_info))
 		debug("ERROR: Could not find MV_CONFIG_FDT_FILE\n");
 
-	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num,
-		 MULTI_FDT_EEPROM_ADDR_LEN,
-		 (uint8_t *)&fdt_config_val.fdt_blob, config_info.byte_cnt);
+	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
+		 (uint8_t *)&board_config_val.fdt_blob, config_info.byte_cnt);
 	return true;
 }
 
-/* write_fdt_struct_to_eeprom - write FDT from local struct to EEPROM */
-void write_fdt_struct_to_eeprom(void)
+/* cfg_eeprom_save - write the local struct to EEPROM */
+void cfg_eeprom_save(void)
 {
 	int reserve_length, size_of_loop, i;
 
-	size_of_loop = fdt_config_val.length / I2C_PAGE_WRITE_SIZE;
-	reserve_length = fdt_config_val.length % I2C_PAGE_WRITE_SIZE;
+	/* calculate checksum and save it in struct */
+	board_config_val.checksum = cfg_eeprom_checksum8((uint8_t *)&board_config_val.pattern,
+							 (uint32_t) board_config_val.length - 4);
+
+	/* write fdt struct to EEPROM */
+	size_of_loop = board_config_val.length / I2C_PAGE_WRITE_SIZE;
+	reserve_length = board_config_val.length % I2C_PAGE_WRITE_SIZE;
 
 	/* i2c support on page write with size 32-byets */
 	for (i = 0; i < size_of_loop; i++) {
 		i2c_write(BOARD_DEV_TWSI_INIT_EEPROM, i*I2C_PAGE_WRITE_SIZE, MULTI_FDT_EEPROM_ADDR_LEN,
-			  (uint8_t *)&(fdt_config_val) + i*I2C_PAGE_WRITE_SIZE, I2C_PAGE_WRITE_SIZE);
+			  (uint8_t *)&(board_config_val) + i*I2C_PAGE_WRITE_SIZE, I2C_PAGE_WRITE_SIZE);
 	}
+
 	i2c_write(BOARD_DEV_TWSI_INIT_EEPROM, i*I2C_PAGE_WRITE_SIZE, MULTI_FDT_EEPROM_ADDR_LEN,
-		  (uint8_t *)&(fdt_config_val) + i*I2C_PAGE_WRITE_SIZE, reserve_length);
+		  (uint8_t *)&(board_config_val) + i*I2C_PAGE_WRITE_SIZE, reserve_length);
+}
+
+/* cfg_eeprom_get_board_config - return the whole board config
+ * It is assumed the cfg_eeprom_init must be called prior to this routine,
+ * otherwise static default configuration will be used.
+ */
+struct eeprom_struct *cfg_eeprom_get_board_config(void)
+{
+	return &board_config_val;
+}
+
+/* cfg_eeprom_get_fdt - return the FDT block
+ * It is assumed the cfg_eeprom_init must be called prior to this routine,
+ * otherwise static default configuration will be used.
+ */
+uint8_t *cfg_eeprom_get_fdt(void)
+{
+	return (uint8_t *)&board_config_val.fdt_blob;
 }
 
-/* mvebu_fdt_config_init - initialize FDT configuration struct,
-   and return the selected FTD that should be loaded at boot time */
-u8 *mvebu_fdt_config_init(void)
+/* cfg_eeprom_init - initialize FDT configuration struct */
+int cfg_eeprom_init(void)
 {
 	struct eeprom_struct eeprom_buffer;
-	struct fdt_config_types_info config_info;
+	struct config_types_info config_info;
 	uint32_t calculate_checksum;
 
+	/* It is possible that this init will be called by several modules during init,
+	 * however only need to initialize it for one time
+	 */
+	if (eeprom_initialized > 0)
+		return 0;
+
+	init_func_i2c();
+
 	/* update default active_fdt_selection, just in case there is no valid data in eeprom,
 	 * and need to write default active_fdt_selection per SoC.
 	 */
 	board_cfg->active_fdt_selection = get_default_fdt_config_id(MV_DEFAULT_BOARD_ID);
 
-	init_func_i2c();
 	/* read pattern from EEPROM */
-	if (!config_type_get(MV_CONFIG_VERIFICATION_PATTERN, &config_info))
+	if (!cfg_eeprom_get_config_type(MV_CONFIG_VERIFICATION_PATTERN, &config_info)) {
 		error("Could not find MV_CONFIG_VERIFICATION_PATTERN\n");
+		return -1;
+	}
 
 	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
 		 (uint8_t *)&eeprom_buffer.pattern, config_info.byte_cnt);
 
-	/* check if pattern in EEPROM is valid */
-	if (eeprom_buffer.pattern != fdt_config_val.pattern) {
+	/* check if pattern in EEPROM is invalid */
+	if (eeprom_buffer.pattern != board_config_val.pattern) {
 		debug("Could not find pattern. Loading default FDT\n");
-		upload_fdt_from_flash(get_default_fdt_config_id(MV_DEFAULT_BOARD_ID));
-		return fdt_config_val.fdt_blob;
+		cfg_eeprom_upload_fdt_from_flash(get_default_fdt_config_id(MV_DEFAULT_BOARD_ID));
+		goto init_done;
 	}
 
 	/* read length from EEPROM */
-	if (!config_type_get(MV_CONFIG_LENGTH, &config_info))
+	if (!cfg_eeprom_get_config_type(MV_CONFIG_LENGTH, &config_info)) {
 		error("Could not find MV_CONFIG_LENGTH\n");
+		return -1;
+	}
 
 	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
 		 (uint8_t *)&eeprom_buffer.length, config_info.byte_cnt);
@@ -150,32 +190,37 @@ u8 *mvebu_fdt_config_init(void)
 	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, 0, MULTI_FDT_EEPROM_ADDR_LEN,
 		 (uint8_t *)&eeprom_buffer, eeprom_buffer.length);
 	/* calculate checksum and compare with the checksum that we read */
-	calculate_checksum = mvebu_checksum8((uint8_t *)&eeprom_buffer.pattern, (uint32_t) eeprom_buffer.length - 4);
+	calculate_checksum = cfg_eeprom_checksum8((uint8_t *)&eeprom_buffer.pattern,
+				(uint32_t) eeprom_buffer.length - 4);
 
 	/* if checksum is valid */
 	if (calculate_checksum == eeprom_buffer.checksum) {
-		/* update fdt_config_val struct with the read values from EEPROM */
-		fdt_config_val = eeprom_buffer;
+		/* update board_config_val struct with the read values from EEPROM */
+		board_config_val = eeprom_buffer;
 		/* if fdt_config is enabled, return - FDT already read in the struct from EEPROM */
-		if (fdt_config_is_enable()) {
+		if (cfg_eeprom_fdt_config_is_enable()) {
 			debug("read FDT from EEPROM\n");
-			return fdt_config_val.fdt_blob;
+			goto init_done;
 		}
+
 		/* read FDT from flash according to select active fdt */
-		if (upload_fdt_from_flash(board_cfg->active_fdt_selection)) {
+		if (cfg_eeprom_upload_fdt_from_flash(board_cfg->active_fdt_selection)) {
 			debug("read selected FDT by USER\n");
-			return fdt_config_val.fdt_blob;
+			goto init_done;
 		}
 	}
+
 	/* if checksum is invalid or if select active fdt is invalid */
 	/* need to load default FDT */
 	if (boardid_is_valid(eeprom_buffer.man_info.boardid)) {
-		upload_fdt_from_flash(get_default_fdt_config_id(eeprom_buffer.man_info.boardid));
-		debug("read board defualt FDT\n");
+		cfg_eeprom_upload_fdt_from_flash(get_default_fdt_config_id(eeprom_buffer.man_info.boardid));
+		debug("read board default FDT\n");
 	} else {
-		upload_fdt_from_flash(get_default_fdt_config_id(MV_DEFAULT_BOARD_ID));
-		debug("read SoC defualt FDT\n");
+		cfg_eeprom_upload_fdt_from_flash(get_default_fdt_config_id(MV_DEFAULT_BOARD_ID));
+		debug("read SoC default FDT\n");
 	}
 
-	return fdt_config_val.fdt_blob;
+init_done:
+	eeprom_initialized = 1;
+	return 0;
 }
diff --git a/board/mvebu/common/fdt_eeprom.h b/board/mvebu/common/fdt_eeprom.h
index 73b261d..8a307d8 100644
--- a/board/mvebu/common/fdt_eeprom.h
+++ b/board/mvebu/common/fdt_eeprom.h
@@ -37,13 +37,13 @@ enum mv_config_type_id {
 };
 
 /* #pragma pack(1) */
-struct manufacturing_information_struct_info {
+struct manufacturing_information_struct {
 	u8 boardid;
 	u8 reserve_manufacturing_information[23];
 };
 
 /* #pragma pack(1) */
-struct board_config_struct_info {
+struct board_config_struct {
 	u8 fdt_cfg_en;
 	u8 active_fdt_selection;
 	u8 validation_counter;
@@ -55,12 +55,12 @@ struct eeprom_struct {
 	u32 checksum;
 	u32 pattern;
 	u16 length;
-	struct manufacturing_information_struct_info man_info;
-	struct board_config_struct_info board_config;
+	struct manufacturing_information_struct man_info;
+	struct board_config_struct board_config;
 	u8 fdt_blob[MVEBU_FDT_SIZE];
 };
 
-struct  fdt_config_types_info {
+struct  config_types_info {
 	enum mv_config_type_id config_id;
 	char name[30];
 	u8 byte_num;
@@ -78,11 +78,11 @@ struct  fdt_config_types_info {
 /* {{MV_CONFIG_TYPE_ID configId,	name,			byte_num,				byte_cnt}} */
 #define MV_EEPROM_CONFIG_INFO { \
 { MV_CONFIG_VERIFICATION_PATTERN,	"EEPROM Pattern",	offset_in_eeprom(pattern),			  \
-									sizeof(fdt_config_val.pattern)},	  \
+									sizeof(board_config_val.pattern)},	  \
 { MV_CONFIG_LENGTH,			"Data length",		offset_in_eeprom(length),			  \
-									sizeof(fdt_config_val.length)},		  \
+									sizeof(board_config_val.length)},	  \
 { MV_CONFIG_BOARDID,			"Board ID",		offset_in_eeprom(man_info.boardid),		  \
-									sizeof(fdt_config_val.man_info.boardid)}, \
+									sizeof(board_config_val.man_info.boardid)}, \
 { MV_CONFIG_FDTCFG_EN,			"EEPROM enable",	offset_in_eeprom(board_config.fdt_cfg_en),	  \
 									sizeof(board_cfg->fdt_cfg_en)},		  \
 { MV_CONFIG_ACTIVE_FDT_SELECTION,	"Active FDT selection", offset_in_eeprom(board_config.active_fdt_selection),\
@@ -90,14 +90,14 @@ struct  fdt_config_types_info {
 { MV_CONFIG_FDTCFG_VALID,		"Validation counter",	offset_in_eeprom(board_config.validation_counter),\
 								sizeof(board_cfg->validation_counter)},		  \
 { MV_CONFIG_FDT_FILE,			"FDT file",		offset_in_eeprom(fdt_blob),			  \
-								sizeof(fdt_config_val.fdt_blob)}		  \
+								sizeof(board_config_val.fdt_blob)}		  \
 }
 
-#define FDT_DEFAULT_VALUE  {											  \
+#define CFG_DEFAULT_VALUE  {											  \
 				0x00000000,				     /* checksum */			  \
 				0xfecadefa,				     /* EEPROM pattern */		  \
 				0x002c,					     /* length = 44 bytes */		  \
-				{MV_DEFAULT_BOARD_ID,		/* board ID */			  \
+				{MV_DEFAULT_BOARD_ID,			     /* board ID */			  \
 				{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,					  \
 				 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,				  \
 				 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} },/* reserve_man_information */  \
@@ -105,15 +105,15 @@ struct  fdt_config_types_info {
 				 0x03,					     /* active fdt selection = default */ \
 				 0x00,					     /* validation counter = 0 */	  \
 				{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} },/* reserve_board_cgf */		  \
-				{ [0 ... 7167] = 1 }			     /* fdt file */			  \
+				{[0 ... 7167] = 1}			     /* fdt file */			  \
 }
 
-	#define MV_MAX_FDT_CONFIGURATION	MV_MARVELL_BOARD_NUM * 8
-	extern struct eeprom_struct fdt_config_val;
-	uint32_t mvebu_checksum8(uint8_t *start, uint32_t len);
-	bool fdt_config_is_enable(void);
-	bool upload_fdt_from_flash(u8 fdt_config_id);
-	bool upload_fdt_from_eeprom(void);
-	void write_fdt_struct_to_eeprom(void);
+#define MV_MAX_FDT_CONFIGURATION	MV_MARVELL_BOARD_NUM * 8
 
-#endif
+bool cfg_eeprom_fdt_config_is_enable(void);
+bool cfg_eeprom_upload_fdt_from_flash(u8 fdt_config_id);
+bool cfg_eeprom_upload_fdt_from_eeprom(void);
+void cfg_eeprom_save(void);
+struct eeprom_struct *cfg_eeprom_get_board_config(void);
+
+#endif /* _FDT_EEPROM_H_ */
diff --git a/board/mvebu/common/init.c b/board/mvebu/common/init.c
index 8b02491..83c1bb6 100644
--- a/board/mvebu/common/init.c
+++ b/board/mvebu/common/init.c
@@ -33,6 +33,9 @@
 #ifdef CONFIG_DEVEL_BOARD
 #include "devel-board.h"
 #endif
+#ifdef CONFIG_BOARD_CONFIG_EEPROM
+#include "fdt_eeprom.h"
+#endif
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -54,6 +57,10 @@ int soc_early_init_f(void)
 /* Do very basic stuff like board and soc detection */
 int board_early_init_f(void)
 {
+#ifdef CONFIG_BOARD_CONFIG_EEPROM
+	cfg_eeprom_init();
+#endif
+
 #ifdef CONFIG_MULTI_DT_FILE
 	mvebu_setup_fdt();
 #endif
diff --git a/common/mvebu/cmd_fdt_config.c b/common/mvebu/cmd_fdt_config.c
index e8b09901..dd359e4 100644
--- a/common/mvebu/cmd_fdt_config.c
+++ b/common/mvebu/cmd_fdt_config.c
@@ -21,7 +21,7 @@
 #include <command.h>
 #include <vsprintf.h>
 #include <errno.h>
-
+#include "../../board/mvebu/common/fdt_eeprom.h"
 #include "../../board/mvebu/common/fdt_config.h"
 
 int do_fdt_config_cmd(cmd_tbl_t *cmdtp, int flag, int argc,
@@ -58,8 +58,7 @@ int do_fdt_config_cmd(cmd_tbl_t *cmdtp, int flag, int argc,
 			return 1;
 		}
 	} else if (strcmp(cmd, "save") == 0) {
-		if (fdt_cfg_save())
-			return 1;
+		cfg_eeprom_save();
 	} else if (strcmp(cmd, "on") == 0) {
 		if (fdt_cfg_on())
 			return 1;
-- 
1.9.1

