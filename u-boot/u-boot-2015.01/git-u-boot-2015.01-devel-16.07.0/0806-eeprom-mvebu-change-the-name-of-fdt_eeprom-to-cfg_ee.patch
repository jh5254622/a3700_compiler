From d9cb95cc59f757fcc32becc5644a6777cb4ab7c3 Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Tue, 2 Feb 2016 17:39:44 +0800
Subject: [PATCH 0806/1240] eeprom: mvebu: change the name of fdt_eeprom to
 cfg_eeprom

- Since the configuration EEPROM is generic for configuration
  such as FDT, box_info, this patch change the file name
  from fdt_eeprom to cfg_eeprom.

Change-Id: Id0ca65fe5f8ac0108588d5c621c45dfa7641d354
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27114
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Hanna Hawa <hannah@marvell.com>
---
 board/mvebu/common/Makefile     |   2 +-
 board/mvebu/common/cfg_eeprom.c | 226 ++++++++++++++++++++++++++++++++++++++++
 board/mvebu/common/cfg_eeprom.h | 119 +++++++++++++++++++++
 board/mvebu/common/fdt_config.h |   2 +-
 board/mvebu/common/fdt_eeprom.c | 226 ----------------------------------------
 board/mvebu/common/fdt_eeprom.h | 119 ---------------------
 board/mvebu/common/init.c       |   2 +-
 common/mvebu/cmd_fdt_config.c   |   2 +-
 8 files changed, 349 insertions(+), 349 deletions(-)
 create mode 100644 board/mvebu/common/cfg_eeprom.c
 create mode 100644 board/mvebu/common/cfg_eeprom.h
 delete mode 100644 board/mvebu/common/fdt_eeprom.c
 delete mode 100644 board/mvebu/common/fdt_eeprom.h

diff --git a/board/mvebu/common/Makefile b/board/mvebu/common/Makefile
index 69df409..5b2e08a 100644
--- a/board/mvebu/common/Makefile
+++ b/board/mvebu/common/Makefile
@@ -21,5 +21,5 @@ obj-y	+= init.o
 obj-$(CONFIG_CMD_NET)		+= eth_init.o
 obj-$(CONFIG_MVEBU_SAR)		+= sar.o
 obj-$(CONFIG_DEVEL_BOARD)	+= devel-board.o
-obj-$(CONFIG_BOARD_CONFIG_EEPROM)	+= fdt_eeprom.o
+obj-$(CONFIG_BOARD_CONFIG_EEPROM)	+= cfg_eeprom.o
 obj-$(CONFIG_MULTI_DT_FILE)	+= fdt_config.o
diff --git a/board/mvebu/common/cfg_eeprom.c b/board/mvebu/common/cfg_eeprom.c
new file mode 100644
index 0000000..e206396
--- /dev/null
+++ b/board/mvebu/common/cfg_eeprom.c
@@ -0,0 +1,226 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+#include <common.h>
+#include <asm/arch-mvebu/soc.h>
+#include <fdtdec.h>
+#include <libfdt.h>
+#include "cfg_eeprom.h"
+
+u8 mapping_default_fdt[] = DEFAULT_FDT_PER_BOARD;
+struct eeprom_struct board_config_val = CFG_DEFAULT_VALUE;
+struct board_config_struct *board_cfg = &(board_config_val.board_config);
+struct config_types_info config_types_info[] = MV_EEPROM_CONFIG_INFO;
+int eeprom_initialized = -1;
+
+static uint32_t cfg_eeprom_checksum8(uint8_t *start, uint32_t len)
+{
+	uint32_t sum = 0;
+	uint8_t *startp = start;
+	do {
+		sum += *startp;
+		startp++;
+		len--;
+	} while (len > 0);
+	return sum;
+}
+
+/* cfg_eeprom_fdt_config_is_enable - checking if need to load FDT from EEPROM at boot-time */
+bool cfg_eeprom_fdt_config_is_enable(void)
+{
+	if (board_cfg->fdt_cfg_en == 1)
+		return true;
+	return false;
+}
+
+/* cfg_eeprom_get_config_type
+ * config_info input pointer receive the mapping of the
+ * required field in the local struct
+ */
+static bool cfg_eeprom_get_config_type(enum mv_config_type_id config_class, struct config_types_info *config_info)
+{
+	int i;
+
+	/* verify existence of requested config type, pull its data */
+	for (i = 0; i < MV_CONFIG_TYPE_MAX_OPTION ; i++)
+		if (config_types_info[i].config_id == config_class) {
+			*config_info = config_types_info[i];
+			return true;
+		}
+	error("requested MV_CONFIG_TYPE_ID was not found (%d)\n", config_class);
+
+	return false;
+}
+
+/* cfg_eeprom_upload_fdt_from_flash
+ * write the required FDT to local struct,
+ * if found fdt config id in flash, else return false
+ */
+bool cfg_eeprom_upload_fdt_from_flash(u8 fdt_config_id)
+{
+	int i;
+	void *fdt_blob_temp = __dtb_dt_begin;
+
+	debug("FDT config id = %x\n", fdt_config_id);
+	for (i = 0; fdt_check_header(fdt_blob_temp) == 0; i++) {
+		if ((u8)fdtdec_get_int(fdt_blob_temp, 0, "fdt_config_id", -1) == fdt_config_id) {
+			memcpy((void *)board_config_val.fdt_blob, fdt_blob_temp, MVEBU_FDT_SIZE);
+			return true;
+		}
+		fdt_blob_temp += MVEBU_FDT_SIZE;
+	}
+	return false;
+}
+
+/* cfg_eeprom_upload_fdt_from_eeprom - write FDT from EEPROM to local struct */
+bool cfg_eeprom_upload_fdt_from_eeprom(void)
+{
+	struct config_types_info config_info;
+
+	/* read fdt from EEPROM */
+	if (!cfg_eeprom_get_config_type(MV_CONFIG_FDT_FILE, &config_info))
+		debug("ERROR: Could not find MV_CONFIG_FDT_FILE\n");
+
+	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
+		 (uint8_t *)&board_config_val.fdt_blob, config_info.byte_cnt);
+	return true;
+}
+
+/* cfg_eeprom_save - write the local struct to EEPROM */
+void cfg_eeprom_save(void)
+{
+	int reserve_length, size_of_loop, i;
+
+	/* calculate checksum and save it in struct */
+	board_config_val.checksum = cfg_eeprom_checksum8((uint8_t *)&board_config_val.pattern,
+							 (uint32_t) board_config_val.length - 4);
+
+	/* write fdt struct to EEPROM */
+	size_of_loop = board_config_val.length / I2C_PAGE_WRITE_SIZE;
+	reserve_length = board_config_val.length % I2C_PAGE_WRITE_SIZE;
+
+	/* i2c support on page write with size 32-byets */
+	for (i = 0; i < size_of_loop; i++) {
+		i2c_write(BOARD_DEV_TWSI_INIT_EEPROM, i*I2C_PAGE_WRITE_SIZE, MULTI_FDT_EEPROM_ADDR_LEN,
+			  (uint8_t *)&(board_config_val) + i*I2C_PAGE_WRITE_SIZE, I2C_PAGE_WRITE_SIZE);
+	}
+
+	i2c_write(BOARD_DEV_TWSI_INIT_EEPROM, i*I2C_PAGE_WRITE_SIZE, MULTI_FDT_EEPROM_ADDR_LEN,
+		  (uint8_t *)&(board_config_val) + i*I2C_PAGE_WRITE_SIZE, reserve_length);
+}
+
+/* cfg_eeprom_get_board_config - return the whole board config
+ * It is assumed the cfg_eeprom_init must be called prior to this routine,
+ * otherwise static default configuration will be used.
+ */
+struct eeprom_struct *cfg_eeprom_get_board_config(void)
+{
+	return &board_config_val;
+}
+
+/* cfg_eeprom_get_fdt - return the FDT block
+ * It is assumed the cfg_eeprom_init must be called prior to this routine,
+ * otherwise static default configuration will be used.
+ */
+uint8_t *cfg_eeprom_get_fdt(void)
+{
+	return (uint8_t *)&board_config_val.fdt_blob;
+}
+
+/* cfg_eeprom_init - initialize FDT configuration struct */
+int cfg_eeprom_init(void)
+{
+	struct eeprom_struct eeprom_buffer;
+	struct config_types_info config_info;
+	uint32_t calculate_checksum;
+
+	/* It is possible that this init will be called by several modules during init,
+	 * however only need to initialize it for one time
+	 */
+	if (eeprom_initialized > 0)
+		return 0;
+
+	init_func_i2c();
+
+	/* update default active_fdt_selection, just in case there is no valid data in eeprom,
+	 * and need to write default active_fdt_selection per SoC.
+	 */
+	board_cfg->active_fdt_selection = get_default_fdt_config_id(MV_DEFAULT_BOARD_ID);
+
+	/* read pattern from EEPROM */
+	if (!cfg_eeprom_get_config_type(MV_CONFIG_VERIFICATION_PATTERN, &config_info)) {
+		error("Could not find MV_CONFIG_VERIFICATION_PATTERN\n");
+		return -1;
+	}
+
+	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
+		 (uint8_t *)&eeprom_buffer.pattern, config_info.byte_cnt);
+
+	/* check if pattern in EEPROM is invalid */
+	if (eeprom_buffer.pattern != board_config_val.pattern) {
+		debug("Could not find pattern. Loading default FDT\n");
+		cfg_eeprom_upload_fdt_from_flash(get_default_fdt_config_id(MV_DEFAULT_BOARD_ID));
+		goto init_done;
+	}
+
+	/* read length from EEPROM */
+	if (!cfg_eeprom_get_config_type(MV_CONFIG_LENGTH, &config_info)) {
+		error("Could not find MV_CONFIG_LENGTH\n");
+		return -1;
+	}
+
+	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
+		 (uint8_t *)&eeprom_buffer.length, config_info.byte_cnt);
+
+	/* read all the struct from EEPROM according to length field */
+	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, 0, MULTI_FDT_EEPROM_ADDR_LEN,
+		 (uint8_t *)&eeprom_buffer, eeprom_buffer.length);
+	/* calculate checksum and compare with the checksum that we read */
+	calculate_checksum = cfg_eeprom_checksum8((uint8_t *)&eeprom_buffer.pattern,
+				(uint32_t) eeprom_buffer.length - 4);
+
+	/* if checksum is valid */
+	if (calculate_checksum == eeprom_buffer.checksum) {
+		/* update board_config_val struct with the read values from EEPROM */
+		board_config_val = eeprom_buffer;
+		/* if fdt_config is enabled, return - FDT already read in the struct from EEPROM */
+		if (cfg_eeprom_fdt_config_is_enable()) {
+			debug("read FDT from EEPROM\n");
+			goto init_done;
+		}
+
+		/* read FDT from flash according to select active fdt */
+		if (cfg_eeprom_upload_fdt_from_flash(board_cfg->active_fdt_selection)) {
+			debug("read selected FDT by USER\n");
+			goto init_done;
+		}
+	}
+
+	/* if checksum is invalid or if select active fdt is invalid */
+	/* need to load default FDT */
+	if (boardid_is_valid(eeprom_buffer.man_info.boardid)) {
+		cfg_eeprom_upload_fdt_from_flash(get_default_fdt_config_id(eeprom_buffer.man_info.boardid));
+		debug("read board default FDT\n");
+	} else {
+		cfg_eeprom_upload_fdt_from_flash(get_default_fdt_config_id(MV_DEFAULT_BOARD_ID));
+		debug("read SoC default FDT\n");
+	}
+
+init_done:
+	eeprom_initialized = 1;
+	return 0;
+}
diff --git a/board/mvebu/common/cfg_eeprom.h b/board/mvebu/common/cfg_eeprom.h
new file mode 100644
index 0000000..df29934
--- /dev/null
+++ b/board/mvebu/common/cfg_eeprom.h
@@ -0,0 +1,119 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#ifndef _CFG_EEPROM_H_
+#define _CFG_EEPROM_H_
+#include <common.h>
+#include <i2c.h>
+#include <errno.h>
+#include <asm/io.h>
+#include <asm/arch/board-info.h>
+#include <asm/arch-mvebu/mvebu.h>
+
+enum mv_config_type_id {
+	MV_CONFIG_VERIFICATION_PATTERN,
+	MV_CONFIG_LENGTH,
+	MV_CONFIG_BOARDID,
+	MV_CONFIG_FDTCFG_EN,
+	MV_CONFIG_ACTIVE_FDT_SELECTION,
+	MV_CONFIG_FDT_FILE,
+	MV_CONFIG_FDTCFG_VALID,
+	MV_CONFIG_TYPE_MAX_OPTION,  /* limit for user read/write routines */
+};
+
+/* #pragma pack(1) */
+struct manufacturing_information_struct {
+	u8 boardid;
+	u8 reserve_manufacturing_information[23];
+};
+
+/* #pragma pack(1) */
+struct board_config_struct {
+	u8 fdt_cfg_en;
+	u8 active_fdt_selection;
+	u8 validation_counter;
+	u8 reserve_board_cgf[7];
+};
+
+/* #pragma pack(1) */
+struct eeprom_struct {
+	u32 checksum;
+	u32 pattern;
+	u16 length;
+	struct manufacturing_information_struct man_info;
+	struct board_config_struct board_config;
+	u8 fdt_blob[MVEBU_FDT_SIZE];
+};
+
+struct  config_types_info {
+	enum mv_config_type_id config_id;
+	char name[30];
+	u8 byte_num;
+	u32 byte_cnt;
+};
+
+#define BOARD_ID_INDEX_MASK		0x10
+#define I2C_PAGE_WRITE_SIZE		32
+
+#define offset_in_eeprom(a)		((u8)(offsetof(struct eeprom_struct, a)))
+#define get_default_fdt_config_id(boardid)	mapping_default_fdt[boardid & (BOARD_ID_INDEX_MASK - 1)]
+#define boardid_is_valid(boardid)      (((boardid) >= MARVELL_BOARD_ID_BASE) && ((boardid) < MV_MAX_MARVELL_BOARD_ID))\
+					   ? true : false
+
+/* {{MV_CONFIG_TYPE_ID configId,	name,			byte_num,				byte_cnt}} */
+#define MV_EEPROM_CONFIG_INFO { \
+{ MV_CONFIG_VERIFICATION_PATTERN,	"EEPROM Pattern",	offset_in_eeprom(pattern),			  \
+									sizeof(board_config_val.pattern)},	  \
+{ MV_CONFIG_LENGTH,			"Data length",		offset_in_eeprom(length),			  \
+									sizeof(board_config_val.length)},	  \
+{ MV_CONFIG_BOARDID,			"Board ID",		offset_in_eeprom(man_info.boardid),		  \
+									sizeof(board_config_val.man_info.boardid)}, \
+{ MV_CONFIG_FDTCFG_EN,			"EEPROM enable",	offset_in_eeprom(board_config.fdt_cfg_en),	  \
+									sizeof(board_cfg->fdt_cfg_en)},		  \
+{ MV_CONFIG_ACTIVE_FDT_SELECTION,	"Active FDT selection", offset_in_eeprom(board_config.active_fdt_selection),\
+								sizeof(board_cfg->active_fdt_selection)},	  \
+{ MV_CONFIG_FDTCFG_VALID,		"Validation counter",	offset_in_eeprom(board_config.validation_counter),\
+								sizeof(board_cfg->validation_counter)},		  \
+{ MV_CONFIG_FDT_FILE,			"FDT file",		offset_in_eeprom(fdt_blob),			  \
+								sizeof(board_config_val.fdt_blob)}		  \
+}
+
+#define CFG_DEFAULT_VALUE  {											  \
+				0x00000000,				     /* checksum */			  \
+				0xfecadefa,				     /* EEPROM pattern */		  \
+				0x002c,					     /* length = 44 bytes */		  \
+				{MV_DEFAULT_BOARD_ID,			     /* board ID */			  \
+				{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,					  \
+				 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,				  \
+				 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} },/* reserve_man_information */  \
+				{0x00,					     /* fdt config disable */		  \
+				 0x03,					     /* active fdt selection = default */ \
+				 0x00,					     /* validation counter = 0 */	  \
+				{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} },/* reserve_board_cgf */		  \
+				{[0 ... 7167] = 1}			     /* fdt file */			  \
+}
+
+#define MV_MAX_FDT_CONFIGURATION	MV_MARVELL_BOARD_NUM * 8
+
+bool cfg_eeprom_fdt_config_is_enable(void);
+bool cfg_eeprom_upload_fdt_from_flash(u8 fdt_config_id);
+bool cfg_eeprom_upload_fdt_from_eeprom(void);
+void cfg_eeprom_save(void);
+struct eeprom_struct *cfg_eeprom_get_board_config(void);
+
+#endif /* _CFG_EEPROM_H_ */
diff --git a/board/mvebu/common/fdt_config.h b/board/mvebu/common/fdt_config.h
index aa56906..a5c4179 100644
--- a/board/mvebu/common/fdt_config.h
+++ b/board/mvebu/common/fdt_config.h
@@ -17,7 +17,7 @@
  */
 #ifndef _FDT_CONFIG_H_
 #define _FDT_CONFIG_H_
-#include "fdt_eeprom.h"
+#include "cfg_eeprom.h"
 
 void fdt_cfg_read_eeprom(void);
 int fdt_cfg_read_flash(const char *selected_index);
diff --git a/board/mvebu/common/fdt_eeprom.c b/board/mvebu/common/fdt_eeprom.c
deleted file mode 100644
index 3b6f1d2..0000000
--- a/board/mvebu/common/fdt_eeprom.c
+++ /dev/null
@@ -1,226 +0,0 @@
-/*
- * ***************************************************************************
- * Copyright (C) 2015 Marvell International Ltd.
- * ***************************************************************************
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License as published by the Free
- * Software Foundation, either version 2 of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * ***************************************************************************
- */
-#include <common.h>
-#include <asm/arch-mvebu/soc.h>
-#include <fdtdec.h>
-#include <libfdt.h>
-#include "fdt_eeprom.h"
-
-u8 mapping_default_fdt[] = DEFAULT_FDT_PER_BOARD;
-struct eeprom_struct board_config_val = CFG_DEFAULT_VALUE;
-struct board_config_struct *board_cfg = &(board_config_val.board_config);
-struct config_types_info config_types_info[] = MV_EEPROM_CONFIG_INFO;
-int eeprom_initialized = -1;
-
-static uint32_t cfg_eeprom_checksum8(uint8_t *start, uint32_t len)
-{
-	uint32_t sum = 0;
-	uint8_t *startp = start;
-	do {
-		sum += *startp;
-		startp++;
-		len--;
-	} while (len > 0);
-	return sum;
-}
-
-/* cfg_eeprom_fdt_config_is_enable - checking if need to load FDT from EEPROM at boot-time */
-bool cfg_eeprom_fdt_config_is_enable(void)
-{
-	if (board_cfg->fdt_cfg_en == 1)
-		return true;
-	return false;
-}
-
-/* cfg_eeprom_get_config_type
- * config_info input pointer receive the mapping of the
- * required field in the local struct
- */
-static bool cfg_eeprom_get_config_type(enum mv_config_type_id config_class, struct config_types_info *config_info)
-{
-	int i;
-
-	/* verify existence of requested config type, pull its data */
-	for (i = 0; i < MV_CONFIG_TYPE_MAX_OPTION ; i++)
-		if (config_types_info[i].config_id == config_class) {
-			*config_info = config_types_info[i];
-			return true;
-		}
-	error("requested MV_CONFIG_TYPE_ID was not found (%d)\n", config_class);
-
-	return false;
-}
-
-/* cfg_eeprom_upload_fdt_from_flash
- * write the required FDT to local struct,
- * if found fdt config id in flash, else return false
- */
-bool cfg_eeprom_upload_fdt_from_flash(u8 fdt_config_id)
-{
-	int i;
-	void *fdt_blob_temp = __dtb_dt_begin;
-
-	debug("FDT config id = %x\n", fdt_config_id);
-	for (i = 0; fdt_check_header(fdt_blob_temp) == 0; i++) {
-		if ((u8)fdtdec_get_int(fdt_blob_temp, 0, "fdt_config_id", -1) == fdt_config_id) {
-			memcpy((void *)board_config_val.fdt_blob, fdt_blob_temp, MVEBU_FDT_SIZE);
-			return true;
-		}
-		fdt_blob_temp += MVEBU_FDT_SIZE;
-	}
-	return false;
-}
-
-/* cfg_eeprom_upload_fdt_from_eeprom - write FDT from EEPROM to local struct */
-bool cfg_eeprom_upload_fdt_from_eeprom(void)
-{
-	struct config_types_info config_info;
-
-	/* read fdt from EEPROM */
-	if (!cfg_eeprom_get_config_type(MV_CONFIG_FDT_FILE, &config_info))
-		debug("ERROR: Could not find MV_CONFIG_FDT_FILE\n");
-
-	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
-		 (uint8_t *)&board_config_val.fdt_blob, config_info.byte_cnt);
-	return true;
-}
-
-/* cfg_eeprom_save - write the local struct to EEPROM */
-void cfg_eeprom_save(void)
-{
-	int reserve_length, size_of_loop, i;
-
-	/* calculate checksum and save it in struct */
-	board_config_val.checksum = cfg_eeprom_checksum8((uint8_t *)&board_config_val.pattern,
-							 (uint32_t) board_config_val.length - 4);
-
-	/* write fdt struct to EEPROM */
-	size_of_loop = board_config_val.length / I2C_PAGE_WRITE_SIZE;
-	reserve_length = board_config_val.length % I2C_PAGE_WRITE_SIZE;
-
-	/* i2c support on page write with size 32-byets */
-	for (i = 0; i < size_of_loop; i++) {
-		i2c_write(BOARD_DEV_TWSI_INIT_EEPROM, i*I2C_PAGE_WRITE_SIZE, MULTI_FDT_EEPROM_ADDR_LEN,
-			  (uint8_t *)&(board_config_val) + i*I2C_PAGE_WRITE_SIZE, I2C_PAGE_WRITE_SIZE);
-	}
-
-	i2c_write(BOARD_DEV_TWSI_INIT_EEPROM, i*I2C_PAGE_WRITE_SIZE, MULTI_FDT_EEPROM_ADDR_LEN,
-		  (uint8_t *)&(board_config_val) + i*I2C_PAGE_WRITE_SIZE, reserve_length);
-}
-
-/* cfg_eeprom_get_board_config - return the whole board config
- * It is assumed the cfg_eeprom_init must be called prior to this routine,
- * otherwise static default configuration will be used.
- */
-struct eeprom_struct *cfg_eeprom_get_board_config(void)
-{
-	return &board_config_val;
-}
-
-/* cfg_eeprom_get_fdt - return the FDT block
- * It is assumed the cfg_eeprom_init must be called prior to this routine,
- * otherwise static default configuration will be used.
- */
-uint8_t *cfg_eeprom_get_fdt(void)
-{
-	return (uint8_t *)&board_config_val.fdt_blob;
-}
-
-/* cfg_eeprom_init - initialize FDT configuration struct */
-int cfg_eeprom_init(void)
-{
-	struct eeprom_struct eeprom_buffer;
-	struct config_types_info config_info;
-	uint32_t calculate_checksum;
-
-	/* It is possible that this init will be called by several modules during init,
-	 * however only need to initialize it for one time
-	 */
-	if (eeprom_initialized > 0)
-		return 0;
-
-	init_func_i2c();
-
-	/* update default active_fdt_selection, just in case there is no valid data in eeprom,
-	 * and need to write default active_fdt_selection per SoC.
-	 */
-	board_cfg->active_fdt_selection = get_default_fdt_config_id(MV_DEFAULT_BOARD_ID);
-
-	/* read pattern from EEPROM */
-	if (!cfg_eeprom_get_config_type(MV_CONFIG_VERIFICATION_PATTERN, &config_info)) {
-		error("Could not find MV_CONFIG_VERIFICATION_PATTERN\n");
-		return -1;
-	}
-
-	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
-		 (uint8_t *)&eeprom_buffer.pattern, config_info.byte_cnt);
-
-	/* check if pattern in EEPROM is invalid */
-	if (eeprom_buffer.pattern != board_config_val.pattern) {
-		debug("Could not find pattern. Loading default FDT\n");
-		cfg_eeprom_upload_fdt_from_flash(get_default_fdt_config_id(MV_DEFAULT_BOARD_ID));
-		goto init_done;
-	}
-
-	/* read length from EEPROM */
-	if (!cfg_eeprom_get_config_type(MV_CONFIG_LENGTH, &config_info)) {
-		error("Could not find MV_CONFIG_LENGTH\n");
-		return -1;
-	}
-
-	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
-		 (uint8_t *)&eeprom_buffer.length, config_info.byte_cnt);
-
-	/* read all the struct from EEPROM according to length field */
-	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, 0, MULTI_FDT_EEPROM_ADDR_LEN,
-		 (uint8_t *)&eeprom_buffer, eeprom_buffer.length);
-	/* calculate checksum and compare with the checksum that we read */
-	calculate_checksum = cfg_eeprom_checksum8((uint8_t *)&eeprom_buffer.pattern,
-				(uint32_t) eeprom_buffer.length - 4);
-
-	/* if checksum is valid */
-	if (calculate_checksum == eeprom_buffer.checksum) {
-		/* update board_config_val struct with the read values from EEPROM */
-		board_config_val = eeprom_buffer;
-		/* if fdt_config is enabled, return - FDT already read in the struct from EEPROM */
-		if (cfg_eeprom_fdt_config_is_enable()) {
-			debug("read FDT from EEPROM\n");
-			goto init_done;
-		}
-
-		/* read FDT from flash according to select active fdt */
-		if (cfg_eeprom_upload_fdt_from_flash(board_cfg->active_fdt_selection)) {
-			debug("read selected FDT by USER\n");
-			goto init_done;
-		}
-	}
-
-	/* if checksum is invalid or if select active fdt is invalid */
-	/* need to load default FDT */
-	if (boardid_is_valid(eeprom_buffer.man_info.boardid)) {
-		cfg_eeprom_upload_fdt_from_flash(get_default_fdt_config_id(eeprom_buffer.man_info.boardid));
-		debug("read board default FDT\n");
-	} else {
-		cfg_eeprom_upload_fdt_from_flash(get_default_fdt_config_id(MV_DEFAULT_BOARD_ID));
-		debug("read SoC default FDT\n");
-	}
-
-init_done:
-	eeprom_initialized = 1;
-	return 0;
-}
diff --git a/board/mvebu/common/fdt_eeprom.h b/board/mvebu/common/fdt_eeprom.h
deleted file mode 100644
index 8a307d8..0000000
--- a/board/mvebu/common/fdt_eeprom.h
+++ /dev/null
@@ -1,119 +0,0 @@
-/*
- * ***************************************************************************
- * Copyright (C) 2015 Marvell International Ltd.
- * ***************************************************************************
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License as published by the Free
- * Software Foundation, either version 2 of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- * ***************************************************************************
- */
-
-#ifndef _FDT_EEPROM_H_
-#define _FDT_EEPROM_H_
-#include <common.h>
-#include <i2c.h>
-#include <errno.h>
-#include <asm/io.h>
-#include <asm/arch/board-info.h>
-#include <asm/arch-mvebu/mvebu.h>
-
-enum mv_config_type_id {
-	MV_CONFIG_VERIFICATION_PATTERN,
-	MV_CONFIG_LENGTH,
-	MV_CONFIG_BOARDID,
-	MV_CONFIG_FDTCFG_EN,
-	MV_CONFIG_ACTIVE_FDT_SELECTION,
-	MV_CONFIG_FDT_FILE,
-	MV_CONFIG_FDTCFG_VALID,
-	MV_CONFIG_TYPE_MAX_OPTION,  /* limit for user read/write routines */
-};
-
-/* #pragma pack(1) */
-struct manufacturing_information_struct {
-	u8 boardid;
-	u8 reserve_manufacturing_information[23];
-};
-
-/* #pragma pack(1) */
-struct board_config_struct {
-	u8 fdt_cfg_en;
-	u8 active_fdt_selection;
-	u8 validation_counter;
-	u8 reserve_board_cgf[7];
-};
-
-/* #pragma pack(1) */
-struct eeprom_struct {
-	u32 checksum;
-	u32 pattern;
-	u16 length;
-	struct manufacturing_information_struct man_info;
-	struct board_config_struct board_config;
-	u8 fdt_blob[MVEBU_FDT_SIZE];
-};
-
-struct  config_types_info {
-	enum mv_config_type_id config_id;
-	char name[30];
-	u8 byte_num;
-	u32 byte_cnt;
-};
-
-#define BOARD_ID_INDEX_MASK		0x10
-#define I2C_PAGE_WRITE_SIZE		32
-
-#define offset_in_eeprom(a)		((u8)(offsetof(struct eeprom_struct, a)))
-#define get_default_fdt_config_id(boardid)	mapping_default_fdt[boardid & (BOARD_ID_INDEX_MASK - 1)]
-#define boardid_is_valid(boardid)      (((boardid) >= MARVELL_BOARD_ID_BASE) && ((boardid) < MV_MAX_MARVELL_BOARD_ID))\
-					   ? true : false
-
-/* {{MV_CONFIG_TYPE_ID configId,	name,			byte_num,				byte_cnt}} */
-#define MV_EEPROM_CONFIG_INFO { \
-{ MV_CONFIG_VERIFICATION_PATTERN,	"EEPROM Pattern",	offset_in_eeprom(pattern),			  \
-									sizeof(board_config_val.pattern)},	  \
-{ MV_CONFIG_LENGTH,			"Data length",		offset_in_eeprom(length),			  \
-									sizeof(board_config_val.length)},	  \
-{ MV_CONFIG_BOARDID,			"Board ID",		offset_in_eeprom(man_info.boardid),		  \
-									sizeof(board_config_val.man_info.boardid)}, \
-{ MV_CONFIG_FDTCFG_EN,			"EEPROM enable",	offset_in_eeprom(board_config.fdt_cfg_en),	  \
-									sizeof(board_cfg->fdt_cfg_en)},		  \
-{ MV_CONFIG_ACTIVE_FDT_SELECTION,	"Active FDT selection", offset_in_eeprom(board_config.active_fdt_selection),\
-								sizeof(board_cfg->active_fdt_selection)},	  \
-{ MV_CONFIG_FDTCFG_VALID,		"Validation counter",	offset_in_eeprom(board_config.validation_counter),\
-								sizeof(board_cfg->validation_counter)},		  \
-{ MV_CONFIG_FDT_FILE,			"FDT file",		offset_in_eeprom(fdt_blob),			  \
-								sizeof(board_config_val.fdt_blob)}		  \
-}
-
-#define CFG_DEFAULT_VALUE  {											  \
-				0x00000000,				     /* checksum */			  \
-				0xfecadefa,				     /* EEPROM pattern */		  \
-				0x002c,					     /* length = 44 bytes */		  \
-				{MV_DEFAULT_BOARD_ID,			     /* board ID */			  \
-				{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,					  \
-				 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,				  \
-				 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} },/* reserve_man_information */  \
-				{0x00,					     /* fdt config disable */		  \
-				 0x03,					     /* active fdt selection = default */ \
-				 0x00,					     /* validation counter = 0 */	  \
-				{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} },/* reserve_board_cgf */		  \
-				{[0 ... 7167] = 1}			     /* fdt file */			  \
-}
-
-#define MV_MAX_FDT_CONFIGURATION	MV_MARVELL_BOARD_NUM * 8
-
-bool cfg_eeprom_fdt_config_is_enable(void);
-bool cfg_eeprom_upload_fdt_from_flash(u8 fdt_config_id);
-bool cfg_eeprom_upload_fdt_from_eeprom(void);
-void cfg_eeprom_save(void);
-struct eeprom_struct *cfg_eeprom_get_board_config(void);
-
-#endif /* _FDT_EEPROM_H_ */
diff --git a/board/mvebu/common/init.c b/board/mvebu/common/init.c
index 83c1bb6..4691529 100644
--- a/board/mvebu/common/init.c
+++ b/board/mvebu/common/init.c
@@ -34,7 +34,7 @@
 #include "devel-board.h"
 #endif
 #ifdef CONFIG_BOARD_CONFIG_EEPROM
-#include "fdt_eeprom.h"
+#include "cfg_eeprom.h"
 #endif
 
 DECLARE_GLOBAL_DATA_PTR;
diff --git a/common/mvebu/cmd_fdt_config.c b/common/mvebu/cmd_fdt_config.c
index dd359e4..c088848 100644
--- a/common/mvebu/cmd_fdt_config.c
+++ b/common/mvebu/cmd_fdt_config.c
@@ -21,7 +21,7 @@
 #include <command.h>
 #include <vsprintf.h>
 #include <errno.h>
-#include "../../board/mvebu/common/fdt_eeprom.h"
+#include "../../board/mvebu/common/cfg_eeprom.h"
 #include "../../board/mvebu/common/fdt_config.h"
 
 int do_fdt_config_cmd(cmd_tbl_t *cmdtp, int flag, int argc,
-- 
1.9.1

