From 9bf170787e720220680e50713f061cf2a88867e7 Mon Sep 17 00:00:00 2001
From: Yuval Caduri <cyuval@marvell.com>
Date: Tue, 16 Feb 2016 17:46:07 +0200
Subject: [PATCH 0873/1240] phy: ppv2: init RGMII0/1 Network PHY for
 Armada-7040-RZ

- This patch add basic support for ppv2 driver
- The driver init the RGMII PHY only

Change-Id: I5984456c11cbc0c230c572be4d9f0a6002db3cc4
Signed-off-by: Alan Winkowski <walan@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27564
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/Kconfig                   |   1 +
 arch/arm/cpu/armv8/armada8k/soc.c  |  25 ++++++++
 board/mvebu/common/eth_init.c      |   4 ++
 configs/mvebu_armada70x0_defconfig |   2 +-
 drivers/net/Kconfig                |  10 ++++
 drivers/net/Makefile               |   1 +
 drivers/net/mv_pp2x.c              | 118 +++++++++++++++++++++++++++++++++++++
 include/fdtdec.h                   |   1 +
 include/netdev.h                   |   3 +
 lib/fdtdec.c                       |   1 +
 10 files changed, 165 insertions(+), 1 deletion(-)
 create mode 100644 drivers/net/mv_pp2x.c

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 662f7a1..3c41a3c 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -106,6 +106,7 @@ config TARGET_VCMA9
 config TARGET_ARMADA_8K
 	bool "Support Armada 8K"
 	select SUPPORT_SPL
+	select ARM64
 
 config TARGET_ARMADA_38X
 	bool "Support Armada 38x"
diff --git a/arch/arm/cpu/armv8/armada8k/soc.c b/arch/arm/cpu/armv8/armada8k/soc.c
index 75e8edd..5a1ae1d 100644
--- a/arch/arm/cpu/armv8/armada8k/soc.c
+++ b/arch/arm/cpu/armv8/armada8k/soc.c
@@ -27,6 +27,7 @@
 #include <asm/arch-mvebu/pinctl.h>
 #include <asm/arch-mvebu/fdt.h>
 #include <linux/sizes.h>
+#include <netdev.h>
 
 #define RFU_GLOBAL_SW_RST		(MVEBU_RFU_BASE + 0x84)
 #define RFU_SW_RESET_OFFSET		0
@@ -126,6 +127,30 @@ void soc_init(void)
 	return;
 }
 
+#ifdef CONFIG_MVPP2X
+/**
+ * cpu_eth_init()
+ *	invoke mv_pp2x_initialize for each port, which is the initialization
+ *	entrance of mvpp2 driver.
+ *
+ * Input:
+ *	bis - db_info
+ *
+ * Return:
+ *	0 - cool
+ */
+int cpu_eth_init(bd_t *bis)
+{
+	/* init mv_pp2x module */
+	if (0 != mv_pp2x_initialize(bis)) {
+		error("failed to init mv_pp2x\n");
+		return 1;
+	}
+
+	return 0;
+}
+#endif /* CONFIG_MVPP2X */
+
 int dram_init(void)
 {
 #ifdef CONFIG_MVEBU_SPL_DDR_OVER_PCI_SUPPORT
diff --git a/board/mvebu/common/eth_init.c b/board/mvebu/common/eth_init.c
index 3b14bcc..198baf4 100644
--- a/board/mvebu/common/eth_init.c
+++ b/board/mvebu/common/eth_init.c
@@ -57,6 +57,10 @@ int board_eth_init(bd_t *bis)
 	enc28j60_initialize(0, 1, 1000, SPI_MODE_0);
 #endif
 
+#ifdef CONFIG_MVPP2X
+	cpu_eth_init(bis);
+#endif
+
 #ifdef CONFIG_EEPRO100
 	eepro100_initialize(bis);
 #endif
diff --git a/configs/mvebu_armada70x0_defconfig b/configs/mvebu_armada70x0_defconfig
index 368b9f3..20dc166 100644
--- a/configs/mvebu_armada70x0_defconfig
+++ b/configs/mvebu_armada70x0_defconfig
@@ -40,8 +40,8 @@ CONFIG_SCSI_AHCI_PLAT=y
 CONFIG_CP110_SATA_ADDR_WA=y
 CONFIG_MVEBU_ICU=y
 CONFIG_MVEBU_MDIO=y
-CONFIG_PHYLIB=y
 CONFIG_PHY_MARVELL=y
+CONFIG_MVPP2X=y
 +S:CONFIG_SYS_NS16550=y
 CONFIG_MVEBU_I2C=y
 CONFIG_MVEBU_SPI=y
diff --git a/drivers/net/Kconfig b/drivers/net/Kconfig
index 23f8f5e..736a10a 100644
--- a/drivers/net/Kconfig
+++ b/drivers/net/Kconfig
@@ -70,4 +70,14 @@ config MAX_NETA_PORT_NUM
 	  to be supported in marvell
 	  neta driver.
 
+config MVPP2X
+	bool "marvell pp2x driver"
+	default n
+	select PHYLIB
+	help
+	  Choose this option to add support
+	  for marvell pp2x eth driver which
+	  enable RX/TX ethernet packets
+	  using gbe interface on marvell SoC.
+
 endmenu
diff --git a/drivers/net/Makefile b/drivers/net/Makefile
index 48dc8ac..7de0b62 100644
--- a/drivers/net/Makefile
+++ b/drivers/net/Makefile
@@ -42,6 +42,7 @@ obj-$(CONFIG_MPC5xxx_FEC) += mpc5xxx_fec.o
 obj-$(CONFIG_MPC512x_FEC) += mpc512x_fec.o
 obj-$(CONFIG_MVGBE) += mvgbe.o
 obj-$(CONFIG_MVNETA) += mvneta.o
+obj-$(CONFIG_MVPP2X) += mv_pp2x.o
 obj-$(CONFIG_NATSEMI) += natsemi.o
 obj-$(CONFIG_DRIVER_NE2000) += ne2000.o ne2000_base.o
 obj-$(CONFIG_DRIVER_AX88796L) += ax88796.o ne2000_base.o
diff --git a/drivers/net/mv_pp2x.c b/drivers/net/mv_pp2x.c
new file mode 100644
index 0000000..215db70
--- /dev/null
+++ b/drivers/net/mv_pp2x.c
@@ -0,0 +1,118 @@
+/*
+* ***************************************************************************
+* Copyright (C) 2016 Marvell International Ltd.
+* ***************************************************************************
+* This program is free software: you can redistribute it and/or modify it
+* under the terms of the GNU General Public License as published by the Free
+* Software Foundation, either version 2 of the License, or any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program.  If not, see <http://www.gnu.org/licenses/>.
+* ***************************************************************************
+*/
+
+#include <common.h>
+#include <miiphy.h>
+#include <linux/compat.h>
+#include "mvgbe.h"
+
+#if !defined(CONFIG_PHYLIB)
+# error Marvell mv_pp2x requires PHYLIB
+#endif
+
+/* Some linux -> U-Boot compatibility stuff */
+#define netdev_err(dev, fmt, args...)		\
+	error(fmt, ##args)
+#define netdev_warn(dev, fmt, args...)		\
+	printf(fmt, ##args)
+#define netdev_info(dev, fmt, args...)		\
+	printf(fmt, ##args)
+
+/* GOP SMI Functions  */
+#define MVCPN110_GOP_MAC_NUM	4
+
+int mv_pp2x_phylib_init(struct mii_dev *bus, struct eth_device *dev,
+			int phyid, int gop_index)
+{
+	struct phy_device *phydev;
+
+	/* Set phy address of the port */
+	phydev = phy_connect(bus, phyid, dev, PHY_INTERFACE_MODE_RGMII);
+	if (!phydev) {
+		netdev_err(dev, "phy_connect failed dev->name(%s) phyid(%d)\n",
+			   dev->name, phyid);
+		return 1;
+	}
+
+	phy_config(phydev);
+	phy_startup(phydev);
+
+	return 0;
+}
+
+static int mv_pp2x_initialize_phy(bd_t *bis)
+{
+	struct mvgbe_device *dmvgbe;
+	struct eth_device *dev;
+	struct mii_dev *bus;
+	int devnum;
+	u8 used_ports[MVCPN110_GOP_MAC_NUM] = {0, 0, 1, 1};
+	/*0-sgmii, 1-N/A, 2-rgmii0, 3-rgmii1. Only 2 & 3 initialized here */
+
+	for (devnum = 0; devnum < MVCPN110_GOP_MAC_NUM; devnum++) {
+		/*skip if port is configured not to use */
+		if (used_ports[devnum] == 0)
+			continue;
+
+		dmvgbe = malloc(sizeof(struct mvgbe_device));
+
+		if (!dmvgbe) {
+			netdev_err(NULL, "Err..(%s) Malloc failed %d\n",
+				   __func__, devnum);
+			return 1;
+		}
+
+		memset(dmvgbe, 0, sizeof(struct mvgbe_device));
+		dev = &dmvgbe->dev;
+
+		/* must be less than sizeof(dev->name) */
+		sprintf(dev->name, "gop_mac%d", devnum);
+
+		eth_register(dev);
+
+	bus = mdio_get_current_dev();
+	if (!bus) {
+		netdev_err(dev, "failed to detect MDIO bus\n");
+		return 1;
+	}
+	sprintf(bus->name, dev->name);
+
+#if defined(CONFIG_PHYLIB)
+	if (mv_pp2x_phylib_init(bus, dev, (devnum - 2), devnum) != 0) {
+		netdev_err(dev, "failed to initialize phy\n");
+		return 1;
+	}
+#elif defined(CONFIG_MII) || defined(CONFIG_CMD_MII)
+		miiphy_register(dev->name, bus->read, bus->write);
+		/* Set phy address of the port */
+		if (miiphy_write(dev->name, MV_PHY_ADR_REQUEST,
+				 MV_PHY_ADR_REQUEST,
+				 PHY_BASE_ADR + devnum) != 0) {
+			netdev_err(dev, "miiphy write failed\n");
+			return 1;
+		}
+#endif
+	}
+	return 0;
+}
+
+int mv_pp2x_initialize(bd_t *bis)
+{
+	return mv_pp2x_initialize_phy(bis);
+}
+
diff --git a/include/fdtdec.h b/include/fdtdec.h
index 4b59fa8..25311c4 100644
--- a/include/fdtdec.h
+++ b/include/fdtdec.h
@@ -125,6 +125,7 @@ enum fdt_compat_id {
 	COMPAT_MVEBU_ARLP_SPI,
 	COMPAT_MVEBU_UART,
 	COMPAT_MVEBU_NETA,
+	COMPAT_MVEBU_PP2,
 	COMPAT_MVEBU_TCLOCK,
 	COMPAT_MVEBU_I2C,
 	COMPAT_MVEBU_ARLP_I2C,
diff --git a/include/netdev.h b/include/netdev.h
index 9b1704e..f9a7310 100644
--- a/include/netdev.h
+++ b/include/netdev.h
@@ -71,6 +71,9 @@ int mvneta_initialize(bd_t *bis);
 #else
 int mvneta_initialize(bd_t *bis, int base_addr, int devnum, int phy_addr);
 #endif
+#ifdef CONFIG_MVPP2X
+int mv_pp2x_initialize(bd_t *bis);
+#endif
 int natsemi_initialize(bd_t *bis);
 int ne2k_register(void);
 int npe_initialize(bd_t *bis);
diff --git a/lib/fdtdec.c b/lib/fdtdec.c
index cb5a5ec..7e8e622 100644
--- a/lib/fdtdec.c
+++ b/lib/fdtdec.c
@@ -87,6 +87,7 @@ static const char * const compat_names[COMPAT_COUNT] = {
 	COMPAT(MVEBU_ARLP_SPI, "marvell,armadalp-spi"),
 	COMPAT(MVEBU_UART, "marvell,armadalp-uart"),
 	COMPAT(MVEBU_NETA, "marvell,armadalp-neta"),
+	COMPAT(MVEBU_PP2, "marvell,armada-a8k-pp2"),
 	COMPAT(MVEBU_TCLOCK, "marvell,tclk"),
 	COMPAT(MVEBU_I2C, "marvell,mvebu-i2c"),
 	COMPAT(MVEBU_ARLP_I2C, "marvell,armadalp-i2c"),
-- 
1.9.1

