From d483c96eb7c7a0642bcfe70068978acc9dba8801 Mon Sep 17 00:00:00 2001
From: Nizan Zorea <nzorea@marvell.com>
Date: Thu, 18 Feb 2016 18:05:07 +0200
Subject: [PATCH 0883/1240] fix: fdt_config: mvebu: remove the restriction to
 call "fdt_config list"

- Remove the restriction to call "fdt_config list" before reading/selecting
  FDT from flash.
- Instead of listing options from "fdt_config list",
  add a generic routine to list options and call from everywhere needed
  (while generation list only once according to global flag).
- Added a global struct to hold all relevant list info fields (i.e config model string).

Change-Id: Ibe15dab7122b548f2db811f9c277ac27bf64459d
Signed-off-by: Nizan Zorea <nzorea@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27660
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Hanna Hawa <hannah@marvell.com>
---
 board/mvebu/common/fdt_config.c | 70 ++++++++++++++++++++++++-----------------
 1 file changed, 42 insertions(+), 28 deletions(-)

diff --git a/board/mvebu/common/fdt_config.c b/board/mvebu/common/fdt_config.c
index c74ec1c..508276b 100644
--- a/board/mvebu/common/fdt_config.c
+++ b/board/mvebu/common/fdt_config.c
@@ -26,25 +26,49 @@
 DECLARE_GLOBAL_DATA_PTR;
 
 static int fdt_list_size = -1;
-static int fdt_list_of_configs[MV_MAX_FDT_CONFIGURATION] = {-1};
+struct fdt_configs_details {
+	int fdt_config_id;
+	char fdt_model[30];
+};
 
-/* fdt_select_set - if the selected_index is exist, update active_fdt_selection field. else return without changing */
+static struct fdt_configs_details fdt_list_of_configs[MV_MAX_FDT_CONFIGURATION];
+
+/* fdt_create_list - create the list of fdt configs */
+int fdt_create_list(void)
+{
+	int i, fdt_config_id;
+	char *fdt_model;
+	void *fdt_blob_temp = __dtb_dt_begin;
+
+	fdt_list_size = 0;
+	for (i = 0; fdt_check_header(fdt_blob_temp) == 0; i++) {
+		if ((u8)fdtdec_get_int(fdt_blob_temp, 0, "board_id", -1) == cfg_eeprom_get_board_id()) {
+			fdt_list_size++;
+			fdt_model = (char *)fdt_getprop(fdt_blob_temp, 0, "model", NULL);
+			fdt_config_id = fdtdec_get_int(fdt_blob_temp, 0, "fdt_config_id", -1);
+			strcpy(fdt_list_of_configs[fdt_list_size - 1].fdt_model, fdt_model);
+			fdt_list_of_configs[fdt_list_size - 1].fdt_config_id = fdt_config_id;
+		}
+		fdt_blob_temp += MVEBU_FDT_SIZE;
+	}
+	return 0;
+}
+
+/* fdt_select_set - update active_fdt_selection field */
 int fdt_select_set(const char *selected_index)
 {
 	int i, index_int;
 	struct eeprom_struct *p_board_config;
 
 	if (fdt_list_size == -1) {
-		printf("FDT configuration list is not available.\n");
-		printf("need to run \"fdt_config list\" command before. and choose from this list.\n");
-		return 1;
+		fdt_create_list();
 	}
 
 	index_int = (int)simple_strtoul(selected_index, NULL, 16);
 	p_board_config = cfg_eeprom_get_board_config();
 	for (i = 0; i < fdt_list_size ; i++) {
-		if (index_int == fdt_list_of_configs[i]) {
-			p_board_config->board_config.active_fdt_selection = fdt_list_of_configs[i];
+		if (index_int == fdt_list_of_configs[i].fdt_config_id) {
+			p_board_config->board_config.active_fdt_selection = fdt_list_of_configs[i].fdt_config_id;
 			printf("To save the changes, please run the command fdt_config save.\n");
 			return 0;
 		}
@@ -54,25 +78,17 @@ int fdt_select_set(const char *selected_index)
 	return 1;
 }
 
-/* fdt_select_list - print list of all fdt_config_id */
+/* fdt_select_list - print list of all fdt_config_id that compatible to the boardID */
 int fdt_select_list(void)
 {
-	int i, fdt_config_id;
-	char *fdt_model;
-	void *fdt_blob_temp = __dtb_dt_begin;
+	int i;
+
+	if (fdt_list_size == -1)
+		fdt_create_list();
 
-	fdt_list_size = 0;
 	printf("FDT config list:\n");
-	for (i = 0; fdt_check_header(fdt_blob_temp) == 0; i++) {
-		if ((u8)fdtdec_get_int(fdt_blob_temp, 0, "board_id", -1) == cfg_eeprom_get_board_id()) {
-			fdt_list_size++;
-			fdt_model = (char *)fdt_getprop(fdt_blob_temp, 0, "model", NULL);
-			fdt_config_id = fdtdec_get_int(fdt_blob_temp, 0, "fdt_config_id", -1);
-			printf("\t%d - %s\n", fdt_config_id, fdt_model);
-			fdt_list_of_configs[fdt_list_size - 1] = fdt_config_id;
-		}
-		fdt_blob_temp += MVEBU_FDT_SIZE;
-	}
+	for (i = 0; i < fdt_list_size; i++)
+		printf("\t%d - %s\n", fdt_list_of_configs[i].fdt_config_id, fdt_list_of_configs[i].fdt_model);
 	return 0;
 }
 
@@ -94,16 +110,14 @@ int fdt_cfg_read_flash(const char *selected_index)
 	struct eeprom_struct *p_board_config;
 
 	if (fdt_list_size == -1) {
-		printf("FDT configuration list is not available.\n");
-		printf("need to run \"fdt_config list\" command before. and choose from this list.\n");
-		return 1;
+		fdt_create_list();
 	}
 
 	index_int = (int)simple_strtoul(selected_index, NULL, 16);
 	p_board_config = cfg_eeprom_get_board_config();
 	for (i = 0; i < fdt_list_size ; i++) {
-		if (index_int == fdt_list_of_configs[i]) {
-			cfg_eeprom_upload_fdt_from_flash(fdt_list_of_configs[i]);
+		if (index_int == fdt_list_of_configs[i].fdt_config_id) {
+			cfg_eeprom_upload_fdt_from_flash(fdt_list_of_configs[i].fdt_config_id);
 			set_working_fdt_addr(p_board_config->fdt_blob);
 			printf("To save the changes, please run the command fdt_config save.\n");
 			return 0;
@@ -132,7 +146,7 @@ int fdt_cfg_on(void)
 	return 0;
 }
 
-/* fdt_cfg_on - disable read FDT from EEPROM */
+/* fdt_cfg_off - disable read FDT from EEPROM */
 int fdt_cfg_off(void)
 {
 	struct eeprom_struct *p_board_config;
-- 
1.9.1

