From 217eaac5acb8c3f74d21e15f4e2f4cf0cd81a1cf Mon Sep 17 00:00:00 2001
From: Terry Zhou <bjzhou@marvell.com>
Date: Mon, 22 Feb 2016 15:14:45 +0800
Subject: [PATCH 0894/1240] comphy: a3700: add polarity invert support for
 comphy in armada3700

Change-Id: I6de158792bdbae2570142a64f69f01f15e224f5e
Signed-off-by: Terry Zhou <bjzhou@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27717
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
---
 arch/arm/include/asm/arch-mvebu/comphy.h      |  1 +
 doc/device-tree-bindings/phy/mvebu_comphy.txt |  3 ++
 drivers/phy/comphy_a3700.c                    | 52 ++++++++++++++++++++-------
 drivers/phy/comphy_a3700.h                    |  5 +++
 drivers/phy/comphy_core.c                     |  2 ++
 include/dt-bindings/comphy/comphy_data.h      |  6 ++++
 6 files changed, 57 insertions(+), 12 deletions(-)

diff --git a/arch/arm/include/asm/arch-mvebu/comphy.h b/arch/arm/include/asm/arch-mvebu/comphy.h
index 2787dae..e31bf8d 100644
--- a/arch/arm/include/asm/arch-mvebu/comphy.h
+++ b/arch/arm/include/asm/arch-mvebu/comphy.h
@@ -58,6 +58,7 @@ struct comphy_mux_data {
 struct comphy_map {
 	u32 type;
 	u32 speed;
+	u32 invert;
 };
 
 struct chip_serdes_phy_config {
diff --git a/doc/device-tree-bindings/phy/mvebu_comphy.txt b/doc/device-tree-bindings/phy/mvebu_comphy.txt
index 2b1f14c..c005685 100644
--- a/doc/device-tree-bindings/phy/mvebu_comphy.txt
+++ b/doc/device-tree-bindings/phy/mvebu_comphy.txt
@@ -21,6 +21,9 @@ Board specific:
 	  Every phy should have the below parameters:
 	  - phy-type: PHY type (SGMII0/SATA1/PEX2...), the posible modes under include/dt-bindings/comphy/comphy_data.h
 	  - phy-speed: PHY speed (1G/1.5G...), the posible speeds under include/dt-bindings/comphy/comphy_data.h
+	Optional properties:
+	  - phy-invert : Polarity invert (PHY_POLARITY_TXD_INVERT/PHY_POLARITY_RXD_INVERT), the
+	  	posible bits under include/dt-bindings/comphy/comphy_data.h
 
 Example:
 	comphy {
diff --git a/drivers/phy/comphy_a3700.c b/drivers/phy/comphy_a3700.c
index d5570e4..e8aa6d9 100644
--- a/drivers/phy/comphy_a3700.c
+++ b/drivers/phy/comphy_a3700.c
@@ -144,7 +144,7 @@ static u32 comphy_poll_reg(void *addr, u32 val, u32 mask, u32 timeout, u8 op_typ
   *
   * return: 1 if PLL locked (OK), 0 otherwise (FAIL)
  ***************************************************************************************************/
-static int comphy_pcie_power_up(u32 speed)
+static int comphy_pcie_power_up(u32 speed, u32 invert)
 {
 	int	ret;
 
@@ -200,7 +200,16 @@ static int comphy_pcie_power_up(u32 speed)
 	reg_set16((void __iomem *)KVCO_CAL_CTRL_ADDR(PCIE), 0x0040 | rb_use_max_pll_rate, 0xFFFF);
 
 	/*
-	 * 10. Release SW reset
+	 * 10. Check the Polarity invert bit
+	 */
+	if (invert & PHY_POLARITY_TXD_INVERT)
+		reg_set16((void __iomem *)SYNC_PATTERN_ADDR(PCIE), phy_txd_inv, 0);
+
+	if (invert & PHY_POLARITY_RXD_INVERT)
+		reg_set16((void __iomem *)SYNC_PATTERN_ADDR(PCIE), phy_rxd_inv, 0);
+
+	/*
+	 * 11. Release SW reset
 	 */
 	reg_set16((void __iomem *)GLOB_PHY_CTRL0_ADDR(PCIE),
 		  rb_mode_core_clk_freq_sel | rb_mode_pipe_width_32,
@@ -297,7 +306,7 @@ static int comphy_sata_power_up(void)
   *
   * return: 1 if PLL locked (OK), 0 otherwise (FAIL)
  ***************************************************************************************************/
-static int comphy_usb3_power_up(u32 speed)
+static int comphy_usb3_power_up(u32 speed, u32 invert)
 {
 	int	ret;
 
@@ -375,6 +384,15 @@ static int comphy_usb3_power_up(u32 speed)
 	reg_set16((void __iomem *)KVCO_CAL_CTRL_ADDR(USB3), 0x0040 | rb_use_max_pll_rate, 0xFFFF);
 
 	/*
+	 * 9. Check the Polarity invert bit
+	 */
+	if (invert & PHY_POLARITY_TXD_INVERT)
+		reg_set16((void __iomem *)SYNC_PATTERN_ADDR(USB3), phy_txd_inv, 0);
+
+	if (invert & PHY_POLARITY_RXD_INVERT)
+		reg_set16((void __iomem *)SYNC_PATTERN_ADDR(USB3), phy_rxd_inv, 0);
+
+	/*
 	 * 10. Release SW reset
 	 */
 	reg_set16((void __iomem *)GLOB_PHY_CTRL0_ADDR(USB3),
@@ -568,7 +586,7 @@ static void comphy_sgmii_phy_init(u32 lane, u32 speed)
   *
   * return: 1 if PLL locked (OK), 0 otherwise (FAIL)
  ***************************************************************************************************/
-static int comphy_sgmii_power_up(u32 lane, u32 speed)
+static int comphy_sgmii_power_up(u32 lane, u32 speed, u32 invert)
 {
 	int	ret;
 
@@ -661,8 +679,18 @@ static int comphy_sgmii_power_up(u32 lane, u32 speed)
 	/* 17. [Simulation Only: should not be used for real chip]
 	   Program COMPHY register FAST_DFE_TIMER_EN=1 to shorten RX training simulation time.
 	*/
+
+	/*
+	 * 18. Check the PHY Polarity invert bit
+	 */
+	if (invert & PHY_POLARITY_TXD_INVERT)
+		phy_write16(lane, PHY_SYNC_PATTERN_ADDR, phy_txd_inv, 0);
+
+	if (invert & PHY_POLARITY_RXD_INVERT)
+		phy_write16(lane, PHY_SYNC_PATTERN_ADDR, phy_rxd_inv, 0);
+
 	/*
-	   18. Set PHY input ports PIN_PU_PLL, PIN_PU_TX and PIN_PU_RX to 1 to start
+	   19. Set PHY input ports PIN_PU_PLL, PIN_PU_TX and PIN_PU_RX to 1 to start
 	   PHY power up sequence. All the PHY register programming should be done before
 	   PIN_PU_PLL=1.
 	   There should be no register programming for normal PHY operation from this point.
@@ -672,7 +700,7 @@ static int comphy_sgmii_power_up(u32 lane, u32 speed)
 		rb_pin_pu_pll | rb_pin_pu_rx | rb_pin_pu_tx);
 
 	/*
-	  19. Wait for PHY power up sequence to finish by checking output ports
+	  20. Wait for PHY power up sequence to finish by checking output ports
 	  PIN_PLL_READY_TX=1 and PIN_PLL_READY_RX=1.
 	 */
 	ret = comphy_poll_reg((void *)COMPHY_PHY_STAT1_ADDR(lane),	/* address */
@@ -684,12 +712,12 @@ static int comphy_sgmii_power_up(u32 lane, u32 speed)
 		error("Failed to lock PLL for SGMII PHY %d\n", lane);
 
 	/*
-	  20. Set COMPHY input port PIN_TX_IDLE=0
+	  21. Set COMPHY input port PIN_TX_IDLE=0
 	 */
 	reg_set((void __iomem *)COMPHY_PHY_CFG1_ADDR(lane), 0x0, rb_pin_tx_idle);
 
 	/*
-	  21. After valid data appear on PIN_RXDATA bus, set PIN_RX_INIT=1.
+	  22. After valid data appear on PIN_RXDATA bus, set PIN_RX_INIT=1.
 	  to start RX initialization. PIN_RX_INIT_DONE will be cleared to 0 by the PHY
 	  After RX initialization is done, PIN_RX_INIT_DONE will be set to 1 by COMPHY
 	  Set PIN_RX_INIT=0 after PIN_RX_INIT_DONE= 1.
@@ -802,7 +830,7 @@ int comphy_a3700_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy
 
 	for (lane = 0, ptr_comphy_map = serdes_map; lane < comphy_max_count; lane++, ptr_comphy_map++) {
 		debug("Initialize serdes number %d\n", lane);
-		debug("Serdes type = 0x%x\n", ptr_comphy_map->type);
+		debug("Serdes type = 0x%x invert=%d\n", ptr_comphy_map->type, ptr_comphy_map->invert);
 
 		switch (ptr_comphy_map->type) {
 		case PHY_TYPE_UNCONNECTED:
@@ -810,17 +838,17 @@ int comphy_a3700_init(struct chip_serdes_phy_config *ptr_chip_cfg, struct comphy
 			break;
 
 		case PHY_TYPE_PEX0:
-			ret = comphy_pcie_power_up(ptr_comphy_map->speed);
+			ret = comphy_pcie_power_up(ptr_comphy_map->speed, ptr_comphy_map->invert);
 			break;
 
 		case PHY_TYPE_USB3_HOST0:
 		case PHY_TYPE_USB3_DEVICE:
-			ret = comphy_usb3_power_up(ptr_comphy_map->speed);
+			ret = comphy_usb3_power_up(ptr_comphy_map->speed, ptr_comphy_map->invert);
 			break;
 
 		case PHY_TYPE_SGMII0:
 		case PHY_TYPE_SGMII1:
-			ret = comphy_sgmii_power_up(lane, ptr_comphy_map->speed);
+			ret = comphy_sgmii_power_up(lane, ptr_comphy_map->speed, ptr_comphy_map->invert);
 			break;
 
 		default:
diff --git a/drivers/phy/comphy_a3700.h b/drivers/phy/comphy_a3700.h
index bff4ae6..1ba5358 100644
--- a/drivers/phy/comphy_a3700.h
+++ b/drivers/phy/comphy_a3700.h
@@ -107,6 +107,11 @@
 #define rf_data_width_shift		10
 #define rf_data_width_mask		(0x3 << rf_data_width_shift)
 
+#define PHY_SYNC_PATTERN_ADDR		0x24	/* for phy_read16 and phy_write16 */
+#define SYNC_PATTERN_ADDR(unit)		(PHY_SYNC_PATTERN_ADDR * PHY_SHFT(unit) + PHY_BASE(unit))
+#define phy_txd_inv		BIT10
+#define phy_rxd_inv		BIT11
+
 #define PHY_REG_UNIT_CTRL_ADDR		0x48	/* for phy_read16 and phy_write16 */
 #define UNIT_CTRL_ADDR(unit)		(PHY_REG_UNIT_CTRL_ADDR * PHY_SHFT(unit) + PHY_BASE(unit))
 #define rb_idle_sync_en			BIT12
diff --git a/drivers/phy/comphy_core.c b/drivers/phy/comphy_core.c
index 74acb56..ccd346e 100644
--- a/drivers/phy/comphy_core.c
+++ b/drivers/phy/comphy_core.c
@@ -183,6 +183,8 @@ u32 comphy_init(const void *blob)
 		do {
 			comphy_map_data[lane].speed = fdtdec_get_int(blob, sub_node, "phy-speed", PHY_TYPE_INVALID);
 			comphy_map_data[lane].type = fdtdec_get_int(blob, sub_node, "phy-type", PHY_SPEED_INVALID);
+			comphy_map_data[lane].invert = fdtdec_get_int(blob, sub_node, "phy-invert",
+												PHY_POLARITY_NO_INVERT);
 			if ((comphy_map_data[lane].speed == PHY_TYPE_INVALID) ||
 			    (comphy_map_data[lane].type == PHY_SPEED_INVALID))
 				printf("no phy speed or type for lane %d, setting lane as unconnedted\n", lane + 1);
diff --git a/include/dt-bindings/comphy/comphy_data.h b/include/dt-bindings/comphy/comphy_data.h
index 64696cf..f8efa9b 100644
--- a/include/dt-bindings/comphy/comphy_data.h
+++ b/include/dt-bindings/comphy/comphy_data.h
@@ -58,6 +58,12 @@
 #define PHY_TYPE_MAX			24
 #define PHY_TYPE_INVALID		0xff
 
+#define PHY_POLARITY_NO_INVERT		0
+#define PHY_POLARITY_TXD_INVERT		1
+#define PHY_POLARITY_RXD_INVERT		2
+#define PHY_POLARITY_ALL_INVERT		(PHY_POLARITY_TXD_INVERT | PHY_POLARITY_RXD_INVERT)
+
+
 #define UTMI_PHY_TO_USB_HOST0		0
 #define UTMI_PHY_TO_USB_HOST1		1
 #define UTMI_PHY_TO_USB_DEVICE0		2
-- 
1.9.1

