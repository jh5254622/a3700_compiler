From 0c6ac4a7b480a336ed9ce4aa3a40bd29a9d25b5a Mon Sep 17 00:00:00 2001
From: "hayim@marvell.com" <hayim@marvell.com>
Date: Wed, 24 Feb 2016 18:46:08 +0200
Subject: [PATCH 0904/1240] iob: removed iob windows configuration

- This configuration was moved to ATF.
- Only iob windows print (used by map command)

Change-Id: I6ab5e8ed7245025c259c1313936dec133afba511
Signed-off-by: hayim@marvell.com <hayim@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27860
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/cpu/armv8/armada8k/mvebu_iob.c | 191 +++++++-------------------------
 arch/arm/cpu/mvebu-common/soc-init.c    |   8 +-
 arch/arm/dts/cp110.dtsi                 |   4 -
 arch/arm/include/asm/arch-mvebu/iob.h   |   1 -
 4 files changed, 40 insertions(+), 164 deletions(-)

diff --git a/arch/arm/cpu/armv8/armada8k/mvebu_iob.c b/arch/arm/cpu/armv8/armada8k/mvebu_iob.c
index 5afeeb2..adae105 100644
--- a/arch/arm/cpu/armv8/armada8k/mvebu_iob.c
+++ b/arch/arm/cpu/armv8/armada8k/mvebu_iob.c
@@ -20,11 +20,7 @@
 /* #define DEBUG_REG */
 
 #include <common.h>
-#include <asm/system.h>
 #include <asm/io.h>
-#include <fdtdec.h>
-#include <malloc.h>
-#include <asm/arch-mvebu/mvebu.h>
 #include <asm/arch-mvebu/fdt.h>
 #include <asm/arch-mvebu/iob.h>
 
@@ -32,123 +28,76 @@
 #define WIN_ENABLE_BIT			(0x1)
 /* Physical address of the base of the window = {AddrLow[19:0],20`h0} */
 #define ADDRESS_SHIFT			(20 - 4)
-#define ADDRESS_MASK			(0xFFFFFFF0)
-#define IOB_WIN_ALIGNMENT		(0x100000)
 
 /* IOB registers */
 #define IOB_MAX_WIN_NUM			(24)
 
-#define IOB_WIN_CR_OFFSET(win)		(iob_info->iob_base + 0x0 + (0x20 * win))
+#define IOB_WIN_CR_OFFSET(base, win)	(base + 0x0 + (0x20 * win))
 #define IOB_TARGET_ID_OFFSET		(8)
 #define IOB_TARGET_ID_MASK		(0xF)
 
-#define IOB_WIN_SCR_OFFSET(win)		(iob_info->iob_base + 0x4 + (0x20 * win))
-#define IOB_WIN_ENA_CTRL_WRITE_SECURE	(0x1)
-#define IOB_WIN_ENA_CTRL_READ_SECURE	(0x2)
-#define IOB_WIN_ENA_WRITE_SECURE	(0x4)
-#define IOB_WIN_ENA_READ_SECURE		(0x8)
-
-#define IOB_WIN_ALR_OFFSET(win)		(iob_info->iob_base + 0x8 + (0x20 * win))
-#define IOB_WIN_AHR_OFFSET(win)		(iob_info->iob_base + 0xC + (0x20 * win))
+#define IOB_WIN_ALR_OFFSET(base, win)	(base + 0x8 + (0x20 * win))
+#define IOB_WIN_AHR_OFFSET(base, win)	(base + 0xC + (0x20 * win))
 
 DECLARE_GLOBAL_DATA_PTR;
 
-struct iob_configuration {
-	void __iomem *iob_base;
-	u32 max_win;
-};
-struct iob_configuration __attribute__((section(".data")))iob_config;
-struct iob_configuration __attribute__((section(".data")))*iob_info = &iob_config;
-
-struct iob_win {
-	u32 base_addr_high;
-	u32 base_addr_low;
-	u32 win_size_high;
-	u32 win_size_low;
-	u32 target_id;
-};
-
 enum target_ids_iob {
-	INTERNAL_TID    = 0x0,
-	IHB0_TID        = 0x1,
-	PEX1_TID        = 0x2,
-	PEX2_TID        = 0x3,
-	PEX0_TID        = 0x4,
-	NAND_TID        = 0x5,
-	RUNIT_TID       = 0x6,
-	IHB1_TID        = 0x7,
+	INTERNAL_TID	= 0x0,
+	IHB0_TID	= 0x1,
+	PEX1_TID	= 0x2,
+	PEX2_TID	= 0x3,
+	PEX0_TID	= 0x4,
+	NAND_TID	= 0x5,
+	RUNIT_TID	= 0x6,
+	IHB1_TID	= 0x7,
 	IOB_MAX_TID
 };
 
-static void iob_win_check(struct iob_win *win, u32 win_num)
-{
-	u64 base_addr, win_size;
-	/* check if address is aligned to the size */
-	base_addr = ((u64)win->base_addr_high << 32) + win->base_addr_low;
-	if (IS_NOT_ALIGN(base_addr, IOB_WIN_ALIGNMENT)) {
-		base_addr = ALIGN_UP(base_addr, IOB_WIN_ALIGNMENT);
-		error("Window %d: base address unaligned to 0x%x\n", win_num, IOB_WIN_ALIGNMENT);
-		printf("Align up the base address to 0x%llx\n", base_addr);
-		win->base_addr_high = (u32)(base_addr >> 32);
-		win->base_addr_low = (u32)(base_addr);
-	}
-
-	/* size parameter validity check */
-	win_size = ((u64)win->win_size_high << 32) + win->win_size_low;
-	if (IS_NOT_ALIGN(win_size, IOB_WIN_ALIGNMENT)) {
-		win_size = ALIGN_UP(win_size, IOB_WIN_ALIGNMENT);
-		error("Window %d: window size unaligned to 0x%x\n", win_num, IOB_WIN_ALIGNMENT);
-		printf("Aligning size to 0x%llx\n", win_size);
-		win->win_size_high = (u32)(win_size >> 32);
-		win->win_size_low = (u32)(win_size);
-	}
-}
-
-static void iob_enable_win(struct iob_win *win, u32 win_id)
-{
-	u32 iob_win_reg;
-	u32 alr, ahr;
-	u64 start_addr, end_addr;
-
-	iob_win_reg = WIN_ENABLE_BIT;
-	iob_win_reg |= (win->target_id & IOB_TARGET_ID_MASK) << IOB_TARGET_ID_OFFSET;
-	writel(iob_win_reg, IOB_WIN_CR_OFFSET(win_id));
-
-	start_addr = ((u64)win->base_addr_high << 32) + win->base_addr_low;
-	end_addr = (start_addr + (((u64)win->win_size_high << 32) + win->win_size_low) - 1);
-	alr = (u32)((start_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
-	ahr = (u32)((end_addr >> ADDRESS_SHIFT) & ADDRESS_MASK);
-
-	writel(alr, IOB_WIN_ALR_OFFSET(win_id));
-	writel(ahr, IOB_WIN_AHR_OFFSET(win_id));
-}
-
 void dump_iob(void)
 {
 	u32 win_id, win_cr, alr, ahr;
 	u8 target_id;
 	u64 start, end;
-	char *iob_target_name[IOB_MAX_TID] = {"CONFIG", "IHB0 ", "PEX1 ", "PEX2 ",
-					      "PEX0 ", "NAND ", "RUNIT", "IHB1 "};
+	const void *blob = gd->fdt_blob;
+	void __iomem *iob_base;
+	u32 max_win, node;
+	char *iob_target_name[IOB_MAX_TID] = {"CONFIG", "IHB0  ", "PEX1  ", "PEX2  ",
+					      "PEX0  ", "NAND  ", "RUNIT ", "IHB1  "};
+
+	/* Get address decoding node from the FDT blob */
+	node = fdt_node_offset_by_compatible(blob, -1, fdtdec_get_compatible(COMPAT_MVEBU_IOB));
+	if (node < 0) {
+		error("No IOB address decoding node found in FDT blob\n");
+		return;
+	}
+	/* Get the base address of the address decoding MBUS */
+	iob_base = (void *)fdt_get_regs_offs(blob, node, "reg");
+
+	/* Get the maximum number of iob windows supported */
+	max_win = fdtdec_get_int(blob, node, "max-win", 0);
+	if (max_win == 0) {
+		max_win = IOB_MAX_WIN_NUM;
+		error("failed reading max windows number\n");
+	}
 
 	/* Dump all IOB windows */
-	printf("bank  id target  start              end\n");
+	printf("bank  id target  start		    end\n");
 	printf("----------------------------------------------------\n");
-	for (win_id = 0; win_id < iob_info->max_win; win_id++) {
-		win_cr = readl(IOB_WIN_CR_OFFSET(win_id));
+	for (win_id = 0; win_id < max_win; win_id++) {
+		win_cr = readl(IOB_WIN_CR_OFFSET(iob_base, win_id));
 		if (win_cr & WIN_ENABLE_BIT) {
 			target_id = (win_cr >> IOB_TARGET_ID_OFFSET) & IOB_TARGET_ID_MASK;
-			alr = readl(IOB_WIN_ALR_OFFSET(win_id));
+			alr = readl(IOB_WIN_ALR_OFFSET(iob_base, win_id));
 			start = ((u64)alr << ADDRESS_SHIFT);
 			if (win_id != 0) {
-				ahr = readl(IOB_WIN_AHR_OFFSET(win_id));
+				ahr = readl(IOB_WIN_AHR_OFFSET(iob_base, win_id));
 				end = (((u64)ahr + 0x10) << ADDRESS_SHIFT);
 			} else {
 				/* Window #0 size is hardcoded to 16MB, as it's
 				** reserved for CP configuration space. */
 				end = start + (16 << 20);
 			}
-			printf("iob   %02d %s   0x%016llx 0x%016llx\n"
+			printf("iob   %02d %s  0x%016llx 0x%016llx\n"
 					, win_id, iob_target_name[target_id], start, end);
 		}
 	}
@@ -156,67 +105,3 @@ void dump_iob(void)
 	return;
 }
 
-int init_iob(void)
-{
-	struct iob_win *memory_map, *win;
-	const void *blob = gd->fdt_blob;
-	u32 win_id, win_reg;
-	u32 node, win_count;
-
-	debug_enter();
-	debug("Initializing IOB Address decoding\n");
-
-	/* Get address decoding node from the FDT blob */
-	node = fdt_node_offset_by_compatible(blob, -1, fdtdec_get_compatible(COMPAT_MVEBU_IOB));
-	if (node < 0) {
-		error("No IOB address decoding node found in FDT blob\n");
-		return -1;
-	}
-	/* Get the base address of the address decoding MBUS */
-	iob_info->iob_base = (void *)fdt_get_regs_offs(blob, node, "reg");
-
-	/* Get the maximum number of iob windows supported */
-	iob_info->max_win = fdtdec_get_int(blob, node, "max-win", 0);
-	if (iob_info->max_win == 0) {
-		iob_info->max_win = IOB_MAX_WIN_NUM;
-		error("failed reading max windows number\n");
-	}
-
-	memory_map = malloc(iob_info->max_win * sizeof(struct iob_win));
-	if (memory_map == 0) {
-		error("failed allocating struct to init windows configuration\n");
-		return -1;
-	}
-
-	/* Get the array of the windows and fill the map data */
-	win_count = fdtdec_get_int_array_count(blob, node, "windows", (u32 *)memory_map, iob_info->max_win * 5);
-	if (win_count <= 0) {
-		debug("no windows configurations found\n");
-		return 0;
-	}
-	win_count = win_count/5; /* every window had 5 variables in FDT:
-				    base high, base low, size high, size low, target id) */
-
-	/* disable all IOB windows, start from win_id = 1 because can't disable internal register window */
-	for (win_id = 1; win_id < iob_info->max_win; win_id++) {
-		win_reg = readl(IOB_WIN_CR_OFFSET(win_id));
-		win_reg &= ~WIN_ENABLE_BIT;
-		writel(win_reg, IOB_WIN_CR_OFFSET(win_id));
-
-		win_reg = ~IOB_WIN_ENA_CTRL_WRITE_SECURE;
-		win_reg &= ~IOB_WIN_ENA_CTRL_READ_SECURE;
-		win_reg &= ~IOB_WIN_ENA_WRITE_SECURE;
-		win_reg &= ~IOB_WIN_ENA_READ_SECURE;
-		writel(win_reg, IOB_WIN_SCR_OFFSET(win_id));
-	}
-
-	for (win_id = 1, win = memory_map; win_id < win_count + 1; win_id++, win++) {
-		iob_win_check(win, win_id);
-		iob_enable_win(win, win_id);
-	}
-
-	debug("Done IOB Address decoding Initializing\n");
-	debug_exit();
-
-	return 0;
-}
diff --git a/arch/arm/cpu/mvebu-common/soc-init.c b/arch/arm/cpu/mvebu-common/soc-init.c
index 2ebd15a..1d95c08 100644
--- a/arch/arm/cpu/mvebu-common/soc-init.c
+++ b/arch/arm/cpu/mvebu-common/soc-init.c
@@ -33,9 +33,6 @@
 #ifdef CONFIG_MVEBU_CCU
 #include <asm/arch-mvebu/ccu.h>
 #endif
-#ifdef CONFIG_MVEBU_IOB
-#include <asm/arch-mvebu/iob.h>
-#endif
 #ifdef CONFIG_MVEBU_MBUS
 #include <asm/arch-mvebu/mbus.h>
 #endif
@@ -96,12 +93,11 @@ int mvebu_soc_init()
 	/* Sample at reset register init */
 	mvebu_sar_init(gd->fdt_blob);
 #endif
-#ifdef CONFIG_MVEBU_IOB
-	init_iob();
-#endif
+
 #ifdef CONFIG_MVEBU_PHY_INDIRECT
 	mvebu_phy_indirect_init();
 #endif
+
 #ifdef CONFIG_MVEBU_ICU
 	/* Temporary initialization in u-boot */
 	icu_init(0xF2000000, 64, 0);
diff --git a/arch/arm/dts/cp110.dtsi b/arch/arm/dts/cp110.dtsi
index 6afb858..9b7b669 100644
--- a/arch/arm/dts/cp110.dtsi
+++ b/arch/arm/dts/cp110.dtsi
@@ -20,10 +20,6 @@ map-iob {
 	compatible = "marvell,mvebu-iob";
 	reg = <0x190000 0x50>;
 	max-win = <16>;
-	windows = <0x0 0xf7000000 0x0 0x1000000 0x2 /* PEX1_X1 window */
-		0x0 0xf8000000 0x0 0x1000000 0x3 /* PEX2_X1 window */
-		0x0 0xf6000000 0x0 0x1000000 0x4 /* PEX0_X4 window */
-		0x0 0xf9000000 0x0 0x1000000 0x5 /* NAND window */>;
 };
 
 refclk {
diff --git a/arch/arm/include/asm/arch-mvebu/iob.h b/arch/arm/include/asm/arch-mvebu/iob.h
index 5aa28ca..916733f 100644
--- a/arch/arm/include/asm/arch-mvebu/iob.h
+++ b/arch/arm/include/asm/arch-mvebu/iob.h
@@ -20,7 +20,6 @@
 #define _IOB_H_
 
 void dump_iob(void);
-int init_iob(void);
 
 #endif /* _IOB_H_ */
 
-- 
1.9.1

