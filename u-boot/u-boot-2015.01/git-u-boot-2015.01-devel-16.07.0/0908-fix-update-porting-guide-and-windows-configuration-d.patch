From 8dc0dcbf2784dc8880b707b1f2eebe22c6e7d26c Mon Sep 17 00:00:00 2001
From: "hayim@marvell.com" <hayim@marvell.com>
Date: Mon, 29 Feb 2016 16:32:48 +0200
Subject: [PATCH 0908/1240] fix: update porting guide and windows configuration
 documentation

since those configurations were moved to ATF, the documentation
was update accordingly

Change-Id: I9d1479ad95dbcf6d944ae08998cca99fd5275306
Signed-off-by: hayim@marvell.com <hayim@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/27938
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 doc/device-tree-bindings/misc/mvebu-ccu.txt | 24 +++-----------------
 doc/device-tree-bindings/misc/mvebu-iob.txt | 35 +++--------------------------
 doc/device-tree-bindings/misc/mvebu-rfu.txt | 32 +++-----------------------
 doc/mvebu/porting_guide.txt                 |  3 ---
 4 files changed, 9 insertions(+), 85 deletions(-)

diff --git a/doc/device-tree-bindings/misc/mvebu-ccu.txt b/doc/device-tree-bindings/misc/mvebu-ccu.txt
index 6eb2d46..83510a7 100644
--- a/doc/device-tree-bindings/misc/mvebu-ccu.txt
+++ b/doc/device-tree-bindings/misc/mvebu-ccu.txt
@@ -1,7 +1,9 @@
 Marvell CCU address decoding bindings
 =====================================
 
-The CCU node includes descriptions of the address decoding configuration.
+The CCU node includes descriptions of the address decoding unit.
+It is used for u-boot 'map' command which displays the CCU window configuration.
+Note that the windows configuration is done in ATF package (see ATF porting guide under doc/marvell).
 
 Mandatory properties:
 SoC specific:
@@ -9,31 +11,11 @@ SoC specific:
 		should be "marvell,mvebu-ccu"
 	- reg: the base address of the CCU unit
 	- max-win: number of the max mbus windows
-	- windows: entry that includes the configuration of the windows
-	  every window has 5 parameters:
-	  - high base address of the window
-	  - low base address of the window
-	  - high size of the window
-	  - low size of the window
-	  - target-id of the window
 
-Note: if the base address is more than 32bits, it should be divided into high and low,
-	the same applies to the size field, if it more that 32bits, it should be divided into high and low.
-	Base example:
-		base address: 0x10f0000000 should be divided into:
-		base address high: 0x10
-		base address low: 0xf0000000
-	Size example:
-		size: 0x1E00F00000 should divided into:
-		size high: 0x1E
-		size low: 0x00F00000
 
 Example:
 	map-ccu {
 		compatible = "marvell,mvebu-ccu";
 		reg = <0x0 0x50>;
 		max-win = <8>;
-		windows = <0x0 0xf8000000 0x0 0x2000000 0x00 /* IO window */>;
 	};
-
-
diff --git a/doc/device-tree-bindings/misc/mvebu-iob.txt b/doc/device-tree-bindings/misc/mvebu-iob.txt
index 837d6b6..0dd2477 100644
--- a/doc/device-tree-bindings/misc/mvebu-iob.txt
+++ b/doc/device-tree-bindings/misc/mvebu-iob.txt
@@ -1,7 +1,9 @@
 Marvell IOB address decoding bindings
 =====================================
 
-The IOB node includes descriptions of the address decoding configuration.
+The IOB node includes descriptions of the address decoding unit.
+It is used for u-boot 'map' command which displays the IOB window configuration.
+Note that the windows configuration is done in ATF package (see ATF porting guide under doc/marvell).
 
 IOB supports up to n (in CP110 n=24) windows for external memory transaction.
 When a transaction passes through the IOB, its address is compared to each of
@@ -14,42 +16,11 @@ SoC specific:
 		should be "marvell,mvebu-iob"
 	- reg: the base address of the IOB unit
 	- max-win: number of the max IOB windows
-	- windows: entry that includes the configuration of the windows
-	  every window has 5 parameters:
-	  - high base address of the window
-	  - low base address of the window
-	  - high size of the window
-	  - low size of the window
-	  - target-id of the window
 
-Target ID options:
-	- 0x0 = Internal configuration space
-	- 0x1 = IHB0
-	- 0x2 = PEX1_X1
-	- 0x3 = PEX2_X1
-	- 0x4 = PEX0_X4
-	- 0x5 = NAND flash
-	- 0x6 = RUNIT (NOR/SPI/BootRoom)
-	- 0x7 = IHB1
-
-Note: if the base address is more than 32bits, it should be divided into high and low,
-	the same applies to the size field, if it more than 32 bits, it should be divided into high and low.
-	Base example:
-		base address: 0x10f0000000 should divided into:
-		base address high: 0x10
-		base address low: 0xf0000000
-	Size example:
-		size: 0x1E00F00000 should divided into:
-		size high: 0x1E
-		size low: 0x00F00000
 
 Example:
 	map-iob {
 		compatible = "marvell,mvebu-iob";
 		reg = <0x190000 0x50>;
 		max-win = <24>;
-		windows = <0x0 0xf8000000 0x0 0x1000000 0x2 /* PEX1_X1 window */
-			0x0 0xf9000000 0x0 0x1000000 0x5 /* NAND window */>;
 	};
-
-
diff --git a/doc/device-tree-bindings/misc/mvebu-rfu.txt b/doc/device-tree-bindings/misc/mvebu-rfu.txt
index 916e99b..f439824 100644
--- a/doc/device-tree-bindings/misc/mvebu-rfu.txt
+++ b/doc/device-tree-bindings/misc/mvebu-rfu.txt
@@ -1,15 +1,9 @@
 Marvell RFU address decoding bindings
 =====================================
 
-The RFU node includes descriptions of the address decoding configuration.
-Transactions that are decoded by CCU windows as IO peripherals, have an additional
-layer of decoding, which defines one of the following targets:
-	0x0 = BootRom
-	0x1 = STM (Serial Trace Macro-cell, a programmer's port into trace stream)
-	0x2 = SPI direct access
-	0x3 = PCIe registers
-	0x4 = IHB Port
-	0x5 = PCIe port
+The RFU node includes descriptions of the address decoding unit.
+It is used for u-boot 'map' command which displays the RFU window configuration.
+Note that the windows configuration is done in ATF package (see ATF porting guide under doc/marvell).
 
 Mandatory properties:
 SoC specific:
@@ -17,30 +11,10 @@ SoC specific:
 		should be "marvell,mvebu-rfu"
 	- reg: the base address of the RFU window
 	- max-win: number of the max mbus windows
-	- windows: entry that include the configuration of the windows
-	  every window has 5 parameters:
-	  - high base address of the window
-	  - low base address of the window
-	  - high size of the window
-	  - low size of the window
-	  - target-id of the window
 
-Note: if the base address is more than 32bits, it divided into high and low,
-	the same applies to the size field, if it more than 32 bits, it should be divided into high and low.
-	Base example:
-		base address: 0x10f0000000 should divided into:
-		base address high: 0x10
-		base address low: 0xf0000000
-	Size example:
-		size: 0x1E00F00000 should divided into:
-		size high: 0x1E
-		size low: 0x00F00000
 
 Example:
 	rfu {
 		compatible = "marvell,mvebu-rfu";
 		reg = <0x6f0000 0x50>;
-		windows = <0x0 0xf2000000 0x0 0x40000000 0x05 /* PCIe window */
-			0x0 0xf6000000 0x0 0x20000000 0x02 /* SPI window */>;
 	};
-
diff --git a/doc/mvebu/porting_guide.txt b/doc/mvebu/porting_guide.txt
index fa8bd91..dc06e29 100644
--- a/doc/mvebu/porting_guide.txt
+++ b/doc/mvebu/porting_guide.txt
@@ -87,9 +87,6 @@ Customer board porting procedure
 	-------------------------
 		o DDR - ddr/mvebu_ddr.txt
 		o NAND - nand/marvell-pxa3xx-nand.txt
-		o CCU - misc/mvebu-ccu.txt
-		o IOB - misc/mvebu-iob.txt
-		o RFU - misc/mvebu-rfu.txt
 		o SPI - spi/mvebu-spi.txt
 		o Thermal Sensor - thermal/mvebu-thermal-v2.txt
 
-- 
1.9.1

