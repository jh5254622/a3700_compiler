From 1349323efe9165a33b5313c900571c5e48206097 Mon Sep 17 00:00:00 2001
From: zachary <zhangzg@marvell.com>
Date: Wed, 16 Mar 2016 01:05:25 +0800
Subject: [PATCH 0949/1240] a3700: add boot mode switch feature

- Armada3700-Z chip doesn't support escape string to enter the uart mode.
  So that the u-boot cannot be recovered via uart on a boot failure. For
  Marvell board, it supports to switch the boot_src by modifying the
  sample at reset value in PCA9560.
- In early stage of SPL, the boot_src is always set to uart mode. In the
  last stage of u-boot, boot_src will be chaged back to oringal value.

Change-Id: Ic818a5171cf9f8387b80c5a5af9caa4714db48d9
Signed-off-by: zachary <zhangzg@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/26128
Reviewed-by: Wilson Ding <dingwei@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 arch/arm/cpu/armv8/armada3700/Kconfig            | 12 +++++++
 arch/arm/cpu/armv8/armada3700/Makefile           |  1 +
 arch/arm/cpu/armv8/armada3700/mvebu_bootmode.c   | 38 +++++++++++++++++++++
 arch/arm/cpu/armv8/armada3700/soc-init.c         | 12 ++++++-
 arch/arm/cpu/armv8/armada3700/spl.c              | 26 +++++++++++++++
 arch/arm/include/asm/arch-armada3700/boot_mode.h | 42 ++++++++++++++++++++++++
 arch/arm/include/asm/arch-mvebu/system_info.h    |  1 +
 7 files changed, 131 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm/cpu/armv8/armada3700/mvebu_bootmode.c
 create mode 100644 arch/arm/include/asm/arch-armada3700/boot_mode.h

diff --git a/arch/arm/cpu/armv8/armada3700/Kconfig b/arch/arm/cpu/armv8/armada3700/Kconfig
index a92edd1..a38d45b 100644
--- a/arch/arm/cpu/armv8/armada3700/Kconfig
+++ b/arch/arm/cpu/armv8/armada3700/Kconfig
@@ -25,5 +25,17 @@ config ARMV8_PSCI
 	default y
 
 
+config MVEBU_BOOTMODE_SWITCH_SUPPORT
+	bool "Mvebu bootmode switch support"
+	depends on DEVEL_BOARD
+	default y
+	help
+	  Choose this option to switch the boot source
+	  to uart at the early stage of SPL while the boot source
+	  is supposed to be restored at the last stage before reaching
+	  u-boot prompt. This mechanism is introduced
+	  in order to fallback to uart mode automatically
+	  when a mal-function bootloader image is present in flash.
+
 endif
 
diff --git a/arch/arm/cpu/armv8/armada3700/Makefile b/arch/arm/cpu/armv8/armada3700/Makefile
index be2f6db..d268ee1 100644
--- a/arch/arm/cpu/armv8/armada3700/Makefile
+++ b/arch/arm/cpu/armv8/armada3700/Makefile
@@ -24,3 +24,4 @@ obj-$(CONFIG_MVEBU_A3700_IO_ADDR_DEC) += mvebu_io_addr_dec.o
 obj-$(CONFIG_MVEBU_SPL_A3700_GPIO) += mvebu_gpio.o
 obj-$(CONFIG_MVEBU_A3700_MISC_INIT) += mvebu_misc_init.o
 obj-$(CONFIG_MVEBU_A3700_CLOCK) += mvebu_clock.o
+obj-$(CONFIG_MVEBU_BOOTMODE_SWITCH_SUPPORT) += mvebu_bootmode.o
diff --git a/arch/arm/cpu/armv8/armada3700/mvebu_bootmode.c b/arch/arm/cpu/armv8/armada3700/mvebu_bootmode.c
new file mode 100644
index 0000000..c8e0174
--- /dev/null
+++ b/arch/arm/cpu/armv8/armada3700/mvebu_bootmode.c
@@ -0,0 +1,38 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch/boot_mode.h>
+#include <i2c.h>
+
+/*
+ * switch to uart boot mode, this routine will be invoked
+ * 1. in early stage of SPL to switch boot mode to UART
+ * 2. in the latest stage of u-boot switch back to original mode
+ */
+void mvebu_boot_mode_set(uchar boot_mode)
+{
+	i2c_write(BOOT_MODE_I2C_CHIP, BOOT_MODE_I2C_ADDR, BOOT_MODE_I2C_LENG, &boot_mode, BOOT_MODE_I2C_LENG);
+}
+
+void mvebu_boot_mode_get(uchar *boot_mode)
+{
+	i2c_read(BOOT_MODE_I2C_CHIP, BOOT_MODE_I2C_ADDR, BOOT_MODE_I2C_LENG, boot_mode, BOOT_MODE_I2C_LENG);
+}
+
diff --git a/arch/arm/cpu/armv8/armada3700/soc-init.c b/arch/arm/cpu/armv8/armada3700/soc-init.c
index dcdd937..cc2b4ee 100644
--- a/arch/arm/cpu/armv8/armada3700/soc-init.c
+++ b/arch/arm/cpu/armv8/armada3700/soc-init.c
@@ -27,6 +27,7 @@
 #include <asm/arch-mvebu/pinctl.h>
 #include <i2c.h>
 #include <libfdt.h>
+#include <asm/arch/boot_mode.h>
 
 /* IO expander I2C device */
 #define I2C_IO_EXP_ADDR	0x22
@@ -258,7 +259,16 @@ bool mvebu_is_in_recovery_mode(void)
 #ifdef CONFIG_LAST_STAGE_INIT
 int last_stage_init(void)
 {
+	/* here we switch back to original mode mode by
+	 * writing I2C chip 4c address 0.
+	 */
+	uchar boot_mode_set = get_info(BOOT_MODE);
+
+	/* Check if oringinal mode is invalid, if it is invalid and set it to auto scan mode */
+	if (boot_mode_set < BOOT_MODE_AUTO_SCAN || boot_mode_set >= BOOT_MODE_MAX)
+		mvebu_boot_mode_set(BOOT_MODE_AUTO_SCAN);
+	else
+		mvebu_boot_mode_set(boot_mode_set);
 	return 0;
 }
 #endif
-
diff --git a/arch/arm/cpu/armv8/armada3700/spl.c b/arch/arm/cpu/armv8/armada3700/spl.c
index eace09f..58fad93 100644
--- a/arch/arm/cpu/armv8/armada3700/spl.c
+++ b/arch/arm/cpu/armv8/armada3700/spl.c
@@ -23,6 +23,7 @@
 #include <asm/arch-mvebu/mbus.h>
 #include <asm/arch/gpio.h>
 #include <asm/arch-mvebu/mvebu_misc.h>
+#include <asm/arch/boot_mode.h>
 #include <asm/arch-mvebu/ddr.h>
 #include <asm/arch-mvebu/fdt.h>
 #include <spl.h>
@@ -33,6 +34,10 @@ void (*ptr_uboot_start)(void);
 
 void board_init_f(ulong silent)
 {
+#ifdef CONFIG_MVEBU_BOOTMODE_SWITCH_SUPPORT
+	uchar boot_mode_read;
+#endif
+
 	gd = &gdata;
 	gd->baudrate = CONFIG_BAUDRATE;
 
@@ -81,6 +86,27 @@ void board_init_f(ulong silent)
 	*/
 	preloader_console_init();
 
+#ifdef CONFIG_MVEBU_BOOTMODE_SWITCH_SUPPORT
+	/* Armada3700-Z chip doesn't support escape string to enter the uart mode.
+	 * So that the u-boot cannot be recovered via uart on a boot failure. For Marvell
+	 * board, it supports to switch the boot_src by modifying the sample at reset
+	 * value in PCA9560.
+	 *
+	 * 1. in early stage of SPL, boot mode from SatR device will be read, kept
+	 *    the original value, I2C mem will be written to boot from UART, so if
+	 *    SPL/u-boot crashed, board stays in boot from UART mode.
+	 * 2. in the last stage of u-boot, boot mode will be written back to
+	 *    oringal value.
+	 */
+	mvebu_boot_mode_get(&boot_mode_read);
+
+	/* Pass BOOT_MODE from SPL to u-boot */
+	set_info(BOOT_MODE, boot_mode_read);
+
+	/* switch to uart boot mode */
+	mvebu_boot_mode_set(BOOT_MODE_UART);
+#endif
+
 	/* Clock should be enabeld before initialize the I/O units */
 #if defined(CONFIG_MVEBU_A3700_CLOCK) && !defined(SPL_IS_IN_DRAM)
 	/* Dynamic clocks configuration is only supported for SPL running from SRAM
diff --git a/arch/arm/include/asm/arch-armada3700/boot_mode.h b/arch/arm/include/asm/arch-armada3700/boot_mode.h
new file mode 100644
index 0000000..e75c79b
--- /dev/null
+++ b/arch/arm/include/asm/arch-armada3700/boot_mode.h
@@ -0,0 +1,42 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+#ifndef _BOOT_MODE_H_
+#define _BOOT_MODE_H_
+
+/* BOOT MODE */
+enum boot_mode_ids {
+	BOOT_MODE_AUTO_SCAN = 0,
+	BOOT_MODE_SPI,
+	BOOT_MODE_EMMC,
+	BOOT_MODE_EMMC_ALTERNATE,
+	BOOT_MODE_SATA,
+	BOOT_MODE_NAND,
+	BOOT_MODE_UART,
+	BOOT_MODE_MAX,
+};
+
+/* EEPROM FOR BOOT MODE */
+#define BOOT_MODE_I2C_CHIP	0x4c
+#define BOOT_MODE_I2C_ADDR	0
+#define BOOT_MODE_I2C_LENG	1
+
+void mvebu_boot_mode_set(uchar boot_mode);
+void mvebu_boot_mode_get(uchar *boot_mode);
+
+#endif /* _BOOT_MODE_H_ */
diff --git a/arch/arm/include/asm/arch-mvebu/system_info.h b/arch/arm/include/asm/arch-mvebu/system_info.h
index 94de2b2..f91685d 100644
--- a/arch/arm/include/asm/arch-mvebu/system_info.h
+++ b/arch/arm/include/asm/arch-mvebu/system_info.h
@@ -34,6 +34,7 @@ enum sys_info_type {
 	DRAM_CS2,
 	DRAM_CS3,
 	RECOVERY_MODE,
+	BOOT_MODE,
 	MAX_OPTION,
 };
 
-- 
1.9.1

