From 1de1be4beb8e8778c5c3af5ce5287fd4a16c9743 Mon Sep 17 00:00:00 2001
From: Nizan Zorea <nzorea@marvell.com>
Date: Wed, 16 Mar 2016 16:11:00 +0200
Subject: [PATCH 0975/1240] sar: ap806: add support for AP806_A0 sar registers

add a sar driver for AP806_A0.

Change-Id: I8d1879898e4d091c6b482acee9984d82b51cd2d6
Signed-off-by: Nizan Zorea <nzorea@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/28300
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 drivers/misc/mvebu_sar/Makefile     |   6 ++
 drivers/misc/mvebu_sar/ap806_sar.c  | 179 +++++++++++++++++++------------
 drivers/misc/mvebu_sar/ap806z_sar.c | 207 ++++++++++++++++++++++++++++++++++++
 3 files changed, 324 insertions(+), 68 deletions(-)
 create mode 100644 drivers/misc/mvebu_sar/ap806z_sar.c

diff --git a/drivers/misc/mvebu_sar/Makefile b/drivers/misc/mvebu_sar/Makefile
index 5d54e10..637ba09 100644
--- a/drivers/misc/mvebu_sar/Makefile
+++ b/drivers/misc/mvebu_sar/Makefile
@@ -1,4 +1,10 @@
 
 obj-$(CONFIG_MVEBU_CHIP_SAR) += chip_sar.o
+
+ifdef CONFIG_AP806_Z_SUPPORT
+obj-$(CONFIG_TARGET_ARMADA_8K) += ap806z_sar.o
+else
 obj-$(CONFIG_TARGET_ARMADA_8K) += ap806_sar.o
+endif
+
 obj-$(CONFIG_TARGET_ARMADA_8K) += cp110_sar.o
diff --git a/drivers/misc/mvebu_sar/ap806_sar.c b/drivers/misc/mvebu_sar/ap806_sar.c
index 494cee0..e772c9c 100644
--- a/drivers/misc/mvebu_sar/ap806_sar.c
+++ b/drivers/misc/mvebu_sar/ap806_sar.c
@@ -27,37 +27,51 @@
 
 #include "chip_sar.h"
 
-#define DDR_PLL_ID	0
-#define RING_PLL_ID	1
-#define CPU_PLL_ID	2
+#define CPU_CLOCK_ID	0
+#define DDR_CLOCK_ID	1
+#define RING_CLOCK_ID	2
 
 /* SAR AP806 registers */
-#define SAR_DUAL_AP_MODE_OFFSET		0
-#define SAR_DUAL_AP_MODE_MASK		(0x1 << SAR_DUAL_AP_MODE_OFFSET)
-#define SAR_I2C_INIT_EN_OFFSET		1
-#define SAR_I2C_INIT_EN_MASK		(0x1 << SAR_I2C_INIT_EN_OFFSET)
-#define SAR_BOOT_SRC_OFFSET		2
-#define SAR_BOOT_SRC_MASK		(0x3 << SAR_BOOT_SRC_OFFSET)
-#define SAR_C2C_IHB_OFFSET		4
-#define SAR_C2C_IHB_MASK		(0x1 << SAR_C2C_IHB_OFFSET)
-#define SAR_EFUSE_BYPASS_OFFSET		7
-#define SAR_EFUSE_BYPASS_MASK		(0x1 << SAR_EFUSE_BYPASS_OFFSET)
-#define SAR_STAND_ALONE_AP_MODE_OFFSET	8
-#define SAR_STAND_ALONE_AP_MODE_MASK	(0x1 << SAR_STAND_ALONE_AP_MODE_OFFSET)
-#define SAR_SLAVE_AP_MODE_OFFSET	9
-#define SAR_SLAVE_AP_MODE_MASK		(0x1 << SAR_SLAVE_AP_MODE_OFFSET)
-#define SAR_AVS_MASTER_OFFSET		11
-#define SAR_AVS_MASTER_MASK		(0x1 << SAR_AVS_MASTER_OFFSET)
+#define SAR_CLOCK_FREQ_MODE_OFFSET	0
+#define SAR_CLOCK_FREQ_MODE_MASK	(0x1f << SAR_CLOCK_FREQ_MODE_OFFSET)
+#define SAR_TEST_MODE_ENABLE_OFFSET	5
+#define SAR_TEST_MODE_ENABLE_MASK	(0x1 << SAR_TEST_MODE_ENABLE_OFFSET)
+#define SAR_SKIP_LINK_I2C_INIT_OFFSET	6
+#define SAR_SKIP_LINK_I2C_INIT_MASK	(0x1 << SAR_SKIP_LINK_I2C_INIT_OFFSET)
+#define SAR_POR_BYPASS_OFFSET		7
+#define SAR_POR_BYPASS_MASK		(0x1 << SAR_POR_BYPASS_OFFSET)
+#define SAR_BOOT_SOURCE_OFFSET		8
+#define SAR_BOOT_SOURCE_MASK		(0x7 << SAR_BOOT_SOURCE_OFFSET)
+#define SAR_PIDI_C2C_IHB_SELECT_OFFSET	11
+#define SAR_PIDI_C2C_IHB_SELECT_MASK	(0x1 << SAR_PIDI_C2C_IHB_SELECT_OFFSET)
+#define SAR_I2C_INIT_ENABLE_OFFSET	12
+#define SAR_I2C_INIT_ENABLE_MASK	(0x1 << SAR_I2C_INIT_ENABLE_OFFSET)
+#define SAR_SSCG_DISABLE_OFFSET		13
+#define SAR_SSCG_DISABLE_MASK		(0x1 << SAR_SSCG_DISABLE_OFFSET)
+#define SAR_PIDI_HW_TRAINING_DIS_OFFSET	14
+#define SAR_PIDI_HW_TRAINING_DIS_MASK	(0x1 << SAR_PIDI_HW_TRAINING_DIS_OFFSET)
+#define SAR_CPU_FMAX_REFCLK_OFFSET	15
+#define SAR_CPU_FMAX_REFCLK_MASK	(0x1 << SAR_CPU_FMAX_REFCLK_OFFSET)
+#define SAR_IHB_DIFF_REFCLK_DIS_OFFSET	16
+#define SAR_IHB_DIFF_REFCLK_DIS_MASK	(0x1 << SAR_IHB_DIFF_REFCLK_DIS_OFFSET)
+#define SAR_REF_CLK_MSTR_OFFSET		17
+#define SAR_REF_CLK_MSTR_MASK		(0x1 << SAR_REF_CLK_MSTR_OFFSET)
+#define SAR_CPU_WAKE_UP_OFFSET		18
+#define SAR_CPU_WAKE_UP_MASK		(0x1 << SAR_CPU_WAKE_UP_OFFSET)
+#define SAR_XTAL_BYPASS_OFFSET		19
+#define SAR_XTAL_BYPASS_MASK		(0x1 << SAR_XTAL_BYPASS_OFFSET)
+#define SAR_PIDI_LOW_SPEED_OFFSET	20
+#define SAR_PIDI_LOW_SPEED_MASK		(0x1 << SAR_PIDI_LOW_SPEED_OFFSET)
 
 #define AP806_SAR_1_REG			4
-#define SAR1_PLL2_OFFSET		(15)
-#define SAR1_PLL2_MASK			(0x7 << SAR1_PLL2_OFFSET)
-#define SAR1_PLL1_OFFSET		(18)
-#define SAR1_PLL1_MASK			(0x7 << SAR1_PLL1_OFFSET)
-#define SAR1_PLL0_OFFSET		(21)
-#define SAR1_PLL0_MASK			(0x7 << SAR1_PLL0_OFFSET)
-#define SAR1_STANDALONE_OFFSET		(24)
-#define SAR1_STANDALONE_MASK		(1 << SAR1_STANDALONE_OFFSET)
+#define SAR1_PLL2_OFFSET		(9)
+#define SAR1_PLL2_MASK			(0x1f << SAR1_PLL2_OFFSET)
+#define SAR1_PLL1_OFFSET		(14)
+#define SAR1_PLL1_MASK			(0x1f << SAR1_PLL1_OFFSET)
+#define SAR1_PLL0_OFFSET		(19)
+#define SAR1_PLL0_MASK			(0x1f << SAR1_PLL0_OFFSET)
+#define SAR1_PIDI_CONNECT_OFFSET	(24)
+#define SAR1_PIDI_CONNECT_MASK		(1 << SAR1_PIDI_CONNECT_OFFSET)
 
 struct sar_info {
 	char *name;
@@ -66,79 +80,108 @@ struct sar_info {
 };
 
 struct sar_info ap806_sar_0[] = {
-	{"Dual AP mode       ", SAR_DUAL_AP_MODE_OFFSET, SAR_DUAL_AP_MODE_MASK },
-	{"I2C init Enable    ", SAR_I2C_INIT_EN_OFFSET, SAR_I2C_INIT_EN_MASK },
-	{"Boot Source        ", SAR_BOOT_SRC_OFFSET, SAR_BOOT_SRC_MASK },
-	{"C2C IHB select     ", SAR_C2C_IHB_OFFSET, SAR_C2C_IHB_MASK },
-	{"EFUSE ByPass       ", SAR_EFUSE_BYPASS_OFFSET, SAR_EFUSE_BYPASS_MASK },
-	{"Stand Alone AP mode", SAR_STAND_ALONE_AP_MODE_OFFSET, SAR_STAND_ALONE_AP_MODE_MASK},
-	{"Slave AP mode      ", SAR_SLAVE_AP_MODE_OFFSET, SAR_SLAVE_AP_MODE_MASK },
-	{"AVS master         ", SAR_AVS_MASTER_OFFSET, SAR_AVS_MASTER_MASK },
+	{"Clock Freq mode		  ", SAR_CLOCK_FREQ_MODE_OFFSET, SAR_CLOCK_FREQ_MODE_MASK },
+	{"Test mode enable		  ", SAR_TEST_MODE_ENABLE_OFFSET, SAR_TEST_MODE_ENABLE_MASK },
+	{"Skip link i2c init		  ", SAR_SKIP_LINK_I2C_INIT_OFFSET, SAR_SKIP_LINK_I2C_INIT_MASK },
+	{"Por ByPass			  ", SAR_POR_BYPASS_OFFSET, SAR_POR_BYPASS_MASK },
+	{"Boot Source			  ", SAR_BOOT_SOURCE_OFFSET, SAR_BOOT_SOURCE_MASK },
+	{"PIDI C2C IHB select		  ", SAR_PIDI_C2C_IHB_SELECT_OFFSET, SAR_PIDI_C2C_IHB_SELECT_MASK },
+	{"I2C init enable		  ", SAR_I2C_INIT_ENABLE_OFFSET, SAR_I2C_INIT_ENABLE_MASK },
+	{"SSCG disable			  ", SAR_SSCG_DISABLE_OFFSET, SAR_SSCG_DISABLE_MASK },
+	{"PIDI hw training disable	  ", SAR_PIDI_HW_TRAINING_DIS_OFFSET, SAR_PIDI_HW_TRAINING_DIS_MASK },
+	{"CPU Fmax refclk select	  ", SAR_CPU_FMAX_REFCLK_OFFSET, SAR_CPU_FMAX_REFCLK_MASK },
+	{"IHB differential refclk disable ", SAR_IHB_DIFF_REFCLK_DIS_OFFSET, SAR_IHB_DIFF_REFCLK_DIS_MASK },
+	{"Ref clk mstr			  ", SAR_REF_CLK_MSTR_OFFSET, SAR_REF_CLK_MSTR_MASK },
+	{"CPU wake up			  ", SAR_CPU_WAKE_UP_OFFSET, SAR_CPU_WAKE_UP_MASK },
+	{"Xtal ByPass			  ", SAR_XTAL_BYPASS_OFFSET, SAR_XTAL_BYPASS_MASK },
+	{"PIDI low speed		  ", SAR_PIDI_LOW_SPEED_OFFSET, SAR_PIDI_LOW_SPEED_MASK },
 	{"",			-1,			-1},
 };
 
 struct sar_info ap806_sar_1[] = {
-	{"Standalone AP      ", SAR1_STANDALONE_OFFSET, SAR1_STANDALONE_MASK},
+	{"PIDI connect       ", SAR1_PIDI_CONNECT_OFFSET, SAR1_PIDI_CONNECT_MASK },
 	{"PLL0 Config        ", SAR1_PLL0_OFFSET, SAR1_PLL0_MASK },
 	{"PLL1 Config        ", SAR1_PLL1_OFFSET, SAR1_PLL1_MASK },
 	{"PLL2 Config        ", SAR1_PLL2_OFFSET, SAR1_PLL2_MASK },
 	{"",			-1,			-1},
 };
 
+enum clocking_options {
+	CPU_2000_DDR_1200_RCLK_1200 = 0x0,
+	CPU_2000_DDR_1050_RCLK_1050 = 0x1,
+	CPU_1600_DDR_800_RCLK_800 = 0x4,
+	CPU_1800_DDR_1200_RCLK_1200 = 0x6,
+	CPU_1800_DDR_1050_RCLK_1050 = 0x7,
+	CPU_1600_DDR_900_RCLK_900 = 0x0b,
+	CPU_1600_DDR_1050_RCLK_1050 = 0x0d,
+	CPU_1600_DDR_900_RCLK_900_2 = 0x0e,
+	CPU_1000_DDR_650_RCLK_650 = 0x13,
+	CPU_1300_DDR_800_RCLK_800 = 0x14,
+	CPU_1300_DDR_650_RCLK_650 = 0x17,
+	CPU_1200_DDR_800_RCLK_800 = 0x19,
+	CPU_1400_DDR_800_RCLK_800 = 0x1a,
+	CPU_600_DDR_800_RCLK_800 = 0x1b,
+	CPU_800_DDR_800_RCLK_800 = 0x1c,
+	CPU_1000_DDR_800_RCLK_800 = 0x1d,
+};
+
 static void __iomem *__attribute__((section(".data")))sar_base;
 
-static u32 sar_get_pll_val(u32 index)
+static const u32 pll_freq_tbl[16][4] = {
+	/* CPU */   /* DDR */   /* Ring */
+	{2.0 * GHz, 1.2  * GHz, 1.2  * GHz, CPU_2000_DDR_1200_RCLK_1200},
+	{2.0 * GHz, 1.05 * GHz, 1.05 * GHz, CPU_2000_DDR_1050_RCLK_1050},
+	{1.8 * GHz, 1.2  * GHz, 1.2  * GHz, CPU_1800_DDR_1200_RCLK_1200},
+	{1.8 * GHz, 1.05 * GHz, 1.05 * GHz, CPU_1800_DDR_1050_RCLK_1050},
+	{1.6 * GHz, 1.05 * GHz, 1.05 * GHz, CPU_1600_DDR_1050_RCLK_1050},
+	{1.6 * GHz, 900  * MHz, 900  * MHz, CPU_1600_DDR_900_RCLK_900_2},
+	{1.3 * GHz, 800  * MHz, 800  * MHz, CPU_1300_DDR_800_RCLK_800},
+	{1.3 * GHz, 650  * MHz, 650  * MHz, CPU_1300_DDR_650_RCLK_650},
+	{1.6 * GHz, 800  * MHz, 800  * MHz, CPU_1600_DDR_800_RCLK_800},
+	{1.6 * GHz, 900  * MHz, 900  * MHz, CPU_1600_DDR_900_RCLK_900},
+	{1.0 * GHz, 650  * MHz, 650  * MHz, CPU_1000_DDR_650_RCLK_650},
+	{1.2 * GHz, 800  * MHz, 800  * MHz, CPU_1200_DDR_800_RCLK_800},
+	{1.4 * GHz, 800  * MHz, 800  * MHz, CPU_1400_DDR_800_RCLK_800},
+	{600 * MHz, 800  * MHz, 800  * MHz, CPU_600_DDR_800_RCLK_800},
+	{800 * MHz, 800  * MHz, 800  * MHz, CPU_800_DDR_800_RCLK_800},
+	{1.0 * GHz, 800  * MHz, 800  * MHz, CPU_1000_DDR_800_RCLK_800}
+};
+
+static u32 sar_get_clock_freq_mode(void)
 {
-	void __iomem *reg = sar_base + AP806_SAR_1_REG;
-
-	switch (index) {
-	case 0:
-		return (readl(reg) & SAR1_PLL0_MASK) >> SAR1_PLL0_OFFSET;
-	case 1:
-		return (readl(reg) & SAR1_PLL1_MASK) >> SAR1_PLL1_OFFSET;
-	case 2:
-		return (readl(reg) & SAR1_PLL2_MASK) >> SAR1_PLL2_OFFSET;
-	default:
-		error("sar regs: unsuported PLL index %d", index);
+	u32 i;
+	u32 clock_freq = (readl(sar_base) & SAR_CLOCK_FREQ_MODE_MASK) >> SAR_CLOCK_FREQ_MODE_OFFSET;
+
+	for (i = 0; i < 16; i++) {
+		if (pll_freq_tbl[i][3] == clock_freq)
+			return i;
 	}
 
+	error("sar regs: unsuported clock freq mode %d", clock_freq);
 	return -1;
 }
 
-
-static const u32 pll_freq_tbl[7][5] = {
-	/* DDR */   /* Ring */ /* CPU */ /* PIDI-AP */  /* PIDI-CP */
-	{1.2  * GHz, 2.0 * GHz, 2.5 * GHz, 2 * GHz,	2 * GHz},
-	{1.05 * GHz, 1.8 * GHz, 2.2 * GHz, 1 * GHz,	1 * GHz},
-	{900  * MHz, 1.6 * GHz, 2.0 * GHz, 1 * GHz,	1 * GHz},
-	{800  * MHz, 1.4 * GHz, 1.7 * GHz,    0,	   0},
-	{650  * MHz, 1.2 * GHz, 1.6 * GHz,    0,	   0},
-	{650  * MHz, 1.2 * GHz, 1.2 * GHz,    0,	   0},
-	{650  * MHz, 1.2 * GHz, 1.2 * GHz,    0,	   0}
-};
-
-
 int ap806_sar_value_get(enum mvebu_sar_opts sar_opt, struct sar_val *val)
 {
-	u32 pll_idx, pll_val;
+	u32 clock_type, clock_freq_mode;
 
 	switch (sar_opt) {
 	case(SAR_CPU_FREQ):
-		pll_idx = CPU_PLL_ID;
+		clock_type = CPU_CLOCK_ID;
 		break;
 	case(SAR_DDR_FREQ):
-		pll_idx = DDR_PLL_ID;
+		clock_type = DDR_CLOCK_ID;
 		break;
 	case(SAR_AP_FABRIC_FREQ):
-		pll_idx = RING_PLL_ID;
+		clock_type = RING_CLOCK_ID;
 		break;
 	default:
 		error("AP806-SAR: Unsupported SAR option %d.\n", sar_opt);
 		return -EINVAL;
 	}
-	pll_val = sar_get_pll_val(pll_idx);
-	val->raw_sar_val = pll_val;
-	val->freq = pll_freq_tbl[pll_val][pll_idx];
+	clock_freq_mode = sar_get_clock_freq_mode();
+	val->raw_sar_val = clock_freq_mode;
+	val->freq = pll_freq_tbl[clock_freq_mode][clock_type];
 	return 0;
 }
 
diff --git a/drivers/misc/mvebu_sar/ap806z_sar.c b/drivers/misc/mvebu_sar/ap806z_sar.c
new file mode 100644
index 0000000..494cee0
--- /dev/null
+++ b/drivers/misc/mvebu_sar/ap806z_sar.c
@@ -0,0 +1,207 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2015 Marvell International Ltd.
+ * ***************************************************************************
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * ***************************************************************************
+ */
+
+/* #define DEBUG */
+#include <common.h>
+#include <asm/io.h>
+#include <errno.h>
+#include <libfdt.h>
+#include <asm/arch-mvebu/fdt.h>
+#include <asm/arch-mvebu/clock.h>
+#include <mvebu_chip_sar.h>
+
+#include "chip_sar.h"
+
+#define DDR_PLL_ID	0
+#define RING_PLL_ID	1
+#define CPU_PLL_ID	2
+
+/* SAR AP806 registers */
+#define SAR_DUAL_AP_MODE_OFFSET		0
+#define SAR_DUAL_AP_MODE_MASK		(0x1 << SAR_DUAL_AP_MODE_OFFSET)
+#define SAR_I2C_INIT_EN_OFFSET		1
+#define SAR_I2C_INIT_EN_MASK		(0x1 << SAR_I2C_INIT_EN_OFFSET)
+#define SAR_BOOT_SRC_OFFSET		2
+#define SAR_BOOT_SRC_MASK		(0x3 << SAR_BOOT_SRC_OFFSET)
+#define SAR_C2C_IHB_OFFSET		4
+#define SAR_C2C_IHB_MASK		(0x1 << SAR_C2C_IHB_OFFSET)
+#define SAR_EFUSE_BYPASS_OFFSET		7
+#define SAR_EFUSE_BYPASS_MASK		(0x1 << SAR_EFUSE_BYPASS_OFFSET)
+#define SAR_STAND_ALONE_AP_MODE_OFFSET	8
+#define SAR_STAND_ALONE_AP_MODE_MASK	(0x1 << SAR_STAND_ALONE_AP_MODE_OFFSET)
+#define SAR_SLAVE_AP_MODE_OFFSET	9
+#define SAR_SLAVE_AP_MODE_MASK		(0x1 << SAR_SLAVE_AP_MODE_OFFSET)
+#define SAR_AVS_MASTER_OFFSET		11
+#define SAR_AVS_MASTER_MASK		(0x1 << SAR_AVS_MASTER_OFFSET)
+
+#define AP806_SAR_1_REG			4
+#define SAR1_PLL2_OFFSET		(15)
+#define SAR1_PLL2_MASK			(0x7 << SAR1_PLL2_OFFSET)
+#define SAR1_PLL1_OFFSET		(18)
+#define SAR1_PLL1_MASK			(0x7 << SAR1_PLL1_OFFSET)
+#define SAR1_PLL0_OFFSET		(21)
+#define SAR1_PLL0_MASK			(0x7 << SAR1_PLL0_OFFSET)
+#define SAR1_STANDALONE_OFFSET		(24)
+#define SAR1_STANDALONE_MASK		(1 << SAR1_STANDALONE_OFFSET)
+
+struct sar_info {
+	char *name;
+	u32 offset;
+	u32 mask;
+};
+
+struct sar_info ap806_sar_0[] = {
+	{"Dual AP mode       ", SAR_DUAL_AP_MODE_OFFSET, SAR_DUAL_AP_MODE_MASK },
+	{"I2C init Enable    ", SAR_I2C_INIT_EN_OFFSET, SAR_I2C_INIT_EN_MASK },
+	{"Boot Source        ", SAR_BOOT_SRC_OFFSET, SAR_BOOT_SRC_MASK },
+	{"C2C IHB select     ", SAR_C2C_IHB_OFFSET, SAR_C2C_IHB_MASK },
+	{"EFUSE ByPass       ", SAR_EFUSE_BYPASS_OFFSET, SAR_EFUSE_BYPASS_MASK },
+	{"Stand Alone AP mode", SAR_STAND_ALONE_AP_MODE_OFFSET, SAR_STAND_ALONE_AP_MODE_MASK},
+	{"Slave AP mode      ", SAR_SLAVE_AP_MODE_OFFSET, SAR_SLAVE_AP_MODE_MASK },
+	{"AVS master         ", SAR_AVS_MASTER_OFFSET, SAR_AVS_MASTER_MASK },
+	{"",			-1,			-1},
+};
+
+struct sar_info ap806_sar_1[] = {
+	{"Standalone AP      ", SAR1_STANDALONE_OFFSET, SAR1_STANDALONE_MASK},
+	{"PLL0 Config        ", SAR1_PLL0_OFFSET, SAR1_PLL0_MASK },
+	{"PLL1 Config        ", SAR1_PLL1_OFFSET, SAR1_PLL1_MASK },
+	{"PLL2 Config        ", SAR1_PLL2_OFFSET, SAR1_PLL2_MASK },
+	{"",			-1,			-1},
+};
+
+static void __iomem *__attribute__((section(".data")))sar_base;
+
+static u32 sar_get_pll_val(u32 index)
+{
+	void __iomem *reg = sar_base + AP806_SAR_1_REG;
+
+	switch (index) {
+	case 0:
+		return (readl(reg) & SAR1_PLL0_MASK) >> SAR1_PLL0_OFFSET;
+	case 1:
+		return (readl(reg) & SAR1_PLL1_MASK) >> SAR1_PLL1_OFFSET;
+	case 2:
+		return (readl(reg) & SAR1_PLL2_MASK) >> SAR1_PLL2_OFFSET;
+	default:
+		error("sar regs: unsuported PLL index %d", index);
+	}
+
+	return -1;
+}
+
+
+static const u32 pll_freq_tbl[7][5] = {
+	/* DDR */   /* Ring */ /* CPU */ /* PIDI-AP */  /* PIDI-CP */
+	{1.2  * GHz, 2.0 * GHz, 2.5 * GHz, 2 * GHz,	2 * GHz},
+	{1.05 * GHz, 1.8 * GHz, 2.2 * GHz, 1 * GHz,	1 * GHz},
+	{900  * MHz, 1.6 * GHz, 2.0 * GHz, 1 * GHz,	1 * GHz},
+	{800  * MHz, 1.4 * GHz, 1.7 * GHz,    0,	   0},
+	{650  * MHz, 1.2 * GHz, 1.6 * GHz,    0,	   0},
+	{650  * MHz, 1.2 * GHz, 1.2 * GHz,    0,	   0},
+	{650  * MHz, 1.2 * GHz, 1.2 * GHz,    0,	   0}
+};
+
+
+int ap806_sar_value_get(enum mvebu_sar_opts sar_opt, struct sar_val *val)
+{
+	u32 pll_idx, pll_val;
+
+	switch (sar_opt) {
+	case(SAR_CPU_FREQ):
+		pll_idx = CPU_PLL_ID;
+		break;
+	case(SAR_DDR_FREQ):
+		pll_idx = DDR_PLL_ID;
+		break;
+	case(SAR_AP_FABRIC_FREQ):
+		pll_idx = RING_PLL_ID;
+		break;
+	default:
+		error("AP806-SAR: Unsupported SAR option %d.\n", sar_opt);
+		return -EINVAL;
+	}
+	pll_val = sar_get_pll_val(pll_idx);
+	val->raw_sar_val = pll_val;
+	val->freq = pll_freq_tbl[pll_val][pll_idx];
+	return 0;
+}
+
+static int ap806_sar_dump(void)
+{
+	u32 reg, val;
+	struct sar_info *sar;
+
+	reg = readl(sar_base);
+	printf("AP806 SAR register 0 [0x%08x]:\n", reg);
+	printf("----------------------------------\n");
+	sar = ap806_sar_0;
+	while (sar->offset != -1) {
+		val = (reg & sar->mask) >> sar->offset;
+		printf("%s  0x%x\n", sar->name, val);
+		sar++;
+	}
+
+	reg = readl(sar_base + AP806_SAR_1_REG);
+	printf("\nAP806 SAR register 1 [0x%08x]:\n", reg);
+	printf("----------------------------------\n");
+	sar = ap806_sar_1;
+	while (sar->offset != -1) {
+		val = (reg & sar->mask) >> sar->offset;
+		printf("%s  0x%x\n", sar->name, val);
+		sar++;
+	}
+	return 0;
+}
+
+
+
+int ap806_sar_init(const void *blob, int node)
+{
+	uintptr_t chip_id;
+	int ret, i;
+	struct sar_chip_info info;
+
+	u32 sar_list[] = {
+		SAR_CPU_FREQ,
+		SAR_DDR_FREQ,
+		SAR_AP_FABRIC_FREQ
+	};
+
+	sar_base = fdt_get_regs_offs(blob, node, "reg");
+
+	info.sar_dump_func = ap806_sar_dump;
+	info.sar_value_get_func = ap806_sar_value_get;
+
+	ret = mvebu_sar_chip_register(COMPAT_MVEBU_SAR_REG_AP806, &info, &chip_id);
+	if (ret) {
+		error("Failed to register AP806 SAR functions.\n");
+		return ret;
+	}
+
+	for (i = 0; i < ARRAY_SIZE(sar_list); i++) {
+		ret = mvebu_sar_id_register(chip_id, sar_list[i]);
+		if (ret) {
+			error("Failed to register SAR %d, for AP806.\n", sar_list[i]);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
-- 
1.9.1

