From 79d6f4f5aaec167c046fcba3e146f770be70be85 Mon Sep 17 00:00:00 2001
From: Nizan Zorea <nzorea@marvell.com>
Date: Sun, 13 Mar 2016 10:03:19 +0200
Subject: [PATCH 1024/1240] fdt_config: mvebu: improve fdt_config usage to be
 clear and intuitive

 - remove "fdt on/off" command, which indicate to read fdt froem EEPROM or not.
 - add in "fdt_config list" an index-option 0, which indicate if fdt in EEPROM is exist.
 - combine the two commands "fdt_config read eeprom" and "fdt_config read flash <x>" with
   a single command "fdt_config load <x>". this command load fdt from the list, therefoe to
   load fdt from EEPROM select index=0.
 - "fdt_config select" is carries out the whole fdt active selection process, and save it
   on EEPROM.
 - JIRA SYSTEMSW-2294

Change-Id: Icd65b7576dcb81bfc1d675af40e835b980bd6bc3
Signed-off-by: Nizan Zorea <nzorea@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/28183
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Haim Boot <hayim@marvell.com>
---
 board/mvebu/common/cfg_eeprom.c | 101 ++++++++++++++++----------
 board/mvebu/common/cfg_eeprom.h |   4 +-
 board/mvebu/common/fdt_config.c | 153 ++++++++++++++++++++++++++--------------
 board/mvebu/common/fdt_config.h |  12 ++--
 common/mvebu/cmd_fdt_config.c   |  50 ++++++-------
 common/mvebu/cmd_hw_info.c      |   6 +-
 6 files changed, 194 insertions(+), 132 deletions(-)

diff --git a/board/mvebu/common/cfg_eeprom.c b/board/mvebu/common/cfg_eeprom.c
index 127a29f..90d265e 100644
--- a/board/mvebu/common/cfg_eeprom.c
+++ b/board/mvebu/common/cfg_eeprom.c
@@ -15,16 +15,18 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  * ***************************************************************************
  */
+
 #include <common.h>
 #include <asm/arch-mvebu/soc.h>
 #include <fdtdec.h>
-#include <libfdt.h>
+#include <fdt_support.h>
 #include "cfg_eeprom.h"
 
 u8 mapping_default_fdt[] = DEFAULT_FDT_PER_BOARD;
 struct eeprom_struct board_config_val = CFG_DEFAULT_VALUE;
 struct board_config_struct *board_cfg = &(board_config_val.board_config);
 struct config_types_info config_types_info[] = MV_EEPROM_CONFIG_INFO;
+uint8_t fdt_blob_temp[MVEBU_FDT_SIZE];
 int eeprom_initialized = -1;
 int g_board_id = -1;
 
@@ -82,18 +84,17 @@ static bool cfg_eeprom_get_config_type(enum mv_config_type_id config_class, stru
 #ifdef CONFIG_TARGET_ARMADA_8K
 int cfg_eeprom_zip_and_unzip(unsigned long size, void *source_fdt, bool zip_flag)
 {
-	uint8_t file_buffer[MVEBU_FDT_SIZE];
 	unsigned long new_size = ~0UL;
 
 	if (zip_flag) {
 		/* compress fdt */
-		if (gzip((void *)file_buffer, &new_size, source_fdt, size) != 0) {
+		if (gzip((void *)fdt_blob_temp, &new_size, source_fdt, size) != 0) {
 			error("Could not compress device tree file\n");
 			return -1;
 		}
 	} else {
 		/* decompress fdt */
-		if (gunzip((void *)file_buffer, size, source_fdt, &new_size) != 0) {
+		if (gunzip((void *)fdt_blob_temp, size, source_fdt, &new_size) != 0) {
 			error("Could not decompress device tree file\n");
 			return -1;
 		}
@@ -104,7 +105,7 @@ int cfg_eeprom_zip_and_unzip(unsigned long size, void *source_fdt, bool zip_flag
 	}
 	debug("The new size of the fdt = %lu\n", new_size);
 	/* copy the compressed/decompressed file back to the source fdt */
-	memcpy(source_fdt, (void *)file_buffer, new_size);
+	memcpy(source_fdt, (void *)fdt_blob_temp, new_size);
 
 	return new_size;
 }
@@ -141,60 +142,68 @@ int cfg_eeprom_unzip_fdt(unsigned long size, void *source_fdt)
 bool cfg_eeprom_upload_fdt_from_flash(u8 fdt_config_id)
 {
 	int i;
-	void *fdt_blob_temp = __dtb_dt_begin;
+	void *fdt_blob = __dtb_dt_begin;
 
 	debug("FDT config id = %x\n", fdt_config_id);
-	for (i = 0; fdt_check_header(fdt_blob_temp) == 0; i++) {
-		if ((u8)fdtdec_get_int(fdt_blob_temp, 0, "fdt_config_id", -1) == fdt_config_id &&
-		    (u8)fdtdec_get_int(fdt_blob_temp, 0, "board_id", -1) == cfg_eeprom_get_board_id()) {
-			memcpy((void *)board_config_val.fdt_blob, fdt_blob_temp, MVEBU_FDT_SIZE);
+	for (i = 0; fdt_check_header(fdt_blob) == 0; i++) {
+		if ((u8)fdtdec_get_int(fdt_blob, 0, "fdt_config_id", -1) == fdt_config_id &&
+		    (u8)fdtdec_get_int(fdt_blob, 0, "board_id", -1) == cfg_eeprom_get_board_id()) {
+			memcpy((void *)board_config_val.fdt_blob, fdt_blob, MVEBU_FDT_SIZE);
 			return true;
 		}
-		fdt_blob_temp += MVEBU_FDT_SIZE;
+		fdt_blob += MVEBU_FDT_SIZE;
 	}
 	return false;
 }
 
 /* cfg_eeprom_upload_fdt_from_eeprom - write FDT from EEPROM to local struct */
-bool cfg_eeprom_upload_fdt_from_eeprom(void)
+bool cfg_eeprom_upload_fdt_from_eeprom(uint8_t *fdt_blob)
 {
 	struct config_types_info config_info;
-	uint8_t fdt_blob_temp[MVEBU_FDT_SIZE];
 	unsigned long decompressed_size;
+	u32 fdt_blob_size = board_config_val.length - EEPROM_STRUCT_SIZE;
 
 	/* read the compressed file from EEPROM to buffer */
-	if (!cfg_eeprom_get_config_type(MV_CONFIG_FDT_FILE, &config_info))
-		error("Could not find MV_CONFIG_FDT_FILE\n");
-	printf("Read FDT from EEPROM, please wait.\n");
-	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
-		 fdt_blob_temp, board_config_val.length - EEPROM_STRUCT_SIZE);
+	if (fdt_blob_size) {
+		if (!cfg_eeprom_get_config_type(MV_CONFIG_FDT_FILE, &config_info))
+			error("Could not find MV_CONFIG_FDT_FILE\n");
+		i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
+			 fdt_blob_temp, fdt_blob_size);
 
-	/* decompress fdt */
-	decompressed_size = cfg_eeprom_unzip_fdt(MVEBU_FDT_SIZE, (void *)fdt_blob_temp);
+		/* decompress fdt */
+		decompressed_size = cfg_eeprom_unzip_fdt(MVEBU_FDT_SIZE, (void *)fdt_blob_temp);
 
-	if (decompressed_size == -1)
-		return false;
+		if (decompressed_size == -1)
+			return false;
 
-	/* if didn't find FDT in EEPROM */
-	if (fdt_check_header((void *)fdt_blob_temp) != 0) {
-		printf("FDT in EEPROM is invalid and didn't loaded to RAM\n");
+		/* if didn't find FDT in EEPROM */
+		if (fdt_check_header((void *)fdt_blob_temp) != 0) {
+			debug("FDT in EEPROM is invalid and didn't loaded to RAM\n");
+			return false;
+		}
+		memcpy((void *)fdt_blob, fdt_blob_temp, MVEBU_FDT_SIZE);
+	} else {
+		debug("FDT in EEPROM is invalid and didn't loaded to RAM\n");
 		return false;
 	}
-	memcpy((void *)board_config_val.fdt_blob, fdt_blob_temp, MVEBU_FDT_SIZE);
-	printf("Loaded FDT from EEPROM successfully\n");
-	printf("To save the changes, please run the command fdt_config save.\n");
-
 	return true;
 }
 
 /* cfg_eeprom_write_to_eeprom - write the local struct to EEPROM */
-void cfg_eeprom_write_to_eeprom(int length)
+void cfg_eeprom_write_to_eeprom(int length, bool write_fdt)
 {
 	int reserve_length, size_of_loop, i;
 
 	/* calculate checksum and save it in struct */
-	board_config_val.checksum = cfg_eeprom_checksum8((uint8_t *)&board_config_val.pattern,
-							 (uint32_t)length - 4);
+	if (write_fdt)
+		/* if fdt from EEPROM is enable, the checksum calculation includes fdt blob */
+		board_config_val.checksum = cfg_eeprom_checksum8((uint8_t *)&board_config_val.pattern,
+								 (uint32_t)board_config_val.length - 4);
+	else
+		/* if fdt from EEPROM is disable, the calculation of the checksum will be without the fdt blob */
+		board_config_val.checksum = cfg_eeprom_checksum8((uint8_t *)&board_config_val.pattern,
+								 (uint32_t)EEPROM_STRUCT_SIZE - 4);
+
 
 	/* write fdt struct to EEPROM */
 	size_of_loop = length / I2C_PAGE_WRITE_SIZE;
@@ -212,13 +221,20 @@ void cfg_eeprom_write_to_eeprom(int length)
 }
 
 /* cfg_eeprom_save - write the local struct to EEPROM */
-void cfg_eeprom_save(void)
+void cfg_eeprom_save(uint8_t *fdt_blob, int write_forced_fdt)
 {
 	unsigned long compressed_size;
 	unsigned long decompressed_size;
 
-	/* if fdt_config is enable, write also fdt to EEPROM */
-	if (board_config_val.board_config.fdt_cfg_en == 1) {
+	/* if fdt_config is enable write also fdt to EEPROM
+	   or if fdt_config in disable but we want to force write of FDT without selecting the customized FDT */
+	if (board_config_val.board_config.fdt_cfg_en == 1 || write_forced_fdt) {
+		/* back up the fdt that is in the local struct, and restore it at the end of this function */
+		if (fdt_blob != board_config_val.fdt_blob) {
+			memcpy((void *)fdt_blob_temp, (void *)board_config_val.fdt_blob, MVEBU_FDT_SIZE);
+			memcpy((void *)board_config_val.fdt_blob, (void *)fdt_blob, MVEBU_FDT_SIZE);
+		}
+
 		/* compress fdt */
 		compressed_size = cfg_eeprom_zip_fdt(MVEBU_FDT_SIZE, (void *)board_config_val.fdt_blob);
 
@@ -230,7 +246,10 @@ void cfg_eeprom_save(void)
 		debug("size of struct + fdt compressed = %d\n", board_config_val.length);
 
 		/* write local struct with fdt blob to EEPROM */
-		cfg_eeprom_write_to_eeprom(board_config_val.length);
+		if (board_config_val.board_config.fdt_cfg_en == 1)
+			cfg_eeprom_write_to_eeprom(board_config_val.length, true);
+		else
+			cfg_eeprom_write_to_eeprom(board_config_val.length, false);
 
 		/* decompress fdt - After saving the fdt, the compressed file is in the struct,
 		   therefore need to return to the state before saving the FDT. to let the user
@@ -239,9 +258,16 @@ void cfg_eeprom_save(void)
 
 		if (decompressed_size == -1)
 			return;
+
+		/* restore the fdt from local struct after it was written*/
+		if (fdt_blob != board_config_val.fdt_blob) {
+			memcpy((void *)fdt_blob, (void *)board_config_val.fdt_blob, MVEBU_FDT_SIZE);
+			memcpy((void *)board_config_val.fdt_blob, (void *)fdt_blob_temp, MVEBU_FDT_SIZE);
+		}
+
 	} else {
 		/* write local struct with fdt blob to EEPROM */
-		cfg_eeprom_write_to_eeprom(EEPROM_STRUCT_SIZE);
+		cfg_eeprom_write_to_eeprom(EEPROM_STRUCT_SIZE, false);
 	}
 	/* reset g_board_id so it will get board ID from EEPROM again */
 	g_board_id = -1;
@@ -494,7 +520,6 @@ int cfg_eeprom_init(void)
 		error("Could not find MV_CONFIG_VERIFICATION_PATTERN\n");
 		return -1;
 	}
-
 	i2c_read(BOARD_DEV_TWSI_INIT_EEPROM, config_info.byte_num, MULTI_FDT_EEPROM_ADDR_LEN,
 		 (uint8_t *)&eeprom_buffer.pattern, config_info.byte_cnt);
 
diff --git a/board/mvebu/common/cfg_eeprom.h b/board/mvebu/common/cfg_eeprom.h
index 343a5d9..17e0e77 100644
--- a/board/mvebu/common/cfg_eeprom.h
+++ b/board/mvebu/common/cfg_eeprom.h
@@ -122,8 +122,8 @@ struct hw_info_data_struct {
 
 bool cfg_eeprom_fdt_config_is_enable(void);
 bool cfg_eeprom_upload_fdt_from_flash(u8 fdt_config_id);
-bool cfg_eeprom_upload_fdt_from_eeprom(void);
-void cfg_eeprom_save(void);
+bool cfg_eeprom_upload_fdt_from_eeprom(uint8_t *fdt_blob);
+void cfg_eeprom_save(uint8_t *fdt_blob, int with_fdt_blob);
 struct eeprom_struct *cfg_eeprom_get_board_config(void);
 void cfg_eeprom_get_hw_info_str(uchar *hw_info_str);
 void cfg_eeprom_set_hw_info_str(uchar *hw_info_str);
diff --git a/board/mvebu/common/fdt_config.c b/board/mvebu/common/fdt_config.c
index be1f4ab..661bcfb 100644
--- a/board/mvebu/common/fdt_config.c
+++ b/board/mvebu/common/fdt_config.c
@@ -36,26 +36,37 @@ static struct fdt_configs_details fdt_list_of_configs[MV_MAX_FDT_CONFIGURATION];
 /* fdt_create_list - create the list of fdt configs */
 int fdt_create_list(void)
 {
-	int i, fdt_config_id;
+	int fdt_config_id;
 	char *fdt_model;
 	void *fdt_blob_temp = __dtb_dt_begin;
-
-	fdt_list_size = 0;
-	for (i = 0; fdt_check_header(fdt_blob_temp) == 0; i++) {
+	uint8_t fdt_blob[MVEBU_FDT_SIZE];
+
+	fdt_list_size = 1;
+
+	/* first index (0) will always be dedicated for the customized FDT from EEPROM.
+	   if there is a valid FDT in EEPROM the index will stay zero, but if not the index will equal to -1 */
+	if (cfg_eeprom_upload_fdt_from_eeprom(fdt_blob)) {
+		strcpy(fdt_list_of_configs[fdt_list_size - 1].fdt_model, "(EEPROM) custom FDT available");
+		fdt_list_of_configs[fdt_list_size - 1].fdt_config_id = 0;
+	} else {
+		strcpy(fdt_list_of_configs[fdt_list_size - 1].fdt_model, "(EPPROM) not available");
+		fdt_list_of_configs[fdt_list_size - 1].fdt_config_id = -1;
+	}
+	while (fdt_check_header(fdt_blob_temp) == 0) {
 		if ((u8)fdtdec_get_int(fdt_blob_temp, 0, "board_id", -1) == cfg_eeprom_get_board_id()) {
-			fdt_list_size++;
 			fdt_model = (char *)fdt_getprop(fdt_blob_temp, 0, "model", NULL);
 			fdt_config_id = fdtdec_get_int(fdt_blob_temp, 0, "fdt_config_id", -1);
-			strcpy(fdt_list_of_configs[fdt_list_size - 1].fdt_model, fdt_model);
-			fdt_list_of_configs[fdt_list_size - 1].fdt_config_id = fdt_config_id;
+			strcpy(fdt_list_of_configs[fdt_list_size].fdt_model, fdt_model);
+			fdt_list_of_configs[fdt_list_size].fdt_config_id = fdt_config_id;
+			fdt_list_size++;
 		}
 		fdt_blob_temp += MVEBU_FDT_SIZE;
 	}
 	return 0;
 }
 
-/* fdt_select_print - print active FDT selection */
-void fdt_select_print(void)
+/* fdt_cfg_print_select - print active FDT selection */
+void fdt_cfg_print_select(void)
 {
 	int i;
 	struct eeprom_struct *p_board_config;
@@ -70,15 +81,15 @@ void fdt_select_print(void)
 			return;
 		}
 	}
-
 	return;
 }
 
-/* fdt_select_set - update active_fdt_selection field */
-int fdt_select_set(const char *selected_index)
+/* fdt_cfg_set_select - update active_fdt_selection field */
+int fdt_cfg_set_select(const char *selected_index)
 {
-	int i, index_int;
+	int i, index_int, index_exist = 0;
 	struct eeprom_struct *p_board_config;
+	uint8_t fdt_blob[MVEBU_FDT_SIZE];
 
 	if (fdt_list_size == -1) {
 		fdt_create_list();
@@ -86,58 +97,88 @@ int fdt_select_set(const char *selected_index)
 
 	index_int = (int)simple_strtoul(selected_index, NULL, 16);
 	p_board_config = cfg_eeprom_get_board_config();
+
+	/* search selected index in the list, and if index found set it as the active FDT selection */
 	for (i = 0; i < fdt_list_size ; i++) {
 		if (index_int == fdt_list_of_configs[i].fdt_config_id) {
 			p_board_config->board_config.active_fdt_selection = fdt_list_of_configs[i].fdt_config_id;
-			printf("To save the changes, please run the command fdt_config save.\n");
-			return 0;
+			index_exist = 1;
 		}
 	}
-
-	printf("Index is not exist\n");
-	return 1;
+	if (index_exist) {
+		if (index_int == 0) {
+			/* user select to boot FDT from EEPROM */
+			p_board_config->board_config.fdt_cfg_en = 1;
+			printf("Read FDT from EEPROM, please wait\n");
+			/* load FDT from EEPROM to a temporary file and not to the local struct is done in order to
+			   calculate checksum, without an influence on the current fdt that exists in local struct */
+			cfg_eeprom_upload_fdt_from_eeprom(fdt_blob);
+			cfg_eeprom_save(fdt_blob, 0);
+		} else {
+			/* user select to boot from preset FDT */
+			p_board_config->board_config.fdt_cfg_en = 0;
+			cfg_eeprom_save(p_board_config->fdt_blob, 0);
+		}
+		return 0;
+	/* index does not exist at the list */
+	} else if (index_int == 0) {
+			/* user select customized FDT from EEPROM although it is not available */
+			printf("(EPPROM) custom FDT is not available\n");
+	} else {
+			printf("Index is not exist\n");
+	}
+		return 1;
 }
 
-/* fdt_select_list - print list of all fdt_config_id that compatible to the boardID */
-int fdt_select_list(void)
+/* fdt_cfg_list - print list of all fdt_config_id that compatible to the boardID */
+int fdt_cfg_list(void)
 {
+	struct eeprom_struct *p_board_config;
 	int i;
 
 	if (fdt_list_size == -1)
 		fdt_create_list();
 
 	printf("FDT config list:\n");
-	for (i = 0; i < fdt_list_size; i++)
-		printf("\t%d - %s\n", fdt_list_of_configs[i].fdt_config_id, fdt_list_of_configs[i].fdt_model);
+	p_board_config = cfg_eeprom_get_board_config();
+	for (i = 0; i < fdt_list_size; i++) {
+		if (i == 0)
+			printf("\t0 - %s  ", fdt_list_of_configs[0].fdt_model);
+		else
+			printf("\t%d - %s  ", fdt_list_of_configs[i].fdt_config_id, fdt_list_of_configs[i].fdt_model);
+		if (p_board_config->board_config.active_fdt_selection == fdt_list_of_configs[i].fdt_config_id)
+			printf("[*]\n");
+		else
+			printf("\n");
+	}
 
 	return 0;
 }
 
 /* fdt_cfg_read_eeprom - write FDT from EEPROM to local struct and set 'fdt addr' environment variable */
-void fdt_cfg_read_eeprom(void)
+static void fdt_cfg_read_eeprom(void)
 {
 	struct eeprom_struct *p_board_config;
 
 	p_board_config = cfg_eeprom_get_board_config();
-	if (cfg_eeprom_upload_fdt_from_eeprom())
+	printf("Read FDT from EEPROM, please wait\n");
+	if (cfg_eeprom_upload_fdt_from_eeprom(p_board_config->fdt_blob)) {
 		set_working_fdt_addr(p_board_config->fdt_blob);
+		printf("Loaded FDT from EEPROM successfully\n");
+		printf("To save the changes, please run the command fdt_config save.\n");
+	}
 }
 
 /* fdt_cfg_read_flash - write the required FDT to local struct, if found fdt config id in the list.
    else return without writing anything*/
-int fdt_cfg_read_flash(const char *selected_index)
+static int fdt_cfg_read_flash(int selected_index)
 {
-	int i, index_int;
+	int i;
 	struct eeprom_struct *p_board_config;
 
-	if (fdt_list_size == -1) {
-		fdt_create_list();
-	}
-
-	index_int = (int)simple_strtoul(selected_index, NULL, 16);
 	p_board_config = cfg_eeprom_get_board_config();
 	for (i = 0; i < fdt_list_size ; i++) {
-		if (index_int == fdt_list_of_configs[i].fdt_config_id) {
+		if (selected_index == fdt_list_of_configs[i].fdt_config_id) {
 			cfg_eeprom_upload_fdt_from_flash(fdt_list_of_configs[i].fdt_config_id);
 			set_working_fdt_addr(p_board_config->fdt_blob);
 			printf("To save the changes, please run the command fdt_config save.\n");
@@ -148,34 +189,38 @@ int fdt_cfg_read_flash(const char *selected_index)
 	return 1;
 }
 
-/* fdt_cfg_on - enable read FDT from EEPROM */
-int fdt_cfg_on(void)
+/* fdt_cfg_load - load FDT to local struct */
+int fdt_cfg_load(const char *selected_index)
 {
-	struct eeprom_struct *p_board_config;
+	int index_int;
 
-	p_board_config = cfg_eeprom_get_board_config();
-	if (cfg_eeprom_fdt_config_is_enable() == false) {
-		p_board_config->board_config.fdt_cfg_en = 1;
-	}
-	printf("Do you want to read FDT from EEPROM? <y/N> ");
-	if (confirm_yesno()) {
-		if (!cfg_eeprom_upload_fdt_from_eeprom())
+	if (fdt_list_size == -1)
+		fdt_create_list();
+
+	index_int = (int)simple_strtoul(selected_index, NULL, 16);
+
+	/* load fdt from EEPROM */
+	if (index_int == 0) {
+		/* if FDT in EEPROM is available */
+		if (fdt_list_of_configs[0].fdt_config_id == 0) {
+			fdt_cfg_read_eeprom();
+			return 0;
+		} else {
+			printf("(EPPROM) custom FDT is not available\n");
 			return 1;
-	} else
-		printf("To save the changes, please run the command fdt_config save.\n");
+		}
+	}
+	/* load FDT from flash */
+	if (fdt_cfg_read_flash(index_int))
+		return 1;
 	return 0;
 }
 
-/* fdt_cfg_off - disable read FDT from EEPROM */
-int fdt_cfg_off(void)
+/* fdt_cfg_save - save the current working FDT to EEPROM */
+int fdt_cfg_save(uint8_t *fdt_blob)
 {
-	struct eeprom_struct *p_board_config;
-
-	p_board_config = cfg_eeprom_get_board_config();
-	if (cfg_eeprom_fdt_config_is_enable()) {
-		p_board_config->board_config.fdt_cfg_en = 0;
-	}
-	printf("config fdt is now disable\n");
-	printf("To save the changes, please run the command fdt_config save.\n");
+	cfg_eeprom_save(fdt_blob, 1);
+	fdt_list_size = -1;
+	printf("FDT is saved in EEPROM, to boot from customized FDT please select it from list\n");
 	return 0;
 }
diff --git a/board/mvebu/common/fdt_config.h b/board/mvebu/common/fdt_config.h
index 2a83e15..f7e0034 100644
--- a/board/mvebu/common/fdt_config.h
+++ b/board/mvebu/common/fdt_config.h
@@ -19,12 +19,10 @@
 #define _FDT_CONFIG_H_
 #include "cfg_eeprom.h"
 
-void fdt_cfg_read_eeprom(void);
-int fdt_cfg_read_flash(const char *selected_index);
-int fdt_cfg_on(void);
-int fdt_cfg_off(void);
-int fdt_select_set(const char *selected_index);
-int fdt_select_list(void);
-void fdt_select_print(void);
+int fdt_cfg_load(const char *selected_index);
+void fdt_cfg_print_select(void);
+int fdt_cfg_set_select(const char *selected_index);
+int fdt_cfg_list(void);
+int fdt_cfg_save(uint8_t *fdt_blob);
 
 #endif
diff --git a/common/mvebu/cmd_fdt_config.c b/common/mvebu/cmd_fdt_config.c
index d8c6af7..bcbd858 100644
--- a/common/mvebu/cmd_fdt_config.c
+++ b/common/mvebu/cmd_fdt_config.c
@@ -21,6 +21,7 @@
 #include <command.h>
 #include <vsprintf.h>
 #include <errno.h>
+#include <asm/arch-mvebu/fdt.h>
 #include "../../board/mvebu/common/cfg_eeprom.h"
 #include "../../board/mvebu/common/fdt_config.h"
 
@@ -29,38 +30,29 @@ int do_fdt_config_cmd(cmd_tbl_t *cmdtp, int flag, int argc,
 {
 	const char *cmd = argv[1];
 	const char *fdt_option = NULL;
-	const char *fdt_model = NULL;
+	uint8_t *fdt_blob;
 
 	if (argc > 2)
 		fdt_option = argv[2];
 
-	if (argc > 3)
-		fdt_model = argv[3];
-
-	if (strcmp(cmd, "read") == 0) {
-		if (argc < 4 && (strcmp(fdt_option, "eeprom") == 0)) {
-			fdt_cfg_read_eeprom();
-		} else if (argc > 3 && (strcmp(fdt_option, "flash") == 0)) {
-			if (fdt_cfg_read_flash(fdt_model))
+	if (strcmp(cmd, "load") == 0) {
+		if (argc == 3) {
+			if (fdt_cfg_load(fdt_option))
 				return 1;
-		} else
+		} else {
 			return CMD_RET_USAGE;
+		}
 	} else if (strcmp(cmd, "save") == 0) {
-		cfg_eeprom_save();
-	} else if (strcmp(cmd, "on") == 0) {
-		if (fdt_cfg_on())
-			return 1;
-	} else if (strcmp(cmd, "off") == 0) {
-		if (fdt_cfg_off())
-			return 1;
+		fdt_blob = cfg_eeprom_get_fdt();
+		fdt_cfg_save(fdt_blob);
 	} else if (strcmp(cmd, "select") == 0) {
 		if (argc < 3) {
-			fdt_select_print();
-		} else if (fdt_select_set(fdt_option)) {
-				return 1;
-			}
+			fdt_cfg_print_select();
+		} else if (fdt_cfg_set_select(fdt_option)) {
+			return 1;
+		}
 	} else if (strcmp(cmd, "list") == 0) {
-		if (fdt_select_list())
+		if (fdt_cfg_list())
 			return 1;
 	} else {
 		return CMD_RET_USAGE;
@@ -71,15 +63,13 @@ int do_fdt_config_cmd(cmd_tbl_t *cmdtp, int flag, int argc,
 
 U_BOOT_CMD(
 	fdt_config,    6,     1,      do_fdt_config_cmd,
-	"Modify SOC and board configuration\n",
+	"Modify SOC and board FDT configuration\n",
 	"\n"
 	"Modify SOC and board configuration\n"
-	"\tread eeprom	  - Read FDT from EEPROM and save to DRAM\n"
-	"\tread flash <x> - Read x FDT from U-Boot and save to DRAM\n"
+	"\tlist		  - List the available FDT: preset and customized FDT on EEPROM (if exist)\n"
+	"\tselect [x]	  - Select active FDT to boot from\n\n"
+
+	"To create modified FDT on EEPROM, use the following\n"
+	"\tload <x>	  - Load FDT <x> to DRAM (loaded to fdt_addr env. variable)\n"
 	"\tsave		  - Save FDT in EEPROM\n"
-	"\toff		  - Disable the feature of loading the FDT that saved in EEPROM\n"
-	"\ton		  - Enable the feature of loading the FDT that saved in EEPROM\n"
-	"\tlist		  - Show the options of the board\n"
-	"\tselect	  - Print active FDT selection\n"
-	"\tselect <x>	  - Update active FDT selection\n"
 );
diff --git a/common/mvebu/cmd_hw_info.c b/common/mvebu/cmd_hw_info.c
index 77b6b23..795ff2d 100644
--- a/common/mvebu/cmd_hw_info.c
+++ b/common/mvebu/cmd_hw_info.c
@@ -20,6 +20,7 @@
 #include <common.h>
 #include <command.h>
 #include <errno.h>
+#include <asm/arch-mvebu/fdt.h>
 #include "../../board/mvebu/common/cfg_eeprom.h"
 
 /* load the HW configuration from cfg_eeprom module and dump them */
@@ -130,6 +131,7 @@ static int cmd_hw_info_store(char *name)
 	int hw_param_num;
 	uchar hw_info_str[MVEBU_HW_INFO_LEN];
 	struct hw_info_data_struct hw_info_data_arry[HW_INFO_MAX_PARAM_NUM];
+	uint8_t *fdt_blob;
 
 	printf("Are you sure you want to override factory settings in EEPROM? <y/N>");
 	if (!confirm_yesno())
@@ -190,7 +192,9 @@ static int cmd_hw_info_store(char *name)
 	}
 
 	cfg_eeprom_set_hw_info_str(hw_info_str);
-	cfg_eeprom_save();
+	/* save hw_info to EEPROM, and also the rest of the eeprom struct without changing it */
+	fdt_blob = cfg_eeprom_get_fdt();
+	cfg_eeprom_save(fdt_blob, 0);
 
 	printf("hw_info is saved to EEPROM\n");
 	cmd_hw_info_dump(name);
-- 
1.9.1

