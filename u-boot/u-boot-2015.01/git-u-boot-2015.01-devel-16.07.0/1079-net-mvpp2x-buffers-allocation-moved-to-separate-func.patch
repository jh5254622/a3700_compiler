From 4ca22c68b533c9f6b70bdeb995b1875dc51f4a64 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Tue, 3 May 2016 10:27:40 +0300
Subject: [PATCH 1079/1240] net: mvpp2x: buffers allocation moved to separate
 function

- created function mv_pp2x_buffer_allocation
- buffers allocation moved to mv_pp2x_buffer_allocation

Change-Id: I55b900957b1dc17368de37b32816773316f48e72
Reviewed-on: http://vgitil04.il.marvell.com:8080/29436
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Haim Boot <hayim@marvell.com>
---
 drivers/net/mv_pp2x.c | 70 +++++++++++++++++++++++++++++----------------------
 1 file changed, 40 insertions(+), 30 deletions(-)

diff --git a/drivers/net/mv_pp2x.c b/drivers/net/mv_pp2x.c
index 2c6d6ae..f968a6d 100644
--- a/drivers/net/mv_pp2x.c
+++ b/drivers/net/mv_pp2x.c
@@ -3745,12 +3745,40 @@ int mv_pp2x_dts_port_param_set(int port_node, struct mv_pp2x_dev_param *param)
 	return 0;
 }
 
+int mv_pp2x_buffer_allocation(void)
+{
+	void *bd_space;
+
+	/* Align buffer area for descs and rx_buffers to 1MiB */
+	bd_space = memalign(MVPP2_BUFFER_ALIGN_SIZE, BD_SPACE);
+
+	if (bd_space == NULL)
+		return 1;
+
+	buffer_loc.tx_descs = (struct mv_pp2x_tx_desc *)bd_space;
+
+	buffer_loc.aggr_tx_descs = (struct mv_pp2x_tx_desc *)
+			((unsigned long)bd_space + MVPP2_MAX_TXD
+			* sizeof(struct mv_pp2x_tx_desc));
+
+	buffer_loc.rx_descs = (struct mv_pp2x_rx_desc *)
+		((unsigned long)bd_space +
+		(MVPP2_MAX_TXD + MVPP2_AGGR_TXQ_SIZE)
+		* sizeof(struct mv_pp2x_tx_desc));
+
+	buffer_loc.rx_buffers = (unsigned long)
+		(bd_space + (MVPP2_MAX_TXD + MVPP2_AGGR_TXQ_SIZE)
+		* sizeof(struct mv_pp2x_tx_desc) +
+		MVPP2_MAX_RXD * sizeof(struct mv_pp2x_rx_desc));
+
+	return 0;
+}
+
 static int mv_pp2x_initialize_dev(bd_t *bis, struct mv_pp2x *pp2,
 						struct mv_pp2x_dev_param *param)
 {
 	struct eth_device *dev;
 	struct mv_pp2x_port *pp2_port;
-	void *bd_space;
 	char *enet_addr;
 	char enetvar[9];
 
@@ -3772,35 +3800,6 @@ static int mv_pp2x_initialize_dev(bd_t *bis, struct mv_pp2x *pp2,
 	pp2_port->mac_data.speed = param->phy_speed;
 	pp2_port->mac_data.force_link = param->force_link;
 
-	/*
-	 * Allocate buffer area for tx/rx descs and rx_buffers. This is only
-	 * done once for all interfaces. As only one interface can
-	 * be active. Make this area DMA save by disabling the D-cache
-	 */
-	if (!buffer_loc.tx_descs) {
-		/* Align buffer area for descs and rx_buffers to 1MiB */
-		bd_space = memalign(MVPP2_BUFFER_ALIGN_SIZE, BD_SPACE);
-
-		if (bd_space == NULL)
-			return -ENOMEM;
-
-		buffer_loc.tx_descs = (struct mv_pp2x_tx_desc *)bd_space;
-
-		buffer_loc.aggr_tx_descs = (struct mv_pp2x_tx_desc *)
-			((unsigned long)bd_space + MVPP2_MAX_TXD
-			* sizeof(struct mv_pp2x_tx_desc));
-
-		buffer_loc.rx_descs = (struct mv_pp2x_rx_desc *)
-			((unsigned long)bd_space +
-			(MVPP2_MAX_TXD + MVPP2_AGGR_TXQ_SIZE)
-			* sizeof(struct mv_pp2x_tx_desc));
-
-		buffer_loc.rx_buffers = (unsigned long)
-			(bd_space + (MVPP2_MAX_TXD + MVPP2_AGGR_TXQ_SIZE)
-			* sizeof(struct mv_pp2x_tx_desc) +
-			 MVPP2_MAX_RXD * sizeof(struct mv_pp2x_rx_desc));
-	}
-
 	/* interface name */
 	sprintf(dev->name, "egiga%d", pp2_port->id);
 	/* interface MAC addr extract */
@@ -3861,6 +3860,17 @@ int mv_pp2x_initialize(bd_t *bis)
 
 	node = mv_pp2x_node_list[pp2_count - 1];
 
+	/*
+	 * Allocate buffer area for tx/rx descs and rx_buffers. This is only
+	 * done once for all interfaces. As only one interface can
+	 * be active.
+	 */
+	if (!buffer_loc.tx_descs) {
+		err = mv_pp2x_buffer_allocation();
+		if (err)
+			return -ENOMEM;
+		}
+
 	/* set base addresses */
 	mv_pp2x_dts_base_address_set(pp2, node);
 
-- 
1.9.1

