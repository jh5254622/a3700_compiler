From ce1a73069e6df8697e291982da05e20543825143 Mon Sep 17 00:00:00 2001
From: Hanna Hawa <hannah@marvell.com>
Date: Sun, 8 May 2016 14:58:53 +0300
Subject: [PATCH 1092/1240] fix: a3700: move board spesific code to board file

- move board spesific code (IO-expander code) to board development file

Change-Id: I5227fb5ba51b07e8c2b87a492e772924ea9eb222
Signed-off-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/29598
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
Reviewed-by: Hua Jing <jinghua@marvell.com>
Reviewed-by: Haim Boot <hayim@marvell.com>
---
 arch/arm/cpu/armv8/armada3700/soc-init.c | 89 --------------------------------
 board/mvebu/armada3700/devel-board.c     | 85 ++++++++++++++++++++++++++++++
 2 files changed, 85 insertions(+), 89 deletions(-)

diff --git a/arch/arm/cpu/armv8/armada3700/soc-init.c b/arch/arm/cpu/armv8/armada3700/soc-init.c
index 49c79e9..157b3ee 100644
--- a/arch/arm/cpu/armv8/armada3700/soc-init.c
+++ b/arch/arm/cpu/armv8/armada3700/soc-init.c
@@ -27,18 +27,10 @@
 #include <asm/arch-mvebu/mbus.h>
 #include <asm/arch-mvebu/pinctl.h>
 #include <asm/arch-mvebu/fdt.h>
-#include <i2c.h>
 #include <libfdt.h>
 #include <asm/arch/boot_mode.h>
 #include <fdt_support.h>
 
-/* IO expander I2C device */
-#define I2C_IO_EXP_ADDR	0x22
-#define I2C_IO_CFG_REG_0	0x6
-#define I2C_IO_DATA_OUT_REG_0	0x2
-#define I2C_IO_REG_0_SATA_OFF	2
-#define I2C_IO_REG_0_USB_H_OFF	1
-
 /* NB warm reset */
 #define MVEBU_NB_WARM_RST_REG	(MVEBU_GPIO_NB_REG_BASE + 0x40)
 /* NB warm reset magic number, write it to MVEBU_GPIO_NB_RST_REG triggers warm reset */
@@ -165,87 +157,6 @@ void reset_cpu(ulong ignored)
 	writel(MVEBU_NB_WARM_RST_MAGIC_NUM, MVEBU_NB_WARM_RST_REG);
 }
 
-#ifdef CONFIG_SCSI_AHCI_PLAT
-void board_ahci_power_on(void)
-{
-/* This I2C IO expander configuration is board specific,
- * and adequate only to Marvell A3700 DB board
- */
-#ifdef CONFIG_DEVEL_BOARD
-	int ret;
-	unsigned char buffer[1];
-
-	/* Enable power of SATA by set IO expander via I2C,
-	 * to set corresponding bit to output mode to enable the power for SATA.
-	 */
-	ret = i2c_read(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char), buffer, sizeof(buffer));
-	if (ret)
-		error("failed to read IO expander value via I2C\n");
-
-	buffer[0] &= ~(1 << I2C_IO_REG_0_SATA_OFF);
-	ret = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char), buffer, sizeof(buffer));
-	if (ret)
-		error("failed to set IO expander via I2C\n");
-#endif /* CONFIG_DEVEL_BOARD */
-}
-#endif /* CONFIG_SCSI_AHCI_PLAT */
-
-#ifdef CONFIG_USB_XHCI
-/* Set USB VBUS signals (via I2C IO expander/GPIO) as output and set output value as enabled */
-void board_usb_vbus_init(void)
-{
-#ifdef CONFIG_DEVEL_BOARD
-/* This I2C IO expander configuration is board specific, only to Marvell A3700 DB board.
- * (I2C device at address 0x22, Register 0, BIT 1) */
-	int ret_read, ret_write;
-	unsigned char cfg_val[1], out_val[1];
-	const void *blob = gd->fdt_blob;
-
-	/* Make sure board is supported (currently only A3700-DB is supported) */
-	if (fdt_node_check_compatible(blob, 0, "marvell,armada-3700-db0") != 0) {
-		error("Missing USB VBUS power configuration for current board.\n");
-		return;
-	}
-
-	printf("Enable USB VBUS.\n");
-
-	/* initialize I2C */
-	init_func_i2c();
-
-	/* Read configuration (direction) and set VBUS pin as output (reset pin = output) */
-	ret_read = i2c_read(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char), cfg_val, sizeof(cfg_val));
-	cfg_val[0] &= ~(1 << I2C_IO_REG_0_USB_H_OFF);
-	ret_write = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char),
-			cfg_val, sizeof(cfg_val));
-	if (ret_read || ret_write)
-		error("failed to set USB VBUS configuration on I2C IO expander\n");
-
-	/* Read VBUS output value, and disable it */
-	ret_read = i2c_read(I2C_IO_EXP_ADDR, I2C_IO_DATA_OUT_REG_0, sizeof(unsigned char), out_val, sizeof(out_val));
-	out_val[0] &= ~(1 << I2C_IO_REG_0_USB_H_OFF);
-
-	ret_write = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_DATA_OUT_REG_0, sizeof(unsigned char), out_val, sizeof(out_val));
-	if (ret_read || ret_write)
-		error("failed to lower USB VBUS power on I2C IO expander\n");
-
-	/* required delay for configuration to settle - must wait for power on port is disabled
-	 * in case VBUS signal was high, required 3 seconds delay to let VBUS signal fully settle down */
-	udelay(3000000);
-
-	/* Enable VBUS power: Set output value of VBUS pin as enabled */
-	out_val[0] |= (1 << I2C_IO_REG_0_USB_H_OFF);
-
-	ret_write = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_DATA_OUT_REG_0, sizeof(unsigned char), out_val, sizeof(out_val));
-	if (ret_write)
-		error("failed to raise USB VBUS power on I2C IO expander\n");
-
-	udelay(500000); /* required delay to let output value settle up*/
-
-#endif /* CONFIG_DEVEL_BOARD */
-
-}
-#endif /* CONFIG_USB_XHCI */
-
 /************************************************************************
    Function:  mvebu_is_in_recovery_mode
 
diff --git a/board/mvebu/armada3700/devel-board.c b/board/mvebu/armada3700/devel-board.c
index acb1c68..92525e0 100644
--- a/board/mvebu/armada3700/devel-board.c
+++ b/board/mvebu/armada3700/devel-board.c
@@ -19,10 +19,95 @@
 /* #define DEBUG */
 
 #include <common.h>
+#include <i2c.h>
 #include <asm/arch-mvebu/soc.h>
 #include "../common/devel-board.h"
 #include "../common/sar.h"
 
+/* IO expander I2C device */
+#define I2C_IO_EXP_ADDR	0x22
+#define I2C_IO_CFG_REG_0	0x6
+#define I2C_IO_DATA_OUT_REG_0	0x2
+#define I2C_IO_REG_0_SATA_OFF	2
+#define I2C_IO_REG_0_USB_H_OFF	1
+
+#ifdef CONFIG_SCSI_AHCI_PLAT
+void board_ahci_power_on(void)
+{
+/* This I2C IO expander configuration is board specific,
+ * and adequate only to Marvell A3700 DB board
+ */
+	int ret;
+	unsigned char buffer[1];
+
+	/* Enable power of SATA by set IO expander via I2C,
+	 * to set corresponding bit to output mode to enable the power for SATA.
+	 */
+	ret = i2c_read(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char), buffer, sizeof(buffer));
+	if (ret)
+		error("failed to read IO expander value via I2C\n");
+
+	buffer[0] &= ~(1 << I2C_IO_REG_0_SATA_OFF);
+	ret = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char), buffer, sizeof(buffer));
+	if (ret)
+		error("failed to set IO expander via I2C\n");
+}
+#endif /* CONFIG_SCSI_AHCI_PLAT */
+
+#ifdef CONFIG_USB_XHCI
+/* Set USB VBUS signals (via I2C IO expander/GPIO) as output and set output value as enabled */
+void board_usb_vbus_init(void)
+{
+/* This I2C IO expander configuration is board specific, only to Marvell A3700 DB board.
+ * (I2C device at address 0x22, Register 0, BIT 1) */
+	int ret_read, ret_write;
+	unsigned char cfg_val[1], out_val[1];
+	const void *blob = gd->fdt_blob;
+
+	/* Make sure board is supported (currently only A3700-DB is supported) */
+	if (fdt_node_check_compatible(blob, 0, "marvell,armada-3700-db0") != 0) {
+		error("Missing USB VBUS power configuration for current board.\n");
+		return;
+	}
+
+	printf("Enable USB VBUS.\n");
+
+	/* initialize I2C */
+	init_func_i2c();
+
+	/* Read configuration (direction) and set VBUS pin as output (reset pin = output) */
+	ret_read = i2c_read(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char), cfg_val, sizeof(cfg_val));
+	cfg_val[0] &= ~(1 << I2C_IO_REG_0_USB_H_OFF);
+	ret_write = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_CFG_REG_0, sizeof(unsigned char),
+			cfg_val, sizeof(cfg_val));
+	if (ret_read || ret_write)
+		error("failed to set USB VBUS configuration on I2C IO expander\n");
+
+	/* Read VBUS output value, and disable it */
+	ret_read = i2c_read(I2C_IO_EXP_ADDR, I2C_IO_DATA_OUT_REG_0, sizeof(unsigned char), out_val, sizeof(out_val));
+	out_val[0] &= ~(1 << I2C_IO_REG_0_USB_H_OFF);
+
+	ret_write = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_DATA_OUT_REG_0, sizeof(unsigned char), out_val, sizeof(out_val));
+	if (ret_read || ret_write)
+		error("failed to lower USB VBUS power on I2C IO expander\n");
+
+	/* required delay for configuration to settle - must wait for power on port is disabled
+	 * in case VBUS signal was high, required 3 seconds delay to let VBUS signal fully settle down */
+	udelay(3000000);
+
+	/* Enable VBUS power: Set output value of VBUS pin as enabled */
+	out_val[0] |= (1 << I2C_IO_REG_0_USB_H_OFF);
+
+	ret_write = i2c_write(I2C_IO_EXP_ADDR, I2C_IO_DATA_OUT_REG_0, sizeof(unsigned char), out_val, sizeof(out_val));
+	if (ret_write)
+		error("failed to raise USB VBUS power on I2C IO expander\n");
+
+	udelay(500000); /* required delay to let output value settle up*/
+
+
+}
+#endif /* CONFIG_USB_XHCI */
+
 int mvebu_devel_board_init(void)
 {
 #ifdef CONFIG_MVEBU_SAR
-- 
1.9.1

