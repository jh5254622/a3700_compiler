From d19f5ae65667c9738895d7d79e00db20d0166e1f Mon Sep 17 00:00:00 2001
From: Konstantin Porotchkin <kostap@marvell.com>
Date: Mon, 2 May 2016 11:18:48 +0300
Subject: [PATCH 1143/1240] doc: a3700: Add trusted boot mode documentation

- Create a trusted (secure mode) boot document for A3700
- The A8K fields are TBD for now and should be added later.

Change-Id: I5da243a00754d384f74181706d5e9dd303b27d84
Signed-off-by: Konstantin Porotchkin <kostap@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/29426
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Gina Tadmore <gina@marvell.com>
---
 doc/mvebu/trusted_boot.txt | 143 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 143 insertions(+)
 create mode 100644 doc/mvebu/trusted_boot.txt

diff --git a/doc/mvebu/trusted_boot.txt b/doc/mvebu/trusted_boot.txt
new file mode 100644
index 0000000..c75b7ef
--- /dev/null
+++ b/doc/mvebu/trusted_boot.txt
@@ -0,0 +1,143 @@
+###########################
+Trusted (secure mode) Boot
+###########################
+
+The trusted boot setup requires configuration of several components:
+- eFuse module - Allows burning boot device, authentication key digest, encryption key, etc.
+- boot image format - Provides the trusted boot information to BootROM.
+
+=========
+1. eFuses
+=========
+The eFuse command module and driver provides RW access to SoC eFuses through the "efuse" command.
+In order to enable this SW component, the following configuration entry should be set:
+	CONFIG_MVEBU_EFUSE_SUPPORT=y
+The same parameter can be selected using "make menuconfig":
+-> Device Drivers
+	-> eFuse support
+		-> eFuse support
+The above configuration enables the eFuse driver and eFuse command module.
+Please refer to SoC and BootROM manuals for details about supported eFuses
+and their role in the trusted boot flow.
+Since the eFuse command module and driver are only used for simplified access
+to eFuse HW values, the presence of these components in the final trusted boot image
+is not required.
+
+/////////////
+A8K platforms
+/////////////
+
+TBD
+
+///////////////
+A3700 platforms
+///////////////
+
+Please note that on the A3700 platform the eFuses are not directly accessible by the application CPU.
+Therefore an appropriate WTMI module that provides the eFuse RW through the mailbox interface
+is required.
+The example WTMI code is located inside the "tools/wtp/wtmi" folder and allows RW access to all
+secure eFuses of A3700 SoC. Such full access is good for initial debugging, but for security
+reasons should block read access at least to the image encryption key on a real systems.
+
+====================
+2. Boot image format
+====================
+The boot image should be properly formatted for the trusted boot mode, so the BootROM extracts
+the required information from the image headers and uses it for authentication against eFuse
+values and digital signatures and for image decryption.
+Various platforms use different BootROMs and boot image formats. For a specific details please refer
+to the SoC functional specification, BootROM manual and to the section related to a selected platform below.
+In order to create boot image for the trusted boot mode, the following configuration parameter
+should be set:
+	CONFIG_MVEBU_SECURE_BOOT=y
+The same parameter can be selected using "make menuconfig":
+-> Support MVEBU devices
+	-> Marvell Platform
+		-> Trusted Boot Image format
+
+/////////////
+A8K platforms
+/////////////
+
+TBD
+
+///////////////
+A3700 platforms
+///////////////
+
+TIM/NTIM descriptors
+--------------------
+The A3700 image format is defined by a text file called TIM/TIMN descriptor.
+This descriptor defines boot image components, their locations on the boot device and in system memory,
+type of authentication (digital signature) to be used by BootROM in trusted boot mode and type
+of encryption algorithm in case the image should be encrypted.
+All details regarding the TIM/TIMN descriptor format are provided in the A3700 BootROM manual.
+The TIM/TIMN descriptor is created from multiple components located in the tools/wtp folders.
+The components for trusted boot mode are located in the "trusted" sub-folder and for non-trusted
+boot mode in the "untrusted" sub-folder.
+The final descriptors to be used with the TIM tool are crested using the Bash script "buildtim.sh" located
+in the "scripts" directory.
+The "keys" sub-folder contains test keys generated for building the sample trusted boot image.
+These keys are used for the creation of authentication keys TIM/TIMN components located in the "trusted" folder.
+The method used for new keys generation is described in the WTPTP tools manual and is out of scope of
+this document.
+When TIM/TIMN descriptors are processed by the TBB tool, a binary versions of TIM/TIMN headers are
+created. A special script "tim2img.pl", located in "scripts" folder is used for parsing the TIM/TIMN
+descriptors and building a single boot image from all binaries stated there suitable for usage with
+u-boot "bubt" command.
+
+Image Encryption
+----------------
+Since the WTPTP tools do not support image encryption, external tools should be used for
+encrypting image components. Please refer to the main Makefile for an example of image encryption
+using OpenSSL tools ("encrypt" recipe).
+The OpenSSL library is usually installed by default on a basic Linux system.
+In case the installation is missing, the following command will install it on the Ubuntu/Debian machine:
+# apt-get install openssl
+
+==================================
+3. Work order - target preparation
+==================================
+After the trusted boot mode is selected by SoC eFuse, the BootROM enforces security checks upon
+boot image load. Therefore a right work order is essential for target preparation and preventing
+the system from self-locking.
+
+/////////////
+A8K platforms
+/////////////
+
+TBD
+
+///////////////
+A3700 platforms
+///////////////
+
+1. Create an UNTRUSTED boot image with eFuse command module support (as stated in "eFuses" chapter above)
+   and burn it on target flash device using the regular "bubt" command.
+2. Create a TRUSTED boot image (as stated in "Boot image format" chapter above) and save it for later use.
+   When the trusted boot image is created, the the TBB tool saves the Key Authentication Key digest in file
+   named OtpHash.txt. This digest value will be used for eFuse programming so save this file.
+   The OtpHash.txt file lists the KAK digest in groups of 4-bytes values, organized in the following
+   order:
+       LSB
+       ...
+       ...
+       MSB
+   These values should be converted to a single 32-bytes value for eFuse burning:
+       MSB ... ... ... LSB.
+   For instance, the following OTP hash:
+       0x1887C298
+       0x59C9AFD9
+       0x6E814E34
+       0x25CD518B
+       0x3CDB7EED
+       0x33CC58B1
+       0x2C69997A
+       0xC27B7242
+   Will be used in the following form in eFuse KAK digest write command:
+       C27B72422C69997A33CC58B13CDB7EED25CD518B6E814E3459C9AFD91887C298
+3. Boot the target board with the UNTRUSTED boot image.
+4. Using the "efuse" command, program eFuse values as required, but do not reset the target board yet.
+5. Burn the TRUSTED boot image using regular "bubt" command.
+6. Reset the board and verify that the trusted boot mode works.
-- 
1.9.1

