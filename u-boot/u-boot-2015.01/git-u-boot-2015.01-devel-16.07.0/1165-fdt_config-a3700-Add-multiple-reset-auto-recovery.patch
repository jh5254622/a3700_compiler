From 586b8fdefba142414518f79fd8f3e1039552ba4a Mon Sep 17 00:00:00 2001
From: Terry Zhou <bjzhou@marvell.com>
Date: Mon, 23 May 2016 15:34:23 +0800
Subject: [PATCH 1165/1240] fdt_config: a3700: Add multiple reset
 auto-recovery.

- This feature detects unsuccessful boots, increments validation_counter
in eeprom(starting from 0) during early boot stages and reset it when
reaching u-boot prompt. And would use default fdt in u-boot image
instead of configuration data in eeprom, after 10 failure boots.
In such case if the system is broken, it is enough to press reset
button several times for going into recovery mode automatically.
- This feature only works when the board is not booting with bios mode.
Otherwise, the uart recovery hack will take effect.

Change-Id: Id2156285d317ddc042e28425d706d58599aabd7d
Signed-off-by: Terry Zhou <bjzhou@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/28176
Reviewed-by: Haim Boot <hayim@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
---
 arch/arm/cpu/armv8/armada3700/soc-init.c |  7 ++++
 arch/arm/include/asm/arch-mvebu/fdt.h    |  1 +
 board/mvebu/common/cfg_eeprom.c          | 66 ++++++++++++++++++++++++++++++--
 3 files changed, 70 insertions(+), 4 deletions(-)

diff --git a/arch/arm/cpu/armv8/armada3700/soc-init.c b/arch/arm/cpu/armv8/armada3700/soc-init.c
index 80d717f..0b91507 100644
--- a/arch/arm/cpu/armv8/armada3700/soc-init.c
+++ b/arch/arm/cpu/armv8/armada3700/soc-init.c
@@ -24,6 +24,7 @@
 #include <asm/arch-mvebu/comphy.h>
 #include <netdev.h>
 #include <asm/arch/mbus_reg.h>
+#include <asm/arch-mvebu/fdt.h>
 #include <asm/arch-mvebu/mbus.h>
 #include <asm/arch-mvebu/pinctl.h>
 #include <asm/arch-mvebu/fdt.h>
@@ -194,6 +195,12 @@ int last_stage_init(void)
 	set_working_fdt_addr(fdt_blob);
 #endif
 
+#ifdef CONFIG_BOARD_CONFIG_EEPROM
+	/* reset the validation_counter */
+	cfg_eeprom_finish();
+#endif
+
+
 #ifdef CONFIG_MVEBU_BOOTMODE_SWITCH_SUPPORT
 	/* here we switch back to original mode mode by
 	 * writing I2C chip 4c address 0.
diff --git a/arch/arm/include/asm/arch-mvebu/fdt.h b/arch/arm/include/asm/arch-mvebu/fdt.h
index fe46177..748bdae 100644
--- a/arch/arm/include/asm/arch-mvebu/fdt.h
+++ b/arch/arm/include/asm/arch-mvebu/fdt.h
@@ -34,6 +34,7 @@ int mvebu_setup_fdt(void);
 
 #ifdef CONFIG_BOARD_CONFIG_EEPROM
 int cfg_eeprom_init(void);
+int cfg_eeprom_finish(void);
 uint8_t *cfg_eeprom_get_fdt(void);
 #endif
 
diff --git a/board/mvebu/common/cfg_eeprom.c b/board/mvebu/common/cfg_eeprom.c
index 13c4e31..086ff9d 100644
--- a/board/mvebu/common/cfg_eeprom.c
+++ b/board/mvebu/common/cfg_eeprom.c
@@ -22,6 +22,8 @@
 #include <fdt_support.h>
 #include "cfg_eeprom.h"
 
+#define AUTO_RECOVERY_RETRY_TIMES 10
+
 u8 mapping_default_fdt[] = DEFAULT_FDT_PER_BOARD;
 struct eeprom_struct board_config_val = CFG_DEFAULT_VALUE;
 struct board_config_struct *board_cfg = &(board_config_val.board_config);
@@ -497,9 +499,43 @@ default_id:
 	return MV_DEFAULT_BOARD_ID;
 }
 
+#ifdef CONFIG_TARGET_ARMADA_3700
+static u32 cfg_eeprom_check_validation_counter(void)
+{
+	u32 load_default = 0;
+
+	/* Only increase the validation_counter if we are not using the default FDT  */
+	if (board_cfg->fdt_cfg_en ||
+	    board_cfg->active_fdt_selection != get_default_fdt_config_id(cfg_eeprom_get_board_id())) {
+		board_cfg->validation_counter++;
+		cfg_eeprom_save(board_config_val.fdt_blob, 0);
+	}
+
+	/* Add hints here if validation_counter != 0 when the system starts */
+	if (board_cfg->validation_counter > 1)
+		error("Detect system crash %d times, will use defalut FDT if detect %d crashes\n",
+		      board_cfg->validation_counter, AUTO_RECOVERY_RETRY_TIMES);
+
+	/* Load the default FDT when validation_counter >= AUTO_RECOVERY_RETRY_TIMES */
+	if (board_cfg->validation_counter >= AUTO_RECOVERY_RETRY_TIMES) {
+		printf("Exceed maximum retry counter. Use default FDT\n");
+		load_default = 1;
+		/* reset the validation_counter here, not in cfg_eeprom_finish,
+		 * otherwise the eeprom will be overrided by the default FDT
+		 */
+		board_cfg->validation_counter = 0;
+		cfg_eeprom_save(board_config_val.fdt_blob, 0);
+	}
+
+	return load_default;
+}
+#endif
+
+
 /* cfg_eeprom_init - initialize FDT configuration struct
-   The EEPROM FDT is used if the checksum is valid and if the system
-   is not in recovery mode. Otherwise the default FDT is used.
+   The EEPROM FDT is used if 1) the checksum is valid, 2) the system
+   is not in recovery mode, 3) validation_counter < AUTO_RECOVERY_RETRY_TIMES
+   Otherwise the default FDT is used.
  */
 int cfg_eeprom_init(void)
 {
@@ -507,6 +543,7 @@ int cfg_eeprom_init(void)
 	struct config_types_info config_info;
 	uint32_t calculate_checksum;
 	unsigned long decompressed_size;
+	u32 load_default = 0;
 
 	/* It is possible that this init will be called by several modules during init,
 	 * however only need to initialize it for one time
@@ -574,6 +611,14 @@ int cfg_eeprom_init(void)
 #endif
 		/* update board_config_val struct with the read values from EEPROM */
 		board_config_val = eeprom_buffer;
+
+#ifdef CONFIG_TARGET_ARMADA_3700
+		/* load default FDT if validation_counter >= AUTO_RECOVERY_RETRY_TIMES */
+		load_default = cfg_eeprom_check_validation_counter();
+#endif
+	}
+
+	if (!load_default) {
 		/* if fdt_config is enabled, return - FDT already read in the struct from EEPROM */
 		if (cfg_eeprom_fdt_config_is_enable()) {
 			printf("read FDT from EEPROM\n");
@@ -587,8 +632,9 @@ int cfg_eeprom_init(void)
 		}
 	}
 
-	/* if checksum is invalid or if select active fdt is invalid */
-	/* need to load default FDT */
+	/* if checksum is invalid or if select active fdt is invalid or
+	 * validation_counter >= AUTO_RECOVERY_RETRY_TIMES, need to load default FDT
+	 */
 	if (boardid_is_valid(cfg_eeprom_get_board_id())) {
 		cfg_eeprom_upload_fdt_from_flash(get_default_fdt_config_id(cfg_eeprom_get_board_id()));
 		printf("read board default FDT\n");
@@ -601,3 +647,15 @@ init_done:
 	eeprom_initialized = 1;
 	return 0;
 }
+
+/* cfg_eeprom_finish - reset the validation_counter if boots normally */
+int cfg_eeprom_finish(void)
+{
+	if (board_cfg->validation_counter != 0) {
+		board_cfg->validation_counter = 0;
+		cfg_eeprom_save(board_config_val.fdt_blob, 0);
+	}
+
+	return 0;
+}
+
-- 
1.9.1

