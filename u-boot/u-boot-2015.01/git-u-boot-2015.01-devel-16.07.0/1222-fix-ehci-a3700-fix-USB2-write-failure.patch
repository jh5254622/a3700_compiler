From c8d2a3ed88818488b16fe09949f3af7b8de79884 Mon Sep 17 00:00:00 2001
From: jinghua <jinghua@marvell.com>
Date: Fri, 18 Mar 2016 17:40:27 +0800
Subject: [PATCH 1222/1240] fix: ehci: a3700: fix USB2 write failure

For SoC without hlock like Armada3700, need to program
sbuscfg reg to guarantee AHB master's burst would not
overrun or underrun FIFO. Otherwise all USB2 write
option would fail.
- add USB_EHCI_MARVELL_SBUSCFG option to Kconfig
- implement __weak routine ehci_powerup_fixup which would
  be invoked in mainline ehci drivere, to do the sbuscfg
  configuration, since it has to be done after usb reset.

Change-Id: I2ff051d84e39a48a879c6a933cf1e938c3998306
Signed-off-by: jinghua <jinghua@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/28347
Reviewed-by: Wilson Ding <dingwei@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
---
 drivers/usb/host/Kconfig        | 10 ++++++++++
 drivers/usb/host/ehci-marvell.c | 36 ++++++++++++++++++++++++++++++++++++
 2 files changed, 46 insertions(+)

diff --git a/drivers/usb/host/Kconfig b/drivers/usb/host/Kconfig
index e68ff39..11cb926 100644
--- a/drivers/usb/host/Kconfig
+++ b/drivers/usb/host/Kconfig
@@ -77,6 +77,16 @@ config USB_EHCI_MARVELL_BYPASS_BRG_ADDR_DEC
 	  Armada-XP, Armada-37x, Armada-38x and Armada-390
 	  SoCs, while not needed by Armada-3700.
 
+config USB_EHCI_MARVELL_SBUSCFG
+	bool "MARVELL USB 2.0 sbuscfg setting"
+	default n
+	depends on USB_EHCI_MARVELL
+	---help---
+	  Choose this option to add support
+	  for USB 2.0 sbuscfg setting on
+	  certain mvebu SoCs, which includes
+	  Armada-37xx SoCs.
+
 config USB_EHCI_UNIPHIER
 	bool "Support for Panasonic UniPhier on-chip EHCI USB controller"
 	depends on ARCH_UNIPHIER
diff --git a/drivers/usb/host/ehci-marvell.c b/drivers/usb/host/ehci-marvell.c
index b4cc3fa..888c1dc 100644
--- a/drivers/usb/host/ehci-marvell.c
+++ b/drivers/usb/host/ehci-marvell.c
@@ -40,6 +40,18 @@ static uintptr_t usb_reg_base;
 #define MVUSB0_BASE usb_reg_base
 #endif
 
+#ifdef CONFIG_USB_EHCI_MARVELL_SBUSCFG
+#define USB2_SBUSCFG_OFF	0x90
+
+#define USB_SBUSCFG_BAWR_OFF	0x6
+#define USB_SBUSCFG_BARD_OFF	0x3
+#define USB_SBUSCFG_AHBBRST_OFF	0x0
+
+#define USB_SBUSCFG_BAWR_ALIGN_64B	0x4
+#define USB_SBUSCFG_BARD_ALIGN_64B	0x4
+#define USB_SBUSCFG_AHBBRST_INCR16	0x7
+#endif
+
 #ifndef CONFIG_USB_EHCI_MARVELL_BYPASS_BRG_ADDR_DEC
 #define rdl(off)	readl(MVUSB0_BASE + (off))
 #define wrl(off, val)	writel((val), MVUSB0_BASE + (off))
@@ -117,6 +129,30 @@ int board_usb_get_enabled_port_count(void)
 }
 #endif
 
+#ifdef CONFIG_USB_EHCI_MARVELL_SBUSCFG
+/* For SoC without hlock, need to program sbuscfg value to guarantee
+ * AHB master's burst would not overrun or underrun FIFO.
+ *
+ * sbuscfg reg has to be set after usb controller reset, otherwise the value
+ * would be override to 0, in order not to change mainline ehci driver,
+ * __weak routine ehci_powerup_fixup which is invoked in mainline ehci driver
+ * is override to perform this configuration.
+ */
+void ehci_powerup_fixup(uint32_t *status_reg, uint32_t *reg)
+{
+	/* set default value for reg SBUSCFG, which is Control for the AMBA
+	 * system bus interface,
+	 * BAWR = BARD = 4 : Align read/write bursts packets larger than 64 bytes
+	 * AHBBRST = 7     : Align AHB Burst for packets larger than 64 bytes
+	 */
+	writel((USB_SBUSCFG_BAWR_ALIGN_64B << USB_SBUSCFG_BAWR_OFF)
+	      | (USB_SBUSCFG_BARD_ALIGN_64B << USB_SBUSCFG_BARD_OFF)
+	      | (USB_SBUSCFG_AHBBRST_INCR16 << USB_SBUSCFG_AHBBRST_OFF),
+	      usb_reg_base + USB2_SBUSCFG_OFF);
+	mdelay(50);
+}
+#endif
+
 /*
  * Create the appropriate control structures to manage
  * a new EHCI host controller.
-- 
1.9.1

