From befe1b372ce04761880a4378d17208930ea53e8e Mon Sep 17 00:00:00 2001
From: Terry Zhou <bjzhou@marvell.com>
Date: Thu, 23 Jun 2016 15:15:33 +0300
Subject: [PATCH 1223/1240] clk: a3700: delete the code for clock
 initialization.

all the clock initialization has been done in TIM

Change-Id: I3195e66286aa609581b41b7358e9c50cba2e24fa
Signed-off-by: Terry Zhou <bjzhou@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/30702
Reviewed-by: Victor Gu <xigu@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
---
 arch/arm/cpu/armv8/armada3700/mvebu_clock.c  | 485 -------------------------
 arch/arm/cpu/armv8/armada3700/spl.c          |  10 -
 arch/arm/include/asm/arch-armada3700/clock.h | 514 ---------------------------
 3 files changed, 1009 deletions(-)

diff --git a/arch/arm/cpu/armv8/armada3700/mvebu_clock.c b/arch/arm/cpu/armv8/armada3700/mvebu_clock.c
index de71900..1695468 100644
--- a/arch/arm/cpu/armv8/armada3700/mvebu_clock.c
+++ b/arch/arm/cpu/armv8/armada3700/mvebu_clock.c
@@ -17,17 +17,10 @@
  */
 /*#define DEBUG*/
 #include <common.h>
-#include <fdtdec.h>
 #include <asm/io.h>
-#include <asm/arch-mvebu/fdt.h>
 #include <asm/arch-mvebu/mvebu.h>
 #include <asm/arch/clock.h>
 #include <asm/arch/soc-info.h>	/* XTAL and Boot mode */
-#include <asm/io.h>
-
-DECLARE_GLOBAL_DATA_PTR;
-static struct a3700_clock_cfg a3700_clock_configs[] = MVEBU_A3700_CLOCK_CFGS;
-
 
 /***************************************************************************************************
   * get_ref_clk
@@ -46,484 +39,6 @@ u32 get_ref_clk(void)
 		return 40;
 }
 
-/******************************************************************************
-* Name: get_tbg_vco_sel
-*
-* Description:	calculate the vco parameters for TBG based on the target clock.
-*
-* Input:	kvco_mhz - KVCO clock freq in MHz
-*
-* Output:	vco_intpi - Phase Interpolator Bias Current
-*		vco_range - VCO frequency range (0x8 - 0xF)
-*
-* Return: 0 - OK
-******************************************************************************/
-static int get_tbg_vco_sel(u32 kvco_mhz,
-			   u32 *vco_intpi,
-			   u32 *vco_range)
-{
-	u8  index;
-	u16 vco_top_ranges_mhz[8] = {1350, 1500, 1750, 2000, 2200, 2400, 2600, 3000};
-
-	debug_enter();
-
-	if ((kvco_mhz <= MVEBU_KVCO_MIN) && (kvco_mhz >= MVEBU_KVCO_MAX)) {
-		error("Invalid KVCO CLK requested - %d MHz\n", kvco_mhz);
-		return 1;
-	}
-
-	/* Select the range the KVCO fits to.
-	   Valid values are 0x8 through 0xF.
-	   See TBG_A_KVCO and TBG_B_KVCO fields for details
-	 */
-	for (index = 0; index < 8; index++) {
-		if (kvco_mhz <= vco_top_ranges_mhz[index]) {
-			*vco_range = index + 8;
-			break;
-		}
-	}
-
-	/* INTPI - Phase Interpolator Bias Current
-	  8 <= KVCO is 2.5 ~ 3.0 GHz,
-	  6 <= KVCO is 2.0 ~ 2.5 GHz,
-	  5 <= KVCO is 1.5 ~ 2.0 GHz
-	 */
-	if (kvco_mhz > 2500)
-		*vco_intpi = 8;
-	else if (kvco_mhz < 2000)
-		*vco_intpi = 5;
-	else
-		*vco_intpi = 6;
-
-	debug_exit();
-	return 0;
-}
-
-/******************************************************************************
-* Name: set_tbg_clock
-*
-* Description:	Change the TBG(A/B) clock
-*		All affected North/South bridge clock sources should be
-*		switched to XTAL mode prior to calling this function!
-*
-* Input:	kvco_mhz:     AKVCO clock for TBG-X in MHz
-*		se_vco_div:   single-ended clock VCO divider (TBG_X_S)
-*		diff_vco_div: differential clock VCO post divider (TBG_X_P)
-*		tbg_typ:      TBG type (A/B)
-* Output:	None
-* Return:	0 if OK
-******************************************************************************/
-static u32 set_tbg_clock(u32 kvco_mhz,
-			       u32 se_vco_div,
-			       u32 diff_vco_div,
-			       enum a3700_clock_src tbg_typ)
-{
-	u32 vco_range = 0, vco_intpi = 0;
-	u32 tbg_M, tbg_N;
-	u32 icp;
-	u32 regval;
-	int ret;
-
-	debug_enter();
-
-	/* Try to keep Fref/M as close as possible to 10 MHz */
-	if (get_ref_clk() == 40) {
-		/* 40MHz */
-		debug("REF clock is 40MHz\n");
-		tbg_M = 4;	/* 10MHz */
-		icp = 5;	/* 8 */
-	} else	{
-		/* 25MHz */
-		debug("REF clock is 25MHz\n");
-		tbg_M = 3;	/* 8.33MHz */
-		icp = 6;	/* 9 */
-	}
-
-	ret = get_tbg_vco_sel(kvco_mhz, &vco_intpi, &vco_range);
-	if (ret != 0) {
-		error("Failed to obtain VCO divider selection\n");
-		return ret;
-	}
-
-	/* TBG frequency is calculated according to formula:
-		Ftbg = Fkvco / se_vco_div
-	   where
-		Fkvco = N * Fref * 4 / M
-
-	   N - TBG_A_FBDIV or TBG_B_FBDIV
-	   M - TBG_A_REFDIV or TBG_B_REFDIV
-	   se_vco_div - TBG_A_VCODIV_SEL_SE or TBG_B_VCODIV_SEL_SE
-	   Fref - reference clock 25MHz or 40 MHz
-	  */
-	tbg_N = (kvco_mhz * tbg_M / get_ref_clk()) >> 2;
-	debug("TBG-%s: SE vco_div %#x, DIFF vco_div %#x,vco_range %#x tbg_N %#x KVCO = %d MHz\n",
-	      tbg_typ == TBG_A ? "A" : "B", se_vco_div, diff_vco_div, vco_range, tbg_N, kvco_mhz);
-
-	/* 1. Switch all North/South Bridge clock sources to XTAL
-	      Should be already done by the function caller */
-
-	/* 2. Set TBG-A (bit[0]) or TBG-B (bit[16]) to reset state  */
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL0);
-	regval |= (tbg_typ == TBG_A) ? BIT0 : BIT16;
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL0);
-
-	/* The A3700 FS requires to power down TGB before
-	   changing PLL parameters. However it turns out that
-	   this step is not essential. Putting TBG into reset
-	   state is enough.
-	   3. Power down TBG-A (bit[1]) or TBG-B (bit[17])
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL0);
-	regval |= (tbg_typ == TBG_A) ? BIT1 : BIT17;
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL0);
-	*/
-
-	/* 4. Set TBG-A (bit[10:2]) or TBG-B (bit[26:18]) FBDIV (N) value */
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL0);
-	regval &= (tbg_typ == TBG_A) ? ~(0xFFUL << 2) : ~(0xFFUL << 18);
-	regval |= (tbg_typ == TBG_A) ? (tbg_N << 2) : (tbg_N << 18);
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL0);
-
-	/* 5. Set TBG-A (bit[8:0]) or TBG-B (bit[24:16]) REFDIV (M) value */
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL7);
-	regval &= (tbg_typ == TBG_A) ? ~(0x1FFUL << 0) : ~(0x1FFUL << 16);
-	regval |= (tbg_typ == TBG_A) ? (tbg_M << 0) : (tbg_M << 16);
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL7);
-
-	/* 6a. Set TBG-A (bit[8:0]) or TBG-B (bit[24:16]) SE VCODIV value  */
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL1);
-	regval &= (tbg_typ == TBG_A) ? ~(0x1FFUL << 0) : ~(0x1FFUL << 16);
-	regval |= (tbg_typ == TBG_A) ? (se_vco_div << 0) : (se_vco_div << 16);
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL1);
-
-	/* 6b. Set TBG-A (bit[9:1]) or TBG-B (bit[25:17]) DIFF VCODIV value  */
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL8);
-	regval &= (tbg_typ == TBG_A) ? ~(0x1FFUL << 1) : ~(0x1FFUL << 17);
-	regval |= (tbg_typ == TBG_A) ? (diff_vco_div << 1) : (diff_vco_div << 17);
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL8);
-
-	/* 7. Set TBG-A (bit[11]) or TBG-B (bit[27]) PLL Bandwidth to normal (0x0) */
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL1);
-	regval &= (tbg_typ == TBG_A) ? ~(0x1UL << 11) : ~(0x1UL << 27);
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL1);
-
-	/* 8. Set TBG-A (bit[11:8]) or TBG-B (bit[27:24]) ICP Charge Pump Current value */
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL2);
-	regval &= (tbg_typ == TBG_A) ? ~(0xFUL << 8) : ~(0xFUL << 24);
-	regval |= (tbg_typ == TBG_A) ? (icp << 8) : (icp << 24);
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL2);
-
-	/* 9. Set TBG-A (bit[3:0]) or TBG-B (bit[19:16]) KVCO range value  */
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL3);
-	regval &= (tbg_typ == TBG_A) ? ~(0xFUL << 0) : ~(0xFUL << 16);
-	regval |= (tbg_typ == TBG_A) ? (vco_range << 0) : (vco_range << 16);
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL3);
-
-	/* 10. Set TBG-A (bit[3:0]) or TBG-B (bit[19:16]) INTPI value  */
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL2);
-	regval &= (tbg_typ == TBG_A) ? ~(0xFUL << 0) : ~(0xFUL << 16);
-	regval |= (tbg_typ == TBG_A) ? (vco_intpi << 0) : (vco_intpi << 16);
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL2);
-
-	/* The A3700 FS requires to power down TGB before
-	   changing PLL parameters. However it turns out that
-	   this step is not essential. Putting TBG into reset
-	   state is enough.
-	   11. Power up TBG-A (bit[1]) or TBG-B (bit[17])
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL0);
-	regval &= (tbg_typ == TBG_A) ? ~(BIT1) : ~(BIT17);
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL0);
-	*/
-
-	/* 12. Release TBG-A (bit[0]) or TBG-B (bit[16]) from reset */
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL0);
-	regval &= (tbg_typ == TBG_A) ? ~(BIT0) : ~(BIT16);
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL0);
-
-	/* 13. Set TBG-A (bit[9]) or TBG-B (bit[25]) Bypass to disable - get CLKOUT from PLL */
-	regval = readl(MVEBU_NORTH_BRG_TBG_CTRL1);
-	regval &= (tbg_typ == TBG_A) ? ~(BIT9) : ~(BIT25);
-	writel(regval, MVEBU_NORTH_BRG_TBG_CTRL1);
-
-	/* 14. Wait for TBG-A (bit[15] and TBG-B (bit[31]) PLL lock */
-	do {
-		regval = readl(MVEBU_NORTH_BRG_TBG_CTRL1);
-		regval &= BIT15 | BIT31;
-	} while (regval != (BIT15 | BIT31));
-
-	/* 15. Switch all North/South Bridge clock sources to clock divider
-	       Will be done by function caller when required */
-
-	/* Wait for stable clock output, suggested 40us */
-	udelay(40);
-
-	debug_exit();
-	return 0;
-}
-
-#ifdef MVEBU_A3700_ENABLE_SSC
-/******************************************************************************
-* Name: set_ssc_mode
-*
-* Description: Setup Spread Spectrum Clcok for TBG-A/B
-*
-* Input:	None
-* Output:	None
-* Return:	Non-zero on error
-******************************************************************************/
-static u32 set_ssc_mode(void)
-{
-	debug_enter();
-	return 0;
-	debug_exit();
-}
-#endif /* MVEBU_A3700_ENABLE_SSC */
-
-/******************************************************************************
-* Name: set_clocks
-*
-* Description: Configure entire clock tree according to CPU and DDR frequency
-*
-* Input:	cpu_clk_mhz: required CPU clock
-*		ddr_clk_mhz: required DDR clock
-*		tbg_a_kvco_mhz: required TBG-A KVCO frequency or 0 for any available
-*		tbg_b_kvco_mhz: required TBG-B KVCO frequency or 0 for any available
-* Output:	None
-* Return:	Non-zero if the requested settings are not supported
-******************************************************************************/
-u32 set_clocks(u32 cpu_clk_mhz, u32 ddr_clk_mhz, u32 tbg_a_kvco_mhz, u32 tbg_b_kvco_mhz)
-{
-	u32 clock_cfgs_cnt = sizeof(a3700_clock_configs)/sizeof(a3700_clock_configs[0]);
-	u32 cfg;
-	struct a3700_clock_cfg *clk_cfg = 0;
-	u32 rval, reg_val;
-
-	debug_enter();
-
-	/* Search for the supported clock tree configuration */
-	for (cfg = 0; cfg < clock_cfgs_cnt; cfg++) {
-		if ((a3700_clock_configs[cfg].cpu_freq_mhz == cpu_clk_mhz) &&
-		    (a3700_clock_configs[cfg].ddr_freq_mhz == ddr_clk_mhz) &&
-		    ((tbg_a_kvco_mhz == 0) || (a3700_clock_configs[cfg].tbg_a.kvco_mhz == tbg_a_kvco_mhz)) &&
-		    ((tbg_b_kvco_mhz == 0) || (a3700_clock_configs[cfg].tbg_b.kvco_mhz == tbg_b_kvco_mhz))) {
-			clk_cfg = &a3700_clock_configs[cfg];
-			debug("Found valid FREQ preset(#%d): CPU=%dMHz, DDR=%dMHz\n", cfg,
-			      a3700_clock_configs[cfg].cpu_freq_mhz, a3700_clock_configs[cfg].ddr_freq_mhz);
-			break;
-		}
-	}
-
-	if (clk_cfg == 0) {
-		error("Unable to find valid FREQ preset for CPU=%dMHz, DDR=%dMHz, TBG-A=%dMHz, TBG-B=%dMHz\n",
-		      cpu_clk_mhz, ddr_clk_mhz, tbg_a_kvco_mhz, tbg_b_kvco_mhz);
-		return 1;
-	}
-
-	/* Switch all North/South Bridge clock sources to XTAL
-	   prior to make any change to the clock configuration */
-	writel(0x00000000, MVEBU_NORTH_CLOCK_SELECT_REG);
-	writel(0x00000000, MVEBU_SOUTH_CLOCK_SELECT_REG);
-
-	rval = set_tbg_clock(clk_cfg->tbg_a.kvco_mhz,
-			     clk_cfg->tbg_a.se_vcodiv,
-			     clk_cfg->tbg_a.diff_vcodiv,
-			     TBG_A);
-	if (rval) {
-		error("Failed to set TBG-A clock to %dMHz\n", clk_cfg->tbg_a.kvco_mhz);
-		return rval;
-	}
-
-	rval = set_tbg_clock(clk_cfg->tbg_b.kvco_mhz,
-			     clk_cfg->tbg_b.se_vcodiv,
-			     clk_cfg->tbg_b.diff_vcodiv,
-			     TBG_B);
-	if (rval) {
-		error("Failed to set TBG-B clock to %dMHz\n", clk_cfg->tbg_b.kvco_mhz);
-		return rval;
-	}
-
-	/* North Bridge clock tree configuration */
-	/* Enable all clocks */
-	writel(NB_ALL_CLK_ENABLE, MVEBU_NORTH_CLOCK_ENABLE_REG);
-
-	/* Setup dividers */
-	reg_val = readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT0_REG);
-	reg_val &= NB_CLK_DIV0_MASK_ALL;
-	reg_val |= clk_cfg->nb_clk_cfg.div0.pwm_clk_prscl2 & 0x7;
-	reg_val |= (clk_cfg->nb_clk_cfg.div0.pwm_clk_prscl1 & 0x7) << 3;
-	reg_val |= (clk_cfg->nb_clk_cfg.div0.ddr_fclk_clk_prscl2 & 0x7) << 12;
-	reg_val |= (clk_cfg->nb_clk_cfg.div0.ddr_fclk_clk_prscl1 & 0x7) << 15;
-	reg_val |= (clk_cfg->nb_clk_cfg.div0.ddr_phy_mck_div_sel & 0x1) << 18;
-	reg_val |= (clk_cfg->nb_clk_cfg.div0.trace_div_sel & 0x7) << 20;
-	reg_val |= (clk_cfg->nb_clk_cfg.div0.counter_clk_prscl & 0x7) << 23;
-	reg_val |= (clk_cfg->nb_clk_cfg.div0.a53_cpu_clk_prscl & 0x7) << 28;
-	writel(reg_val, MVEBU_NORTH_CLOCK_DIVIDER_SELECT0_REG);
-
-	reg_val = readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG);
-	reg_val &= NB_CLK_DIV1_MASK_ALL;
-	reg_val |= clk_cfg->nb_clk_cfg.div1.sec_at_clk_prscl2 & 0x7;
-	reg_val |= (clk_cfg->nb_clk_cfg.div1.sec_at_clk_prscl1 & 0x7) << 3;
-	reg_val |= (clk_cfg->nb_clk_cfg.div1.sec_dap_clk_prscl2 & 0x7) << 6;
-	reg_val |= (clk_cfg->nb_clk_cfg.div1.sec_dap_clk_prscl1 & 0x7) << 9;
-	reg_val |= (clk_cfg->nb_clk_cfg.div1.tsecm_clk_prscl2 & 0x7) << 12;
-	reg_val |= (clk_cfg->nb_clk_cfg.div1.tsecm_clk_prscl1 & 0x7) << 15;
-	reg_val |= (clk_cfg->nb_clk_cfg.div1.setm_tmx_clk_prscl & 0x7) << 18;
-	reg_val |= (clk_cfg->nb_clk_cfg.div1.sqf_clk_prscl2 & 0x7) << 24;
-	reg_val |= (clk_cfg->nb_clk_cfg.div1.sqf_clk_prscl1 & 0x7) << 27;
-	writel(reg_val, MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG);
-
-	reg_val = readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT2_REG);
-	reg_val &= NB_CLK_DIV2_MASK_ALL;
-	reg_val |= clk_cfg->nb_clk_cfg.div2.wc_ahb_div_sel & 0x7;
-	reg_val |= (clk_cfg->nb_clk_cfg.div2.sata_h_clk_prscl2 & 0x7) << 7;
-	reg_val |= (clk_cfg->nb_clk_cfg.div2.sata_h_clk_prscl1 & 0x7) << 10;
-	reg_val |= (clk_cfg->nb_clk_cfg.div2.mmc_clk_prscl2 & 0x7) << 13;
-	reg_val |= (clk_cfg->nb_clk_cfg.div2.mmc_clk_prscl1 & 0x7) << 16;
-	reg_val |= (clk_cfg->nb_clk_cfg.div2.eip97_clk_prscl2 & 0x7) << 19;
-	reg_val |= (clk_cfg->nb_clk_cfg.div2.eip97_clk_prscl1 & 0x7) << 22;
-	reg_val |= (clk_cfg->nb_clk_cfg.div2.atb_clk_div_sel & 0x3) << 25;
-	/* Always use "divide by 1 (0)" for counter clock and ignore table value
-	reg_val |= (clk_cfg->nb_clk_cfg.div2.cpu_cnt_clk_div_sel & 0x3) << 27;
-	*/
-	reg_val |= (clk_cfg->nb_clk_cfg.div2.plkdbg_clk_div_sel & 0x3) << 29;
-	writel(reg_val, MVEBU_NORTH_CLOCK_DIVIDER_SELECT2_REG);
-
-	/* Setup connection to clock lines */
-	reg_val = readl(MVEBU_NORTH_CLOCK_TBG_SELECT_REG);
-	reg_val &= NB_CLK_TBG_SEL_MASK_ALL;
-	reg_val |= clk_cfg->nb_clk_cfg.clock_sel.mmc_pclk_sel & 0x3;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.sata_host_pclk_sel & 0x3) << 2;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.sec_at_pclk_sel & 0x3) << 4;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.sec_dap_pclk_sel & 0x3) << 6;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.tsecm_pclk_sel & 0x3) << 8;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.setm_tmx_pclk_sel & 0x3) << 10;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.sqf_pclk_sel & 0x3) << 12;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.pwm_pclk_sel & 0x3) << 14;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.ddr_fclk_pclk_sel & 0x3) << 16;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.trace_pclk_sel & 0x3) << 18;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.counter_pclk_sel & 0x3) << 20;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.a53_cpu_pclk_sel & 0x3) << 22;
-	reg_val |= (clk_cfg->nb_clk_cfg.clock_sel.eip97_pclk_sel & 0x3) << 24;
-	writel(reg_val, MVEBU_NORTH_CLOCK_TBG_SELECT_REG);
-
-	/* South Bridge clock tree configuration */
-	/* Enable all clocks */
-	writel(SB_ALL_CLK_ENABLE, MVEBU_SOUTH_CLOCK_ENABLE_REG);
-
-	/* Setup dividers */
-	reg_val = readl(MVEBU_SOUTH_CLOCK_DIVIDER_SELECT0_REG);
-	reg_val &= SB_CLK_DIV0_MASK_ALL;
-	reg_val |= (clk_cfg->sb_clk_cfg.div0.sdio_clk_prscl2 & 0x7) << 3;
-	reg_val |= (clk_cfg->sb_clk_cfg.div0.sdio_clk_prscl1 & 0x7) << 6;
-	reg_val |= (clk_cfg->sb_clk_cfg.div0.usb32_usb2_sys_clk_prscl2 & 0x7) << 9;
-	reg_val |= (clk_cfg->sb_clk_cfg.div0.usb32_usb2_sys_clk_prscl1 & 0x7) << 12;
-	reg_val |= (clk_cfg->sb_clk_cfg.div0.usb32_ss_sys_clk_prscl2 & 0x7) << 15;
-	reg_val |= (clk_cfg->sb_clk_cfg.div0.usb32_ss_sys_clk_prscl1 & 0x7) << 18;
-	reg_val |= (clk_cfg->sb_clk_cfg.div0.sb_axi_clk_prscl2 & 0x7) << 21;
-	reg_val |= (clk_cfg->sb_clk_cfg.div0.sb_axi_clk_prscl1 & 0x7) << 24;
-	writel(reg_val, MVEBU_SOUTH_CLOCK_DIVIDER_SELECT0_REG);
-
-	reg_val = readl(MVEBU_SOUTH_CLOCK_DIVIDER_SELECT1_REG);
-	reg_val &= SB_CLK_DIV1_MASK_ALL;
-	reg_val |= (clk_cfg->sb_clk_cfg.div1.gbe_125_clk_prscl2 & 0x7) << 6;
-	reg_val |= (clk_cfg->sb_clk_cfg.div1.gbe_125_clk_prscl1 & 0x7) << 9;
-	reg_val |= (clk_cfg->sb_clk_cfg.div1.gbe_bm_core_clk_div2_sel & 0x1) << 12;
-	reg_val |= (clk_cfg->sb_clk_cfg.div1.gbe1_core_clk_div2_sel & 0x1) << 13;
-	reg_val |= (clk_cfg->sb_clk_cfg.div1.gbe0_core_clk_div2_sel & 0x1) << 14;
-	reg_val |= (clk_cfg->sb_clk_cfg.div1.gbe_core_clk_prscl2 & 0x7) << 18;
-	reg_val |= (clk_cfg->sb_clk_cfg.div1.gbe_core_clk_prscl1 & 0x7) << 21;
-	writel(reg_val, MVEBU_SOUTH_CLOCK_DIVIDER_SELECT1_REG);
-
-	reg_val = readl(MVEBU_SOUTH_CLOCK_DIVIDER_SELECT2_REG);
-	reg_val &= SB_CLK_DIV2_MASK_ALL;
-	reg_val |= (clk_cfg->sb_clk_cfg.div2.gbe_50_clk_prscl2 & 0x7) << 6;
-	reg_val |= (clk_cfg->sb_clk_cfg.div2.gbe_50_clk_prscl1 & 0x7) << 9;
-	writel(reg_val, MVEBU_SOUTH_CLOCK_DIVIDER_SELECT2_REG);
-
-	/* Setup connection to clock lines */
-	reg_val = readl(MVEBU_SOUTH_CLOCK_TBG_SELECT_REG);
-	reg_val &= SB_CLK_TBG_SEL_MASK_ALL;
-	reg_val |= (clk_cfg->sb_clk_cfg.clock_sel.gbe_50_pclk_sel & 0x3) << 6;
-	reg_val |= (clk_cfg->sb_clk_cfg.clock_sel.gbe_core_pclk_sel & 0x3) << 8;
-	reg_val |= (clk_cfg->sb_clk_cfg.clock_sel.gbe_125_pclk_sel & 0x3) << 10;
-	reg_val |= (clk_cfg->sb_clk_cfg.clock_sel.sdio_pclk_sel & 0x3) << 14;
-	reg_val |= (clk_cfg->sb_clk_cfg.clock_sel.usb32_usb2_sys_pclk_sel & 0x3) << 16;
-	reg_val |= (clk_cfg->sb_clk_cfg.clock_sel.usb32_ss_sys_pclk_sel & 0x3) << 18;
-	reg_val |= (clk_cfg->sb_clk_cfg.clock_sel.sb_axi_pclk_sel & 0x3) << 20;
-	writel(reg_val, MVEBU_SOUTH_CLOCK_TBG_SELECT_REG);
-
-
-#ifdef MVEBU_A3700_ENABLE_SSC
-	set_ssc_mode();
-#else
-	/* Disable SSC for TBG-A (bit[10]) and TBG-B (bit[26]) */
-	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL3);
-	reg_val &= ~(BIT10 | BIT26);
-	writel(reg_val, MVEBU_NORTH_BRG_TBG_CTRL3);
-#endif /* MVEBU_A3700_ENABLE_SSC */
-
-	/* Switch all North/South Bridge clock sources from XTAL to clock divider
-	   excepting counter clock, which remains to be connected to XTAL */
-	writel(0x00009FFF, MVEBU_NORTH_CLOCK_SELECT_REG);
-	writel(0x000007AA, MVEBU_SOUTH_CLOCK_SELECT_REG);
-
-	debug_exit();
-	return rval;
-}
-
-int init_clock(void)
-{
-	int idx, ret;
-	u32 vdd_val;
-
-	debug_enter();
-
-#if defined(CONFIG_PRESET_CPU_600_DDR_600)
-	idx = MVEBU_A3700_PRESET_IDX_CPU_600_DDR_600;
-#elif defined(CONFIG_PRESET_CPU_800_DDR_800)
-	idx = MVEBU_A3700_PRESET_IDX_CPU_800_DDR_800;
-#elif defined(CONFIG_PRESET_CPU_1000_DDR_800)
-	idx = MVEBU_A3700_PRESET_IDX_CPU_1000_DDR_800;
-#else
-#error "Bad clock preset!"
-#endif
-
-	printf("Setting clocks to CPU=%dMHz and DDR=%dMHz\n",
-		a3700_clock_configs[idx].cpu_freq_mhz, a3700_clock_configs[idx].ddr_freq_mhz);
-
-	ret =  set_clocks(a3700_clock_configs[idx].cpu_freq_mhz,
-			  a3700_clock_configs[idx].ddr_freq_mhz,
-			  a3700_clock_configs[idx].tbg_a.kvco_mhz,
-			  a3700_clock_configs[idx].tbg_b.kvco_mhz);
-	if (ret)
-		error("Failed to configure system clocks\n");
-
-	/* Enable AVS for high CPU clocks */
-	if (a3700_clock_configs[idx].cpu_freq_mhz >= 800)
-		vdd_val = AVS_VDD_VAL(AVS_VDD_800_MHZ_MV);
-	else if (a3700_clock_configs[idx].cpu_freq_mhz == 600)
-		vdd_val = AVS_VDD_VAL(AVS_VDD_600_MHZ_MV);
-	else
-		vdd_val = 0;
-
-	if (vdd_val != 0) {
-		u32 avs_reg = AVS_SOFT_RESET | AVS_SPEED_TARGET_MASK | AVS_SEL_VSENCE0 |
-				(vdd_val << AVS_LOW_VDD_LIMIT_OFFS) |
-				(vdd_val << AVS_HIGH_VDD_LIMIT_OFFS);
-
-		writel(avs_reg, MVEBU_AVS_CTRL_0);
-		avs_reg &= ~AVS_SOFT_RESET;
-		writel(avs_reg, MVEBU_AVS_CTRL_0);
-		avs_reg |= AVS_ENABLE;
-		writel(avs_reg, MVEBU_AVS_CTRL_0);
-		printf("AVS enabled (%d mV)\n",
-			a3700_clock_configs[idx].cpu_freq_mhz == 600 ?
-			AVS_VDD_600_MHZ_MV : AVS_VDD_800_MHZ_MV);
-	}
-
-	debug_exit();
-	return ret;
-}
-
 static u32 get_tbg_clk(enum a3700_clock_line tbg_typ)
 {
 	u32 tbg_M, tbg_N, vco_div;
diff --git a/arch/arm/cpu/armv8/armada3700/spl.c b/arch/arm/cpu/armv8/armada3700/spl.c
index 7d676dc..45471e3 100644
--- a/arch/arm/cpu/armv8/armada3700/spl.c
+++ b/arch/arm/cpu/armv8/armada3700/spl.c
@@ -87,16 +87,6 @@ void board_init_f(ulong silent)
 	mvebu_boot_mode_set(BOOT_MODE_UART);
 #endif
 
-	/* Clock should be enabeld before initialize the I/O units */
-#if defined(CONFIG_MVEBU_A3700_CLOCK) && !defined(SPL_IS_IN_DRAM)
-	/* Dynamic clocks configuration is only supported for SPL running from SRAM
-	   Changing the DDR clock is not possible when the SPL code is located in DDR.
-	   When SPL is running from DRAM, all clocks should be set by TIM at boot
-	   time, since TIM code is is executed by secure CPU (CM3) from internal SRAM.
-	*/
-	init_clock();
-#endif
-
 #ifdef CONFIG_MVEBU_A3700_MISC_INIT
 	misc_init_cci400();
 #endif
diff --git a/arch/arm/include/asm/arch-armada3700/clock.h b/arch/arm/include/asm/arch-armada3700/clock.h
index 0a1b5ee..c554b6a 100644
--- a/arch/arm/include/asm/arch-armada3700/clock.h
+++ b/arch/arm/include/asm/arch-armada3700/clock.h
@@ -19,18 +19,6 @@
 #ifndef _ARMADA3700_CLOCK_H_
 #define _ARMADA3700_CLOCK_H_
 
-/* Spread Spectrum Clock */
-#undef MVEBU_A3700_ENABLE_SSC
-
-#ifdef MVEBU_A3700_ENABLE_SSC
-/* In order to use the SSC function, the KVCO must be operated above 2 GHz */
-#define MVEBU_KVCO_MIN		2000
-#else
-#define MVEBU_KVCO_MIN		1200
-#endif /* MVEBU_A3700_ENABLE_SSC */
-
-#define MVEBU_KVCO_MAX		3000
-
 /****************/
 /* North Bridge */
 /****************/
@@ -38,101 +26,16 @@
 #define MVEBU_NORTH_BRG_TBG_CFG			(MVEBU_NORTH_BRG_PLL_BASE + 0x0)
 #define MVEBU_NORTH_BRG_TBG_CTRL0		(MVEBU_NORTH_BRG_PLL_BASE + 0x4)
 #define MVEBU_NORTH_BRG_TBG_CTRL1		(MVEBU_NORTH_BRG_PLL_BASE + 0x8)
-#define MVEBU_NORTH_BRG_TBG_CTRL2		(MVEBU_NORTH_BRG_PLL_BASE + 0xC)
-#define MVEBU_NORTH_BRG_TBG_CTRL3		(MVEBU_NORTH_BRG_PLL_BASE + 0x10)
-#define MVEBU_NORTH_BRG_TBG_CTRL4		(MVEBU_NORTH_BRG_PLL_BASE + 0x14)
-#define MVEBU_NORTH_BRG_TBG_CTRL5		(MVEBU_NORTH_BRG_PLL_BASE + 0x18)
-#define MVEBU_NORTH_BRG_TBG_CTRL6		(MVEBU_NORTH_BRG_PLL_BASE + 0x1C)
 #define MVEBU_NORTH_BRG_TBG_CTRL7		(MVEBU_NORTH_BRG_PLL_BASE + 0x20)
 #define MVEBU_NORTH_BRG_TBG_CTRL8		(MVEBU_NORTH_BRG_PLL_BASE + 0x30)
 
 #define MVEBU_NORTH_CLOCK_TBG_SELECT_REG	(MVEBU_NORTH_CLOCK_REGS_BASE + 0x0)
-#define NB_CLK_TBG_SEL_MASK_ALL			(0x3F << 26)
 
 /* north bridge clock divider select registers */
 #define MVEBU_NORTH_CLOCK_DIVIDER_SELECT0_REG	(MVEBU_NORTH_CLOCK_REGS_BASE + 0x4)
-#define NB_CLK_DIV0_MASK_ALL			(BIT31 | (0x3 << 26) | BIT19 | (0x3F << 6))
-
-#define MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG	(MVEBU_NORTH_CLOCK_REGS_BASE + 0x8)
-#define NB_CLK_DIV1_MASK_ALL			((0x3 << 30) | (0x7 << 21))
-
-#define MVEBU_NORTH_CLOCK_DIVIDER_SELECT2_REG	(MVEBU_NORTH_CLOCK_REGS_BASE + 0xC)
-#define NB_CLK_DIV2_MASK_ALL			(BIT31 | (0xF << 3))
-#define CPU_CNT_CLK_DIV_SEL_OFFS		(27)
 
 /* north bridge clock source register */
 #define MVEBU_NORTH_CLOCK_SELECT_REG		(MVEBU_NORTH_CLOCK_REGS_BASE + 0x10)
-#define NB_CLK_SEL_MASK_ALL			((0xFFFF << 16) | BIT14)
-
-/* north bridge clock enable register */
-#define MVEBU_NORTH_CLOCK_ENABLE_REG		(MVEBU_NORTH_CLOCK_REGS_BASE + 0x14)
-#define NB_ALL_CLK_ENABLE			(0x0)
-
-/****************/
-/* South Bridge */
-/****************/
-
-/* south bridge clock enable register */
-#define MVEBU_SOUTH_CLOCK_TBG_SELECT_REG	(MVEBU_SOUTH_CLOCK_REGS_BASE + 0x0)
-#define SB_CLK_TBG_SEL_MASK_ALL			((0x3FF << 22) | (0x3 << 12) | 0x3F)
-#define GBE_125_TBG_SEL_OFFS			(10)
-
-#define MVEBU_SOUTH_CLOCK_DIVIDER_SELECT0_REG	(MVEBU_SOUTH_CLOCK_REGS_BASE + 0x4)
-#define SB_CLK_DIV0_MASK_ALL			((0x1F << 27) | 0x7)
-#define AXI_CLK_PRSCL1_OFFS			(24)
-#define AXI_CLK_PRSCL2_OFFS			(21)
-#define USB32_SS_SYS_CLK_PRSCL1_OFFS		(18)
-#define USB32_SS_SYS_CLK_PRSCL2_OFFS		(15)
-#define USB32_USB2_SYS_CLK_PRSCL1_OFFS		(12)
-#define USB32_USB2_SYS_CLK_PRSCL2_OFFS		(9)
-
-#define MVEBU_SOUTH_CLOCK_DIVIDER_SELECT1_REG	(MVEBU_SOUTH_CLOCK_REGS_BASE + 0x8)
-#define SB_CLK_DIV1_MASK_ALL			((0xFF << 24) | (0x7 << 15) | 0x3F)
-#define GBE_125_CLK_PRSCL_MASK			(0x7)
-#define GBE_125_CLK_PRSCL1_OFF			(9)
-#define GBE_125_CLK_PRSCL2_OFF			(6)
-
-#define MVEBU_SOUTH_CLOCK_DIVIDER_SELECT2_REG	(MVEBU_SOUTH_CLOCK_REGS_BASE + 0xC)
-#define SB_CLK_DIV2_MASK_ALL			((0xFFFFF << 12) | 0x3F)
-
-/* south bridge clock source register */
-#define MVEBU_SOUTH_CLOCK_SELECT_REG		(MVEBU_SOUTH_CLOCK_REGS_BASE + 0x10)
-#define SB_AXI_CLK_SEL_OFFS			(10)
-#define USB32_SS_SYS_CLK_SEL_OFFS		(9)
-#define USB32_USB2_SYS_CLK_SEL_OFFS		(8)
-#define SDIO_CLK_SEL_OFFS			(7)
-#define GBE_CORE_CLK_SEL_OFFS			(5)
-#define GBE_125_CLK_SEL_OFFS			(3)
-#define GBE_50_CLK_SEL_OFFS			(1)
-
-
-/* south bridge clock enable register */
-#define MVEBU_SOUTH_CLOCK_ENABLE_REG		(MVEBU_SOUTH_CLOCK_REGS_BASE + 0x14)
-/* (GBE0 and GBE1 have reversed logic) */
-#define SB_ALL_CLK_ENABLE			(BIT19 | BIT20)
-
-/* AVS */
-#define MVEBU_AVS_CTRL_0			(MVEBU_AVS_REGS_BASE)
-#define AVS_SOFT_RESET				(BIT31)
-#define AVS_ENABLE				(BIT30)
-#define AVS_SEL_VSENCE0				(BIT28)
-#define AVS_SPEED_TARGET_MASK			(0x0000FFFF)
-#define AVS_HIGH_VDD_LIMIT_OFFS			(16)
-#define AVS_LOW_VDD_LIMIT_OFFS			(22)
-#define AVS_VDD_LIMIT_MASK			(0x3F)
-#define AVS_VDD_MIN				(0x0)	/* 640 mV */
-#define AVS_VDD_MAX				(0x33)	/* 1342 mV */
-
-/* The AVS voltage formula:  AVSmv = (1.05/0.9)*(640 + field_val * 10) */
-#define AVS_VDD_VAL(mv)				((((mv) * 90)/105 - 640)/10)
-#define AVS_VDD_800_MHZ_MV			(1150)	/* mV for CPU >= 800 MHz */
-#define AVS_VDD_600_MHZ_MV			(1100)	/* mV for CPU 600 MHz */
-
-
-enum a3700_clock_src {
-	TBG_A,
-	TBG_B
-};
 
 enum a3700_clock_line {
 	TBG_A_P = 0,
@@ -158,406 +61,6 @@ enum a3700_tbg_divider {
 	TBG_DIVIDER_NUM
 };
 
-/*
- * North Bridge Clocks
- */
-/* North Bridge clock line selectors (0x13000) */
-struct a3700_nb_clock_sel {
-	enum a3700_clock_line mmc_pclk_sel;		/* [1:0] */
-	enum a3700_clock_line sata_host_pclk_sel;	/* [3:2] */
-	enum a3700_clock_line sec_at_pclk_sel;		/* [5:4] */
-	enum a3700_clock_line sec_dap_pclk_sel;		/* [7:6] */
-	enum a3700_clock_line tsecm_pclk_sel;		/* [9:8] */
-	enum a3700_clock_line setm_tmx_pclk_sel;	/* [11:10] */
-	enum a3700_clock_line sqf_pclk_sel;		/* [13:12] */
-	enum a3700_clock_line pwm_pclk_sel;		/* [15:14] */
-	enum a3700_clock_line ddr_fclk_pclk_sel;	/* [17:16] */
-	enum a3700_clock_line trace_pclk_sel;		/* [19:18] */
-	enum a3700_clock_line counter_pclk_sel;		/* [21:20] */
-	enum a3700_clock_line a53_cpu_pclk_sel;		/* [23:22] */
-	enum a3700_clock_line eip97_pclk_sel;		/* [25:24] */
-};
-
-/* North Bridge clock divider 0 (0x13004) */
-struct a3700_nb_clock_div_0 {
-	u8 pwm_clk_prscl2;	/* [2:0] */
-	u8 pwm_clk_prscl1;	/* [5:3] */
-	u8 ddr_fclk_clk_prscl2;	/* [14:12] */
-	u8 ddr_fclk_clk_prscl1;	/* [17:15] */
-	u8 ddr_phy_mck_div_sel;	/* [18] */
-	u8 trace_div_sel;	/* [22:20] */
-	u8 counter_clk_prscl;	/* [25:23] */
-	u8 a53_cpu_clk_prscl;	/* [30:28] */
-};
-
-/* North Bridge clock divider 1 (0x13008) */
-struct a3700_nb_clock_div_1 {
-	u8 sec_at_clk_prscl2;	/* [2:0] */
-	u8 sec_at_clk_prscl1;	/* [5:3] */
-	u8 sec_dap_clk_prscl2;	/* [8:6] */
-	u8 sec_dap_clk_prscl1;	/* [11:9] */
-	u8 tsecm_clk_prscl2;	/* [14:12] */
-	u8 tsecm_clk_prscl1;	/* [17:15] */
-	u8 setm_tmx_clk_prscl;	/* [20:18] */
-	u8 sqf_clk_prscl2;	/* [26:24] */
-	u8 sqf_clk_prscl1;	/* [29:27] */
-};
-
-/* North Bridge clock divider 2 (0x1300C) */
-struct a3700_nb_clock_div_2 {
-	u8 wc_ahb_div_sel;	/* [2:0] */
-	u8 sata_h_clk_prscl2;	/* [9:7] */
-	u8 sata_h_clk_prscl1;	/* [12:10] */
-	u8 mmc_clk_prscl2;	/* [15:13] */
-	u8 mmc_clk_prscl1;	/* [18:16] */
-	u8 eip97_clk_prscl2;	/* [21:19] */
-	u8 eip97_clk_prscl1;	/* [24:22] */
-	u8 atb_clk_div_sel;	/* [26:25] */
-	u8 cpu_cnt_clk_div_sel;	/* [28:27] */
-	u8 plkdbg_clk_div_sel;	/* [30:29] */
-};
-
-/* North Bridge clock configuration */
-struct a3700_nb_clock_cfg {
-	struct a3700_nb_clock_sel	clock_sel;
-	struct a3700_nb_clock_div_0	div0;
-	struct a3700_nb_clock_div_1	div1;
-	struct a3700_nb_clock_div_2	div2;
-};
-
-/*
- * South Bridge Clocks
- */
- /* South Bridge clock line selectors (0x18000) */
-struct a3700_sb_clock_sel {
-	enum a3700_clock_line gbe_50_pclk_sel;		/* [7:6] */
-	enum a3700_clock_line gbe_core_pclk_sel;	/* [9:8] */
-	enum a3700_clock_line gbe_125_pclk_sel;		/* [11:10] */
-	enum a3700_clock_line sdio_pclk_sel;		/* [15:14] */
-	enum a3700_clock_line usb32_usb2_sys_pclk_sel;	/* [17:16] */
-	enum a3700_clock_line usb32_ss_sys_pclk_sel;	/* [19:18] */
-	enum a3700_clock_line sb_axi_pclk_sel;		/* [21:20] */
-};
-
-/* South Bridge clock divider 0 (0x18004) */
-struct a3700_sb_clock_div_0 {
-	u8 sdio_clk_prscl2;		/* [5:3] */
-	u8 sdio_clk_prscl1;		/* [8:6] */
-	u8 usb32_usb2_sys_clk_prscl2;	/* [11:9] */
-	u8 usb32_usb2_sys_clk_prscl1;	/* [14:12] */
-	u8 usb32_ss_sys_clk_prscl2;	/* [17:15] */
-	u8 usb32_ss_sys_clk_prscl1;	/* [20:18] */
-	u8 sb_axi_clk_prscl2;		/* [23:21] */
-	u8 sb_axi_clk_prscl1;		/* [24:24] */
-};
-
-/* South Bridge clock divider 1 (0x18008) */
-struct a3700_sb_clock_div_1 {
-	u8 gbe_125_clk_prscl2;		/* [8:6] */
-	u8 gbe_125_clk_prscl1;		/* [11:9] */
-	u8 gbe_bm_core_clk_div2_sel;	/* [12] */
-	u8 gbe1_core_clk_div2_sel;	/* [13] */
-	u8 gbe0_core_clk_div2_sel;	/* [14] */
-	u8 gbe_core_clk_prscl2;		/* [20:18] */
-	u8 gbe_core_clk_prscl1;		/* [23:21] */
-};
-
-/* South Bridge clock divider 2 (0x1800C) */
-struct a3700_sb_clock_div_2 {
-	u8 gbe_50_clk_prscl2;		/* [8:6] */
-	u8 gbe_50_clk_prscl1;		/* [11:9] */
-};
-
-/* South Bridge clock configuration */
-struct a3700_sb_clock_cfg {
-	struct a3700_sb_clock_sel	clock_sel;
-	struct a3700_sb_clock_div_0	div0;
-	struct a3700_sb_clock_div_1	div1;
-	struct a3700_sb_clock_div_2	div2;
-};
-
-struct a3700_tbg_cfg {
-	u32	kvco_mhz;
-	u32	se_vcodiv;
-	u32	diff_vcodiv;
-};
-
-/* System-wide clock configuration */
-struct a3700_clock_cfg {
-	u32				cpu_freq_mhz;
-	u32				ddr_freq_mhz;
-	struct a3700_tbg_cfg		tbg_a;
-	struct a3700_tbg_cfg		tbg_b;
-	struct a3700_nb_clock_cfg	nb_clk_cfg;
-	struct a3700_sb_clock_cfg	sb_clk_cfg;
-};
-
-/* Indexes to MVEBU_A3700_CLOCK_CFGS array */
-#define MVEBU_A3700_PRESET_IDX_CPU_600_DDR_600		0
-#define MVEBU_A3700_PRESET_IDX_CPU_400_DDR_600		1
-#define MVEBU_A3700_PRESET_IDX_CPU_1000_DDR_800		2
-#define MVEBU_A3700_PRESET_IDX_CPU_800_DDR_800		3
-
-/* Init values for the static clock configurations array */
-/*
-*************************************************************************************************************************************
-Configuration 0 – CPU 600, DDR 600
-
-		SE DIV	DIFF DIV
-KVCO-A	2400	1	1	← 2^n
-KVCO-B	2000	1	1	← 2^n						NB				SB
-=====================================================================================================================================
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-A-S	1200	3	1	sdio_pclk_sel		400	SB					DIV0[8:6]	DIV0[5:3]
-	2^n →	1	NA	ddr_phy_mck_div_sel	600	NB	DIV0[18]	NA
-		3	1	mmc_pclk_sel		400	NB	DIV2[15:13]	DIV2[18:16]
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-A-P	1200	2	NA	a53_cpu_pclk_sel	600	NB	DIV0[30:28]	NA
-		2	NA	wc_ahb_div_sel		300	NB	DIV2[2:0]	NA
-	2^n →	0	NA	atb_clk_div_sel		600	NB	DIV2[26:5]	NA
-	2^n →	1	NA	plkdbg_clk_div_sel	300	NB	DIV2[30:29]	NA
-		2	NA	setm_tmx_pclk_sel	600	NB	DIV1[20:18]	NA
-		2	NA	trace_pclk_sel		600	NB	DIV0[22:20]	NA
-		3	2	tsecm_pclk_sel		200	NB	DIV1[14:12]	DIV1[17:15]
-		3	2	sqf_pclk_sel		200	NB	DIV1[26:24]	DIV1[29:27]
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-B_S	1000	2	1	eip97_pclk_sel		500	NB	DIV2[24:22]	DIV2[21:19]
-		5	2	pwm_pclk_sel		100	NB	DIV0[5:3]	DIV0[2:0]
-		5	1	sec_at_pclk_sel		200	NB	DIV1[5:3]	DIV1[2:0]
-		5	2	sec_dap_pclk_sel	100	NB	DIV1[11:9]	DIV1[8:6]
-		5	1	sata_host_pclk_sel	200	NB	DIV2[9:7]	DIV2[12:10]
-		4	2	ddr_fclk_pclk_sel	125	NB	DIV0[17:15]	DIV0[14:12]
-		6	NA	counter_pclk_sel	167	NB	DIV0[25:23]	NA
-	2^n →	1	NA	cpu_cnt_clk_div_sel	83	NB	DIV2[28:27]	NA
-		4	1	gbe_core_pclk_sel	250	SB					DIV1[20:18]	DIV1[23:21]
-		1	NA	gbe_bm_core_clk_div2_sel250	SB					DIV1[12]	NA
-		1	NA	gbe1_core_clk_div2_sel	250	SB					DIV1[13]	NA
-		1	NA	gbe0_core_clk_div2_sel	250	SB					DIV1[14]	NA
-		4	2	gbe_125_pclk_sel	125	SB					DIV1[11:9]	DIV1[8:6]
-		5	1	sb_axi_pclk_sel		200	SB					DIV0[20:18]	DIV0[23:21]
-		4	2	usb32_ss_sys_pclk_sel	125	SB					DIV0[17:15]	DIV0[20:18]
-		5	2	usb32_usb2_sys_pclk_sel	100	SB					DIV0[14:12]	DIV0[11:9]
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-B-P	1000	4	5	gbe_50_pclk_sel		50	SB					DIV2[11:9]	DIV2[8:6]
-*************************************************************************************************************************************
-*************************************************************************************************************************************
-Configuration 1 – CPU 400, DDR 600
-
-		SE DIV	DIFF DIV
-KVCO-A	2400	1	1	← 2^n
-KVCO-B	1600	1	1	← 2^n						NB				SB
-=====================================================================================================================================
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-A-S	1200	5	2	sec_at_pclk_sel		120	NB	DIV1[5:3]	DIV1[2:0]
-		5	4	sec_dap_pclk_sel	60	NB	DIV1[11:9]	DIV1[8:6]
-		5	4	pwm_pclk_sel		60	NB	DIV0[5:3]	DIV0[2:0]
-		2	6	ddr_fclk_pclk_sel	100	NB	DIV0[17:15]	DIV0[14:12]
-		1	4	eip97_pclk_sel		300	NB	DIV2[24:22]	DIV2[21:19]
-		2	2	gbe_core_pclk_sel	300	SB					DIV1[20:18]	DIV1[23:21]
-		1	NA	gbe_bm_core_clk_div2_sel300	SB					DIV1[12]	NA
-		1	NA	gbe1_core_clk_div2_sel	300	SB					DIV1[13]	NA
-		1	NA	gbe0_core_clk_div2_sel	300	SB					DIV1[14]	NA
-		5	1	sdio_pclk_sel		240	SB					DIV0[8:6]	DIV0[5:3]
-		4	5	usb32_usb2_sys_pclk_sel	60	SB					DIV0[14:12]	DIV0[11:9]
-		3	4	usb32_ss_sys_pclk_sel	100	SB					DIV0[17:15]	DIV0[20:18]
-	2^n →	1	NA	ddr_phy_mck_div_sel	600	NB	DIV0[18]	NA
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET	FREQ		PRE-1	BR	PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-A-P	1200	4	5	gbe_50_pclk_sel		60	SB					DIV2[11:9]	DIV2[8:6]
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-B_S	800	4	1	mmc_pclk_sel		200	NB	DIV2[15:13]	DIV2[18:16]
-		5	1	sata_host_pclk_sel	160	NB	DIV2[9:7]	DIV2[12:10]
-		5	1	tsecm_pclk_sel		160	NB	DIV1[14:12]	DIV1[17:15]
-		2	NA	setm_tmx_pclk_sel	400	NB	DIV1[20:18]	NA
-		5	1	sqf_pclk_sel		160	NB	DIV1[26:24]	DIV1[29:27]
-		2	NA	trace_pclk_sel		400	NB	DIV0[22:20]	NA
-		5	NA	counter_pclk_sel	160	NB	DIV0[25:23]	NA
-	2^n →	1	NA	cpu_cnt_clk_div_sel	80	NB	DIV2[28:27]	NA
-		2	NA	a53_cpu_pclk_sel	400	NB	DIV0[30:28]	NA
-		2	NA	wc_ahb_div_sel		200	NB	DIV2[2:0]	NA
-	2^n →	0	NA	atb_clk_div_sel		400	NB	DIV2[26:5]	NA
-	2^n →	1	NA	plkdbg_clk_div_sel	200	NB	DIV2[30:29]	NA
-		3	2	gbe_125_pclk_sel	133	SB					DIV1[11:9]	DIV1[8:6]
-		2	2	sb_axi_pclk_sel		200	SB					DIV0[20:18]	DIV0[23:21]
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-B-P	800
-*************************************************************************************************************************************
-*************************************************************************************************************************************
-Configuration 2 – CPU 1000, DDR 800
-
-		SE DIV	DIFF DIV
-KVCO-A	1600	0	1	← 2^n
-KVCO-B	2000	1	2	← 2^n						NB				SB
-=====================================================================================================================================
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-A-S	1600	4	1	mmc_pclk_sel		400	NB	DIV2[15:13]	DIV2[18:16]
-	2^n →	1	NA	ddr_phy_mck_div_sel	800	NB	DIV0[18]	NA
-		4	1	sdio_pclk_sel		400	SB					DIV0[8:6]	DIV0[5:3]
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-A-P	800	5	NA	counter_pclk_sel	160	NB	DIV0[25:23]	NA
-	2^n →	1	NA	cpu_cnt_clk_div_sel	80	NB	DIV2[28:27]	NA
-		4	1	sqf_pclk_sel		200	NB	DIV1[26:24]	DIV1[29:27]
-		4	1	sata_host_pclk_sel	200	NB	DIV2[9:7]	DIV2[12:10]
-		4	1	tsecm_pclk_sel		200	NB	DIV1[14:12]	DIV1[17:15]
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-B_S	1000	5	1	sec_at_pclk_sel		200	NB	DIV1[5:3]	DIV1[2:0]
-		2	1	eip97_pclk_sel		500	NB	DIV2[24:22]	DIV2[21:19]
-		1	NA	setm_tmx_pclk_sel	1000	NB	DIV1[20:18]	NA
-		1	NA	trace_pclk_sel		1000	NB	DIV0[22:20]	NA
-		1	NA	a53_cpu_pclk_sel	1000	NB	DIV0[30:28]	NA
-		4	NA	wc_ahb_div_sel		250	NB	DIV2[2:0]	NA
-	2^n →	0	NA	atb_clk_div_sel		1000	NB	DIV2[26:5]	NA
-	2^n →	1	NA	plkdbg_clk_div_sel	500	NB	DIV2[30:29]	NA
-		4	2	ddr_fclk_pclk_sel	125	NB	DIV0[17:15]	DIV0[14:12]
-		5	2	sec_dap_pclk_sel	100	NB	DIV1[11:9]	DIV1[8:6]
-		5	2	pwm_pclk_sel		100	NB	DIV0[5:3]	DIV0[2:0]
-		4	1	gbe_core_pclk_sel	250	SB					DIV1[20:18]	DIV1[23:21]
-		1	NA	gbe_bm_core_clk_div2_sel250	SB					DIV1[12]	NA
-		1	NA	gbe1_core_clk_div2_sel	250	SB					DIV1[13]	NA
-		1	NA	gbe0_core_clk_div2_sel	250	SB					DIV1[14]	NA
-		4	2	gbe_125_pclk_sel	125	SB					DIV1[11:9]	DIV1[8:6]
-		2	2	sb_axi_pclk_sel		250	SB					DIV0[20:18]	DIV0[23:21]
-		4	2	usb32_ss_sys_pclk_sel	125	SB					DIV0[17:15]	DIV0[20:18]
-		5	2	usb32_usb2_sys_pclk_sel	100	SB					DIV0[14:12]	DIV0[11:9]
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-B-P	500	2	5	gbe_50_pclk_sel		50	SB					DIV2[11:9]	DIV2[8:6]
-*************************************************************************************************************************************
-*************************************************************************************************************************************
-Configuration 3 – CPU 800, DDR 800
-
-		SE DIV	DIFF DIV
-KVCO-A	1600	0	1	← 2^n
-KVCO-B	2000	1	2	← 2^n						NB				SB
-=====================================================================================================================================
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-A-S	1600	4	1	mmc_pclk_sel		400	NB	DIV2[15:13]	DIV2[18:16]
-	2^n →	1	NA	ddr_phy_mck_div_sel	800	NB	DIV0[18]	NA
-		4	1	sdio_pclk_sel		400	SB					DIV0[8:6]	DIV0[5:3]
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-A-P	800	5	NA	counter_pclk_sel	160	NB	DIV0[25:23]	NA
-	2^n →	1	NA	cpu_cnt_clk_div_sel	80	NB	DIV2[28:27]	NA
-		4	1	sqf_pclk_sel		200	NB	DIV1[26:24]	DIV1[29:27]
-		4	1	sata_host_pclk_sel	200	NB	DIV2[9:7]	DIV2[12:10]
-		4	1	tsecm_pclk_sel		200	NB	DIV1[14:12]	DIV1[17:15]
-		2	1	eip97_pclk_sel		400	NB	DIV2[24:22]	DIV2[21:19]
-		1	NA	setm_tmx_pclk_sel	800	NB	DIV1[20:18]	NA
-		1	NA	trace_pclk_sel		800	NB	DIV0[22:20]	NA
-		1	NA	a53_cpu_pclk_sel	800	NB	DIV0[30:28]	NA
-		4	NA	wc_ahb_div_sel		200	NB	DIV2[2:0]	NA
-	2^n →	0	NA	atb_clk_div_sel		800	NB	DIV2[26:5]	NA
-	2^n →	1	NA	plkdbg_clk_div_sel	400	NB	DIV2[30:29]	NA
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-B_S	1000	5	1	sec_at_pclk_sel		200	NB	DIV1[5:3]	DIV1[2:0]
-		4	2	ddr_fclk_pclk_sel	125	NB	DIV0[17:15]	DIV0[14:12]
-		5	2	sec_dap_pclk_sel	100	NB	DIV1[11:9]	DIV1[8:6]
-		5	2	pwm_pclk_sel		100	NB	DIV0[5:3]	DIV0[2:0]
-		4	1	gbe_core_pclk_sel	250	SB					DIV1[20:18]	DIV1[23:21]
-		1	NA	gbe_bm_core_clk_div2_sel250	SB					DIV1[12]	NA
-		1	NA	gbe1_core_clk_div2_sel	250	SB					DIV1[13]	NA
-		1	NA	gbe0_core_clk_div2_sel	250	SB					DIV1[14]	NA
-		4	2	gbe_125_pclk_sel	125	SB					DIV1[11:9]	DIV1[8:6]
-		2	2	sb_axi_pclk_sel		250	SB					DIV0[20:18]	DIV0[23:21]
-		4	2	usb32_ss_sys_pclk_sel	125	SB					DIV0[17:15]	DIV0[20:18]
-		5	2	usb32_usb2_sys_pclk_sel	100	SB					DIV0[14:12]	DIV0[11:9]
--------------------------------------------------------------------------------------------------------------------------------------
-		PRE-1	PRE-2	TARGET			FREQ	BR	PRE-1		PRE-2		PRE-1		PRE-2
--------------------------------------------------------------------------------------------------------------------------------------
-TBG-B-P	500	2	5	gbe_50_pclk_sel		50	SB					DIV2[11:9]	DIV2[8:6]
-*************************************************************************************************************************************
-*/
-/* Init values for the static clock configurations array */
-#define MVEBU_A3700_CLOCK_CFGS	{\
-	 /* Clock tree configuration entry 0 (testing, not yet fully functional) */\
-	{ 600, 600, /* CPU, DDR */\
-		{2400, 1, 1}, /* TBG-A: KVCO Freq, SE_VCODIV, DIFF_VCODIV */\
-		{2000, 1, 1}, /* TBG-B: KVCO Freq, SE_VCODIV, DIFF_VCODIV */\
-		/* NorthBridge */\
-		{{TBG_A_S, TBG_B_S, TBG_B_S, TBG_B_S, TBG_A_P, TBG_A_P, TBG_A_P,\
-		  TBG_B_S, TBG_B_S, TBG_A_P, TBG_B_S, TBG_A_P, TBG_B_S},\
-		 {2, 5, 2, 4, 1, 2, 6, 2},		/* DIV0 */\
-		 {1, 5, 2, 5, 2, 3, 2, 2, 3},		/* DIV1 */\
-		 {2, 1, 5, 1, 3, 1, 2, 0, 1, 1} },	/* DIV2 */\
-		/* SouthBridge */\
-		{{TBG_B_P, TBG_B_S, TBG_B_S, TBG_A_S, TBG_B_S, TBG_B_S, TBG_B_S},\
-		 {1, 3, 2, 5, 2, 4, 1, 5},	/* DIV0 */\
-		 {2, 4, 1, 1, 1, 4, 1},		/* DIV1 */\
-		 {5, 4} }			/* DIV2 */\
-	},\
-	/* Clock tree configuration entry 1 (default working setup) */\
-	{ 400, 600, /* CPU, DDR */\
-		{2400, 1, 1}, /* TBG-A: KVCO Freq, SE_VCODIV, DIFF_VCODIV */\
-		{1600, 1, 1}, /* TBG-B: KVCO Freq, SE_VCODIV, DIFF_VCODIV */\
-		/* NorthBridge */\
-		{{TBG_B_S, TBG_B_S, TBG_A_S, TBG_A_S, TBG_B_S, TBG_B_S, TBG_B_S,\
-		 TBG_A_S, TBG_A_S, TBG_B_S, TBG_B_S, TBG_B_S, TBG_A_S},\
-		{4, 5, 6, 2, 1, 2, 5, 2},		/* DIV0 */\
-		{2, 5, 4, 5, 1, 5, 2, 1, 5},		/* DIV1 */\
-		{2, 1, 5, 1, 4, 1, 4, 0, 1, 1} },	/* DIV2 */\
-		/* SouthBridge */\
-		{{TBG_A_P, TBG_A_S, TBG_B_S, TBG_A_S, TBG_A_S, TBG_A_S, TBG_B_S},\
-		{1, 5, 5, 4, 3, 4, 2, 2},	/* DIV0 */\
-		{2, 3, 1, 1, 1, 2, 4},		/* DIV1 */\
-		{5, 4} }			/* DIV2 */\
-	},\
-	/* Clock tree configuration entry 2 */\
-	{ 1000, 800, /* CPU, DDR */\
-		{1600, 0, 1}, /* TBG-A: KVCO Freq, SE_VCODIV, DIFF_VCODIV */\
-		{2000, 1, 2}, /* TBG-B: KVCO Freq, SE_VCODIV, DIFF_VCODIV */\
-		/* NorthBridge */\
-		{{TBG_A_S, TBG_A_P, TBG_B_S, TBG_B_S, TBG_A_P, TBG_B_S, TBG_A_P,\
-		  TBG_B_S, TBG_B_S, TBG_B_S, TBG_A_P, TBG_B_S, TBG_B_S},\
-		{4, 5, 2, 4, 1, 1, 5, 1},		/* DIV0 */\
-		{1, 5, 2, 5, 1, 4, 1, 1, 4},		/* DIV1 */\
-		{2, 1, 4, 1, 4, 2, 1, 0, 1, 1} },	/* DIV2 */\
-		/* SouthBridge */\
-		{{TBG_B_P, TBG_B_S, TBG_B_S, TBG_A_S, TBG_B_S, TBG_B_S, TBG_B_S},\
-		{1, 4, 2, 5, 2, 4, 2, 2},	/* DIV0 */\
-		{2, 4, 1, 1, 1, 4, 1},		/* DIV1 */\
-		{5, 2} }			/* DIV2 */\
-	},\
-	/* Clock tree configuration entry 3 */\
-	{ 800, 800, /* CPU, DDR */\
-		{1600, 0, 1}, /* TBG-A: KVCO Freq, SE_VCODIV, DIFF_VCODIV */\
-		{2000, 1, 2}, /* TBG-B: KVCO Freq, SE_VCODIV, DIFF_VCODIV */\
-		/* NorthBridge */\
-		{{TBG_A_S, TBG_A_P, TBG_B_S, TBG_B_S, TBG_A_P, TBG_A_P, TBG_A_P,\
-		  TBG_B_S, TBG_B_S, TBG_A_P, TBG_A_P, TBG_A_P, TBG_A_P},\
-		{4, 5, 2, 4, 1, 1, 5, 1},		/* DIV0 */\
-		{1, 5, 2, 5, 1, 4, 1, 1, 4},		/* DIV1 */\
-		{2, 1, 4, 1, 4, 2, 1, 0, 1, 1} },	/* DIV2 */\
-		/* SouthBridge */\
-		{{TBG_B_P, TBG_B_S, TBG_B_S, TBG_A_S, TBG_B_S, TBG_B_S, TBG_B_S},\
-		{1, 4, 2, 5, 2, 4, 2, 2},	/* DIV0 */\
-		{2, 4, 1, 1, 1, 4, 1},		/* DIV1 */\
-		{5, 2} }			/* DIV2 */\
-	},\
-}
-
 /*****************************************************************************
 * get_ref_clk
 *
@@ -579,21 +82,6 @@ u32 get_cpu_clk(void);
 ******************************************************************************/
 u32 get_ddr_clk(void);
 
-
-/******************************************************************************
-* Name: set_clocks
-*
-* Description: Configure entire clock tree according to CPU and DDR frequency
-*
-* Input:	cpu_clk_mhz: required CPU clock
-*		ddr_clk_mhz: required DDR clock
-*		tbg_a_kvco_mhz: required TBG-A KVCO frequency or 0 for any available
-*		tbg_b_kvco_mhz: required TBG-B KVCO frequency or 0 for any available
-* Output:	None
-* Return:	Non-zero if the requested settings are not supported
-******************************************************************************/
-u32 set_clocks(u32 cpu_clk_mhz, u32 ddr_clk_mhz, u32 tbg_a_kvco_mhz, u32 tbg_b_kvco_mhz);
-
 /******************************************************************************
 * Name: get_cpu_clk_src_div
 *
@@ -606,6 +94,4 @@ u32 set_clocks(u32 cpu_clk_mhz, u32 ddr_clk_mhz, u32 tbg_a_kvco_mhz, u32 tbg_b_k
 ******************************************************************************/
 int get_cpu_clk_src_div(u32 *cpu_clk_sel, u32 *cpu_clk_prscl);
 
-int init_clock(void);
-
 #endif /* _ARMADA3700_CLOCK_H_ */
-- 
1.9.1

