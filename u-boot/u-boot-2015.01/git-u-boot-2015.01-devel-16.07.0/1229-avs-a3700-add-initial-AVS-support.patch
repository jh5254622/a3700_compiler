From b16258ba2a2d6e9beaa36264f62ce163b0fa4750 Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Wed, 22 Jun 2016 21:46:40 +0800
Subject: [PATCH 1229/1240] avs: a3700: add initial AVS support

This patch adds initial AVS support.
- get the AVS register base address from FDT.
- reset AVS during initialization.
- provide the API to preset the VDD loads according to
  CPU frequency.
  CPU frequency   VDD value    VDD loads
  1200MHZ         1.20V        39
  1000MHZ         1.15V        35
  <=800MHZ        1.10V        31

Change-Id: Id5065451887017c3ce4ae1179481fc0db2eba626
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/30650
Reviewed-by: Kostya Porotchkin <kostap@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
---
 arch/arm/cpu/armv8/armada3700/Makefile       |   1 +
 arch/arm/cpu/armv8/armada3700/avs.c          | 183 +++++++++++++++++++++++++++
 arch/arm/cpu/armv8/armada3700/soc-init.c     |   9 ++
 arch/arm/include/asm/arch-armada3700/avs.h   |  41 ++++++
 board/mvebu/Kconfig                          |  11 ++
 doc/device-tree-bindings/power/mvebu-avs.txt |  11 ++
 include/fdtdec.h                             |   1 +
 lib/fdtdec.c                                 |   1 +
 8 files changed, 258 insertions(+)
 create mode 100644 arch/arm/cpu/armv8/armada3700/avs.c
 create mode 100644 arch/arm/include/asm/arch-armada3700/avs.h
 create mode 100644 doc/device-tree-bindings/power/mvebu-avs.txt

diff --git a/arch/arm/cpu/armv8/armada3700/Makefile b/arch/arm/cpu/armv8/armada3700/Makefile
index ea7babc..f45b74f 100644
--- a/arch/arm/cpu/armv8/armada3700/Makefile
+++ b/arch/arm/cpu/armv8/armada3700/Makefile
@@ -27,3 +27,4 @@ obj-$(CONFIG_MVEBU_A3700_CLOCK) += mvebu_clock.o
 obj-$(CONFIG_MVEBU_BOOTMODE_SWITCH_SUPPORT) += mvebu_bootmode.o
 obj-$(CONFIG_MVEBU_EFUSE_SUPPORT) += a3700_mbox.o
 obj-$(CONFIG_MVEBU_A3700_PM) += pm.o
+obj-$(CONFIG_MVEBU_A3700_AVS) += avs.o
diff --git a/arch/arm/cpu/armv8/armada3700/avs.c b/arch/arm/cpu/armv8/armada3700/avs.c
new file mode 100644
index 0000000..d0ed0fc
--- /dev/null
+++ b/arch/arm/cpu/armv8/armada3700/avs.c
@@ -0,0 +1,183 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2016 Marvell International Ltd.
+ * ***************************************************************************
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * Neither the name of Marvell nor the names of its contributors may be used
+ * to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
+ * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ ***************************************************************************
+ */
+/*#define DEBUG*/
+#include <common.h>
+#include <fdtdec.h>
+#include <asm/arch-mvebu/fdt.h>
+#include <asm/arch-mvebu/mvebu.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/pm.h>
+#include <asm/errno.h>
+#include <asm/io.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+/* AVS registers */
+#define MVEBU_AVS_CTRL_0			(0x0)
+#define  AVS_SOFT_RESET				(BIT31)
+#define  AVS_ENABLE				(BIT30)
+#define  AVS_SPEED_TARGET_MASK			(0x0000FFFF)
+#define  AVS_HIGH_VDD_LIMIT_OFFS		(16)
+#define  AVS_LOW_VDD_LIMIT_OFFS			(22)
+#define  AVS_VDD_MASK				(0x3F)
+#define MVEBU_AVS_CTRL_2			(0x8)
+#define  AVS_LOW_VDD_EN				(BIT6)
+#define MVEBU_AVS_VSET(x)			(0x1C + 4 * (x - 1))
+
+/*
+ * The AVS voltage
+ * As recommeded by SW architect, following voltage should be used
+ * with specific different CPU frequency.
+ * 1200MHZ: 1.2V
+ * 1000MHZ: 1.15V
+ * 800MHZ: 1.10V
+ * 600MHZ and below: 1.05V
+ */
+#define AVS_VDD_HIGH		39 /* 1202mV */
+#define AVS_VDD_MEDIUM		35 /* 1155mV */
+#define AVS_VDD_LOW		31 /* 1108mV */
+#define AVS_VDD_LOWEST		31 /* 1108mV */
+
+/* There is only one AVS node for Armada-3700 */
+#define AVS_DT_NUM_MAX		1
+
+static void __iomem *reg_base;
+
+/* Reset the AVS */
+static int reset_avs(void)
+{
+	u32 reg_val;
+
+	/* Enable low voltage mode */
+	reg_val = readl(reg_base + MVEBU_AVS_CTRL_2);
+	reg_val |= AVS_LOW_VDD_EN;
+	writel(reg_val, reg_base + MVEBU_AVS_CTRL_2);
+
+	/* Reset and release reset */
+	reg_val = readl(reg_base + MVEBU_AVS_CTRL_0);
+	reg_val |= AVS_SOFT_RESET;
+	writel(reg_val, reg_base + MVEBU_AVS_CTRL_0);
+	reg_val = readl(reg_base + MVEBU_AVS_CTRL_0);
+	reg_val &= ~(AVS_SOFT_RESET);
+	writel(reg_val, reg_base + MVEBU_AVS_CTRL_0);
+
+	return 0;
+}
+
+/* Set the VDD values for the four VSET loads */
+int set_avs_vdd_loads(void)
+{
+	u32 reg_val;
+	u32 vdd;
+	u32 cpu_clk;
+	int i;
+
+	/* Disable AVS before the configuration */
+	reg_val = readl(reg_base + MVEBU_AVS_CTRL_0);
+	reg_val &= ~(AVS_ENABLE);
+	writel(reg_val, reg_base + MVEBU_AVS_CTRL_0);
+
+	/*
+	 * Set VDD for VSET 0
+	 * The VSET 0 VDD should be set according to frequency,
+	 * Other VSET VDD could use lowest VDD.
+	 */
+	reg_val = readl(reg_base + MVEBU_AVS_CTRL_0);
+	reg_val &= ~((AVS_VDD_MASK << AVS_HIGH_VDD_LIMIT_OFFS) |
+			(AVS_VDD_MASK << AVS_LOW_VDD_LIMIT_OFFS));
+	cpu_clk =  get_cpu_clk();
+
+	if (cpu_clk == 1200)
+		vdd = AVS_VDD_HIGH;
+	else if (cpu_clk == 1000)
+		vdd = AVS_VDD_MEDIUM;
+	else if (cpu_clk == 800)
+		vdd = AVS_VDD_LOW;
+	else
+		vdd = AVS_VDD_LOWEST;
+
+	reg_val |= ((vdd << AVS_HIGH_VDD_LIMIT_OFFS) |
+			(vdd << AVS_LOW_VDD_LIMIT_OFFS));
+	writel(reg_val, reg_base + MVEBU_AVS_CTRL_0);
+
+	/* Set VDD for VSET 1, VSET 2 and VSET 3 */
+	for (i = 1; i <= 3; i++) {
+		reg_val = readl(reg_base + MVEBU_AVS_VSET(i));
+		reg_val &= ~((AVS_VDD_MASK << AVS_HIGH_VDD_LIMIT_OFFS) |
+				(AVS_VDD_MASK << AVS_LOW_VDD_LIMIT_OFFS));
+		reg_val |= ((AVS_VDD_LOWEST << AVS_HIGH_VDD_LIMIT_OFFS) |
+				(AVS_VDD_LOWEST << AVS_LOW_VDD_LIMIT_OFFS));
+		writel(reg_val, reg_base + MVEBU_AVS_VSET(i));
+	}
+
+	/* Enable AVS after the configuration */
+	reg_val = readl(reg_base + MVEBU_AVS_CTRL_0);
+	reg_val |= AVS_ENABLE;
+	writel(reg_val, reg_base + MVEBU_AVS_CTRL_0);
+
+	return 0;
+}
+
+int init_avs(void)
+{
+	int ret = 0;
+	int node_list[AVS_DT_NUM_MAX];
+	int node;
+	u32 count;
+
+	debug_enter();
+
+	count = fdtdec_find_aliases_for_id(gd->fdt_blob, "avs",
+			COMPAT_MVEBU_A3700_AVS, node_list, AVS_DT_NUM_MAX);
+	if (count <= 0)
+		return -ENODEV;
+
+	/* There should be only one "AVS" DT node */
+	node = node_list[0];
+	if (node <= 0)
+		return -ENODEV;
+
+	/* Get register base from FDT */
+	reg_base = (u8 *)fdt_get_regs_offs(gd->fdt_blob, node, "reg");
+
+	/* Reset AVS */
+	ret = reset_avs();
+	if (ret) {
+		error("Failed to reset AVS\n");
+		return -EINVAL;
+	}
+
+	debug_exit();
+	return ret;
+}
diff --git a/arch/arm/cpu/armv8/armada3700/soc-init.c b/arch/arm/cpu/armv8/armada3700/soc-init.c
index 21ae0f9..362d9ea 100644
--- a/arch/arm/cpu/armv8/armada3700/soc-init.c
+++ b/arch/arm/cpu/armv8/armada3700/soc-init.c
@@ -33,6 +33,7 @@
 #include <asm/arch/boot_mode.h>
 #include <fdt_support.h>
 #include <asm/arch/pm.h>
+#include <asm/arch/avs.h>
 
 /* NB warm reset */
 #define MVEBU_NB_WARM_RST_REG	(MVEBU_GPIO_NB_REG_BASE + 0x40)
@@ -75,6 +76,14 @@ void soc_init(void)
 		error("COMPHY initialization failed\n");
 #endif
 
+/*
+ * The AVS should be initialized before PM since the PM will decide
+ * to invoke DVS either by AVS, I2C or GPIO.
+ */
+#ifdef CONFIG_MVEBU_A3700_AVS
+	init_avs();
+#endif
+
 #ifdef CONFIG_MVEBU_A3700_PM
 	init_pm();
 #endif
diff --git a/arch/arm/include/asm/arch-armada3700/avs.h b/arch/arm/include/asm/arch-armada3700/avs.h
new file mode 100644
index 0000000..87e2d92
--- /dev/null
+++ b/arch/arm/include/asm/arch-armada3700/avs.h
@@ -0,0 +1,41 @@
+/*
+ * ***************************************************************************
+ * Copyright (C) 2016 Marvell International Ltd.
+ * ***************************************************************************
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * Neither the name of Marvell nor the names of its contributors may be used
+ * to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
+ * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ ***************************************************************************
+ */
+#ifndef _ARMADA3700_AVS_H_
+#define _ARMADA3700_AVS_H_
+
+int set_avs_vdd_loads(void);
+int init_avs(void);
+
+#endif /* _ARMADA3700_AVS_H_ */
+
diff --git a/board/mvebu/Kconfig b/board/mvebu/Kconfig
index b1364ab..8b4d441 100644
--- a/board/mvebu/Kconfig
+++ b/board/mvebu/Kconfig
@@ -59,6 +59,7 @@ config MVEBU_A3700_CLOCK
 config MVEBU_A3700_PM
 	bool "Armada-3700 PM support"
 	depends on TARGET_ARMADA_3700
+	select MVEBU_A3700_AVS
 	default n
 	help
 	  Choose this option to support
@@ -66,6 +67,16 @@ config MVEBU_A3700_PM
 	  This configuration set default PM settings
 	  according to current DT and clock configuration.
 
+config MVEBU_A3700_AVS
+	bool "Armada-3700 AVS support"
+	depends on TARGET_ARMADA_3700
+	default n
+	help
+	  Choose this option to support
+	  Marvell Armada-3700 Adaptive Voltage Scaling(AVS).
+	  This configuration set default AVS settings
+	  according to current DT and clock configuration.
+
 config MVEBU_BOOTMODE_SWITCH_SUPPORT
 	bool "Mvebu bootmode switch support"
 	depends on DEVEL_BOARD && TARGET_ARMADA_3700
diff --git a/doc/device-tree-bindings/power/mvebu-avs.txt b/doc/device-tree-bindings/power/mvebu-avs.txt
new file mode 100644
index 0000000..ed7b198
--- /dev/null
+++ b/doc/device-tree-bindings/power/mvebu-avs.txt
@@ -0,0 +1,11 @@
+The AVS support inside of Marvell EBU Armada-3700 SoC
+
+Required Properties:
+-compatible: "marvell,armada-3700-avs"
+-reg: AVS internal register offset and size
+
+Example:
+	pm@11500 {
+		compatible = "marvell,armada-3700-avs";
+		reg = <0x11500 0x40>;
+	};
diff --git a/include/fdtdec.h b/include/fdtdec.h
index 6a9a867..3460f63 100644
--- a/include/fdtdec.h
+++ b/include/fdtdec.h
@@ -166,6 +166,7 @@ enum fdt_compat_id {
 	COMPAT_MVEBU_RTC_REG,
 	COMPAT_MVEBU_GPIO,
 	COMPAT_MVEBU_A3700_PM,
+	COMPAT_MVEBU_A3700_AVS,
 
 	COMPAT_COUNT,
 };
diff --git a/lib/fdtdec.c b/lib/fdtdec.c
index ea14aed..0d00da1 100644
--- a/lib/fdtdec.c
+++ b/lib/fdtdec.c
@@ -128,6 +128,7 @@ static const char * const compat_names[COMPAT_COUNT] = {
 	COMPAT(MVEBU_RTC_REG, "marvell,real-time-clock"),
 	COMPAT(MVEBU_GPIO, "marvell,mvebu-gpio"),
 	COMPAT(MVEBU_A3700_PM, "marvell,armada-3700-pm"),
+	COMPAT(MVEBU_A3700_AVS, "marvell,armada-3700-avs"),
 };
 
 const char *fdtdec_get_compatible(enum fdt_compat_id id)
-- 
1.9.1

